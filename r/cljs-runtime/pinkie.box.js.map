{"version":3,"sources":["pinkie/box.cljs"],"mappings":";AAEA,6BAAA,7BAAMA,kEAAiBC;AAAvB,AACE,IAAMA,UAAI,iBAAAC,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAA;;;AAAV,AAAA,kDAAA,uDAEG,iBAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,uDAAA,QAAA,yDAAA;;;KAAA;AAAA,kDAAA,uDAAA,QAAA,yDAAA;;;KAAA;AAAA,kDAAA,uDAAA,QAAA,yDAAA;;;KAAA;AAAA,kDAAA,uDAAA,OAAA,yDAAA;;;KAAA;AAAA;;;KAAA;AAAA,kDAAA,uDAAA,QAAA,yDAAA,QAAA,8DAAA,WAAA,oDAAA,IAAA,qDAAA,IAAA,0DAAA,IAAA,uDAAA,IAAA,2DAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,mEAAAF;;;;;AAcL,yBAAA,iCAAAG,1DAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAA0CK;UAA1C,AAAAH,4CAAAF,eAAA,jEAA2BN;YAA3B,AAAAQ,4CAAAF,eAAA,nEAA+BI;AAA/B,AACE,IAAME,IAAE,AAACC,uGAAM,AAACd,2BAAgBC,KAAKW;AAArC,AAEEC","names":["pinkie.box/container-style","box","or__5045__auto__","G__48392","cljs.core/Keyword","js/Error","p__48401","map__48403","cljs.core/--destructure-map","cljs.core.get","pinkie.box/apply-style","style","opts","s","cljs.core.merge"],"sourcesContent":["(ns pinkie.box)\n\n(defn container-style [box]\n  (let [box (or box :sm)]\n    {:style\n     (case box\n       :sm {:width \"400px\" :height \"300px\"}\n       :md {:width \"600px\" :height \"400px\"}\n       :lg {:width \"800px\" :height \"600px\"}\n       :fl {:width \"100%\"  :height \"100%\"}\n       :na {} ; no sizing\n       :fs {:width \"100vw\" :height \"100vw\"\n            :position \"absolute\"\n            :top 0\n            :left 0\n            :bottom 0\n            :right 0\n            :z-index 5000})}))\n\n(defn apply-style [{:keys [box style] :as opts}]\n  (let [s (merge (container-style box) opts)]\n    ;(println \"merged style: \" s \"box: \" box \" opts:\" opts)\n    s))\n\n#_(defn size-selector [size text current set-size!]\n    (let [bg (if (= size current)\n               \"bg-green-400\"\n               \"bg-yellow-400\")]\n      [:span.border-solid.ml-2\n       {:class bg\n        :on-click #(set-size! size)} text]))\n\n#_(defn box [{:keys [size render-fn box-fn data]}]\n    (let [size-a (r/atom (or size :small))\n          set-size! (fn [size-new]\n                      (println \"size: \" size-new)\n                      (reset! size-a size-new))\n         ;handle (useFullScreenHandle)  ; hooks need :f> -  https://github.com/reagent-project/reagent/blob/master/doc/ReactFeatures.md\n         ;_ (println \"handle: \" handle)\n          ]\n      (fn [{:keys [size render-fn box-fn data]}]\n        (let [style (container-style @size-a)\n              box-fn (or box-fn box-fn-default)]\n          [:div\n           [:span\n            [size-selector :small \"sm\" @size-a set-size!]\n            [size-selector :medium \"md\" @size-a set-size!]\n            [size-selector :large \"lg\" @size-a set-size!]\n            #_[size-selector :full \"fs\" @size-a set-size!]]\n           [:div.bg-blue-300.overflow-hidden  ; in case the renderer ignores our size\n            style\n            [render-fn (box-fn data style)]]]))))"],"x_google_ignoreList":[0]}