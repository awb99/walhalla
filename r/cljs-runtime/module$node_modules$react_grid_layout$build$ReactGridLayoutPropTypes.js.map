{
"version":3,
"file":"module$node_modules$react_grid_layout$build$ReactGridLayoutPropTypes.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/react-grid-layout/build/ReactGridLayoutPropTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_grid_layout$build$ReactGridLayoutPropTypes\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resizeHandleType = exports.resizeHandleAxesType = exports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Defines which resize handles should be rendered (default: 'se')\n// Allows for any combination of:\n// 's' - South handle (bottom-center)\n// 'w' - West handle (left-center)\n// 'e' - East handle (right-center)\n// 'n' - North handle (top-center)\n// 'sw' - Southwest handle (bottom-left)\n// 'nw' - Northwest handle (top-left)\n// 'se' - Southeast handle (bottom-right)\n// 'ne' - Northeast handle (top-right)\nvar resizeHandleAxesType\n/*: ReactPropsChainableTypeChecker*/\n= _propTypes.default.arrayOf(_propTypes.default.oneOf([\"s\", \"w\", \"e\", \"n\", \"sw\", \"nw\", \"se\", \"ne\"])); // Custom component for resize handles\n\n\nexports.resizeHandleAxesType = resizeHandleAxesType;\n\nvar resizeHandleType\n/*: ReactPropsChainableTypeChecker*/\n= _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]);\n/*:: export type Props = {|\n  className: string,\n  style: Object,\n  width: number,\n  autoSize: boolean,\n  cols: number,\n  draggableCancel: string,\n  draggableHandle: string,\n  verticalCompact: boolean,\n  compactType: CompactType,\n  layout: Layout,\n  margin: [number, number],\n  containerPadding: ?[number, number],\n  rowHeight: number,\n  maxRows: number,\n  isBounded: boolean,\n  isDraggable: boolean,\n  isResizable: boolean,\n  isDroppable: boolean,\n  preventCollision: boolean,\n  useCSSTransforms: boolean,\n  transformScale: number,\n  droppingItem: $Shape<LayoutItem>,\n  resizeHandles: ResizeHandleAxis[],\n  resizeHandle?: ResizeHandle,\n  allowOverlap: boolean,\n\n  // Callbacks\n  onLayoutChange: Layout => void,\n  onDrag: EventCallback,\n  onDragStart: EventCallback,\n  onDragStop: EventCallback,\n  onResize: EventCallback,\n  onResizeStart: EventCallback,\n  onResizeStop: EventCallback,\n  onDropDragOver: (e: DragOverEvent) => ?({| w?: number, h?: number |} | false),\n  onDrop: (layout: Layout, item: ?LayoutItem, e: Event) => void,\n  children: ReactChildrenArray<ReactElement<any>>,\n  innerRef?: Ref<\"div\">\n|};*/\n\n/*:: export type DefaultProps = $Diff<\n  Props,\n  {\n    children: ReactChildrenArray<ReactElement<any>>,\n    width: number\n  }\n>;*/\n\n\nexports.resizeHandleType = resizeHandleType;\nvar _default = {\n  //\n  // Basic props\n  //\n  className: _propTypes.default.string,\n  style: _propTypes.default.object,\n  // This can be set explicitly. If it is not set, it will automatically\n  // be set to the container width. Note that resizes will *not* cause this to adjust.\n  // If you need that behavior, use WidthProvider.\n  width: _propTypes.default.number,\n  // If true, the container height swells and contracts to fit contents\n  autoSize: _propTypes.default.bool,\n  // # of cols.\n  cols: _propTypes.default.number,\n  // A selector that will not be draggable.\n  draggableCancel: _propTypes.default.string,\n  // A selector for the draggable handler\n  draggableHandle: _propTypes.default.string,\n  // Deprecated\n  verticalCompact: function verticalCompact(props\n  /*: Props*/\n  ) {\n    if (props.verticalCompact === false && process.env.NODE_ENV !== \"production\") {\n      console.warn( // eslint-disable-line no-console\n      \"`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. \" + 'Use `compactType`: \"horizontal\" | \"vertical\" | null.');\n    }\n  },\n  // Choose vertical or hotizontal compaction\n  compactType: (_propTypes.default.oneOf([\"vertical\", \"horizontal\"])\n  /*: ReactPropsChainableTypeChecker*/\n  ),\n  // layout is an array of object with the format:\n  // {x: Number, y: Number, w: Number, h: Number, i: String}\n  layout: function layout(props\n  /*: Props*/\n  ) {\n    var layout = props.layout; // I hope you're setting the data-grid property on the grid items\n\n    if (layout === undefined) return;\n\n    require(\"./utils\").validateLayout(layout, \"layout\");\n  },\n  //\n  // Grid Dimensions\n  //\n  // Margin between items [x, y] in px\n  margin: (_propTypes.default.arrayOf(_propTypes.default.number)\n  /*: ReactPropsChainableTypeChecker*/\n  ),\n  // Padding inside the container [x, y] in px\n  containerPadding: (_propTypes.default.arrayOf(_propTypes.default.number)\n  /*: ReactPropsChainableTypeChecker*/\n  ),\n  // Rows have a static height, but you can change this based on breakpoints if you like\n  rowHeight: _propTypes.default.number,\n  // Default Infinity, but you can specify a max here if you like.\n  // Note that this isn't fully fleshed out and won't error if you specify a layout that\n  // extends beyond the row capacity. It will, however, not allow users to drag/resize\n  // an item past the barrier. They can push items beyond the barrier, though.\n  // Intentionally not documented for this reason.\n  maxRows: _propTypes.default.number,\n  //\n  // Flags\n  //\n  isBounded: _propTypes.default.bool,\n  isDraggable: _propTypes.default.bool,\n  isResizable: _propTypes.default.bool,\n  // If true, grid can be placed one over the other.\n  allowOverlap: _propTypes.default.bool,\n  // If true, grid items won't change position when being dragged over.\n  preventCollision: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool,\n  // parent layout transform scale\n  transformScale: _propTypes.default.number,\n  // If true, an external element can trigger onDrop callback with a specific grid position as a parameter\n  isDroppable: _propTypes.default.bool,\n  // Resize handle options\n  resizeHandles: resizeHandleAxesType,\n  resizeHandle: resizeHandleType,\n  //\n  // Callbacks\n  //\n  // Callback so you can save the layout. Calls after each drag & resize stops.\n  onLayoutChange: _propTypes.default.func,\n  // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).\n  // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n  onDragStart: _propTypes.default.func,\n  // Calls on each drag movement.\n  onDrag: _propTypes.default.func,\n  // Calls when drag is complete.\n  onDragStop: _propTypes.default.func,\n  //Calls when resize starts.\n  onResizeStart: _propTypes.default.func,\n  // Calls when resize movement happens.\n  onResize: _propTypes.default.func,\n  // Calls when resize is complete.\n  onResizeStop: _propTypes.default.func,\n  // Calls when some element is dropped.\n  onDrop: _propTypes.default.func,\n  //\n  // Other validations\n  //\n  droppingItem: (_propTypes.default.shape({\n    i: _propTypes.default.string.isRequired,\n    w: _propTypes.default.number.isRequired,\n    h: _propTypes.default.number.isRequired\n  })\n  /*: ReactPropsChainableTypeChecker*/\n  ),\n  // Children must not have duplicate keys.\n  children: function children(props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    var children = props[propName]; // Check children keys for duplicates. Throw if found.\n\n    var keys = {};\n\n    _react.default.Children.forEach(children, function (child) {\n      if ((child === null || child === void 0 ? void 0 : child.key) == null) return;\n\n      if (keys[child.key]) {\n        throw new Error('Duplicate child key \"' + child.key + '\" found! This will cause problems in ReactGridLayout.');\n      }\n\n      keys[child.key] = true;\n    });\n  },\n  // Optional ref for getting a reference for the wrapping div.\n  innerRef: _propTypes.default.any\n};\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","resizeHandleType","resizeHandleAxesType","_propTypes","_react","arrayOf","oneOf","oneOfType","node","func","_default","className","string","style","object","width","number","autoSize","bool","cols","draggableCancel","draggableHandle","verticalCompact","props","console","warn","compactType","layout","undefined","validateLayout","margin","containerPadding","rowHeight","maxRows","isBounded","isDraggable","isResizable","allowOverlap","preventCollision","useCSSTransforms","transformScale","isDroppable","resizeHandles","resizeHandle","onLayoutChange","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","onDrop","droppingItem","shape","i","isRequired","w","h","children","propName","keys","Children","forEach","child","key","Error","innerRef","any"]
}
