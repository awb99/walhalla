{"version":3,"sources":["modular/ws/events.cljs"],"mappings":";AAOA;;;oCAAA,pCAAMA;AAAN,AAGE,OAACC,+CAAQ,AAAA,AAAIC;;AAEf,oCAAA,pCAAMC;AAAN,AACE,IAAAC,aAAyB,AAACJ;IAA1BI,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAAcG;AAAd,AACE,oDAAA,7CAACC,qDAAUD;;AAEf,+CAAA,/CAAME,sGAAsBC;AAA5B,AACE,IAAMC,UAAQ,AAACX;IACTY,OAAK,AAAOD;IACZE,kBAAgB,kDAAA,mFAAA,wDAAA,wDAAA,8DAAA,nTAACC,+CAAOJ;IACxBK,cAAY,kDAAA,mFAAA,wDAAA,wDAAA,oDAAA,zSAACD,+CAAOJ;AAH1B,AAIE,SAAI,AAACF,6CAAEI,KAAKC,sBACR,AAACL,6CAAEI,KAAKG;;AAEhB,iCAAA,jCAAMC,0EAAcN;AAApB,AACE,GAAM,AAACD,6CAAqBC;AAA5B,AACE,AAAAO,0DAAAC,mCAAA,qDAAA,oBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,MAAA;;AACA,GAAI,AAAChB;AACH,yDAAA,mFAAA,wDAAA,2EAAA,xQAACW,+CAAOJ;;AACR,yDAAA,mFAAA,wDAAA,2EAAA,xQAACI,+CAAOJ;;;AAJZ;;;AAMF,yDAAA,zDAACU,kHAEA,cAAAC,HAAKX;AAAL,AAAA,IAAAY,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASE;AAAT,AACE,IAAMZ,OAAK,AAACI,+BAAaN;AAAzB,AACE,AAAAO,0DAAAC,mCAAA,qDAAA,oBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,uCAA6CP;GAA7C,OAAA,KAAA,MAAA;;AACA,8BAAA,9BAACa,0CAAqBb;;AACtBF;;AAuBL,yDAAA,zDAACU,oHAEA,cAAAM,HAAKhB;AAAL,AAAA,IAAAiB,aAAAD;QAAA,AAAAH,4CAAAI,WAAA,IAAA,/DAASH;oBAAT,AAAAD,4CAAAI,WAAA,IAAA,3EAAWC;oBAAX,AAAAL,4CAAAI,WAAA,IAAA,3EAAyBE;AAAzB,AACE,AAAAZ,0DAAAC,mCAAA,wDAAA,oBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,YAAmBS;GAAnB,OAAA,KAAA,MAAA;;AACA,oBAAM,AAAA,gGAAcA;AAApB,AACE,AAAAX,0DAAAC,mCAAA,qDAAA,oBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,yBAA+BS;GAA/B,OAAA,KAAA,MAAA;;AACA,uBAAA,mFAAA,1GAACE,+KAA4BF;;AAF/B;;AAGA,wDAAA,jDAACG,8CAAMrB,kDAAOkB;;AAEjB,2DAAA,3DAACI,kLAEA,WAAKtB,GAAGc;AAAR,AACE,yDAAA,mFAAA,+CAAA,pLAACV,+CAAOJ;;AAEX,yDAAA,zDAACU,uHAEA,cAAAa,HAAKvB;AAAL,AAAA,IAAAwB,aAAAD;QAAA,AAAAV,4CAAAW,WAAA,IAAA,/DAASV;WAAT,AAAAD,4CAAAW,WAAA,IAAA,lEAAWC;AAAX,AACE,AAAAlB,0DAAAC,mCAAA,uDAAA,oBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,8DAAA,LAAgEgB;GAAhE,OAAA,KAAA,MAAA;;AACAzB","names":["modular.ws.events/application-url","cemerick.url.url","js/window","modular.ws.events/is-https?","map__45062","cljs.core/--destructure-map","cljs.core.get","protocol","cljs.core._EQ_","modular.ws.events/is-served-by-shadow?","db","app-url","port","shadow-dev-port","cljs.core.get_in","shadow-port","modular.ws.events/changed-port","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","re_frame.core.reg_event_db","p__45082","vec__45083","cljs.core.nth","_","modular.ws.core/init-ws!","p__45108","vec__45110","new-state-map","old-state-map","re-frame.core/dispatch","cljs.core.assoc","re_frame.core.reg_sub","p__45117","vec__45119","data"],"sourcesContent":["(ns modular.ws.events\n  (:require\n   [taoensso.timbre :refer-macros [debug info warn error]]\n   [cemerick.url :as url]\n   [re-frame.core :as rf]\n   [modular.ws.core :refer [init-ws!]]))\n\n(defn application-url\n  \"gets the current url, as a map\"\n  []\n  (url/url (-> js/window .-location .-href)))\n\n(defn is-https? []\n  (let [{:keys [protocol]} (application-url)]\n    (= \"https\" protocol)))\n\n(defn is-served-by-shadow? [db]\n  (let [app-url (application-url)\n        port (:port app-url)\n        shadow-dev-port (get-in db [:config :shadow :dev-http :port])\n        shadow-port (get-in db [:config :shadow :http :port])]\n    (or (= port shadow-dev-port)\n        (= port shadow-port))))\n\n(defn changed-port [db]\n  (when (is-served-by-shadow? db)\n    (warn \"the page is served by shadow which does not support sente websockets - connecting to jetty server..\")\n    (if (is-https?)\n      (get-in db [:config :webly/web-server :ssl-port])\n      (get-in db [:config :webly/web-server :port]))))\n\n(rf/reg-event-db\n :ws/init\n (fn [db [_]]\n   (let [port (changed-port db)]\n     (warn \"ws connect to port (nil=unchanged): \" port)\n     (init-ws! \"/api/chsk\" port)\n     db)))\n\n#_[{:type :auto\n    :open? false\n    :ever-opened? false\n    :csrf-token \"6zxUoCmfhv5lleMLfrHMgpChTHYecrY2TSswTz9YTrLLmm/bn7WWT+NCe4mbEFFfEg+gl/Zyobr7tdQX\"}\n\n   {:type :ws\n    :open? true\n    :ever-opened? true\n    :csrf-token \"6zxUoCmfhv5lleMLfrHMgpChTHYecrY2TSswTz9YTrLLmm/bn7WWT+NCe4mbEFFfEg+gl/Zyobr7tdQX\"\n    :uid \"93732cb7-da5c-4792-88cd-c9362dbed11d\"\n    :handshake-data nil\n    :first-open? true}]\n\n;[{:type :auto, \n  ;:open? false, \n  ;:ever-opened? false, \n  ;:csrf-token \"2rSXN8g5Pd/ctm/JHj9F4eH85rynsgTj3H69O0mpxi2R/oLnwMFRgEoMGGEkUA09g+6VSFDvEYwXtn2/\", \n  ;:last-ws-error {:udt 1618194904283, :ev #object[Event [object Event]]}, :last-close {:udt 1618194904289, :reason :downgrading-ws-to-ajax}, \n  ;:last-ws-close {:udt 1618194904303, :ev #object[CloseEvent [object CloseEvent]], :clean? false, :code 1006, :reason \"\"}, \n  ;:udt-next-reconnect 1618195624274} \n\n(rf/reg-event-db\n :ws/state\n (fn [db [_ new-state-map old-state-map]]\n   (debug \"ws/state \" new-state-map)\n   (when (:first-open? new-state-map)\n     (info \"ws open (first-time): \" new-state-map)\n     (rf/dispatch [:ws/open-first new-state-map]))\n   (assoc db :ws new-state-map)))\n\n(rf/reg-sub\n :ws/connected?\n (fn [db _]\n   (get-in db [:ws :open?])))\n\n(rf/reg-event-db\n :ws/unknown\n (fn [db [_ data]]\n   (error \"ws server does not know how to handle events of type: \" data \" you need to add code to clj side of your app\")\n   db))\n\n"],"x_google_ignoreList":[0]}