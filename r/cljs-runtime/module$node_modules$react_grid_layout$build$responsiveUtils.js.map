{
"version":3,
"file":"module$node_modules$react_grid_layout$build$responsiveUtils.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwHxHC,QAASA,gBAAe,CAACC,WAAD,CAIxB,CAIE,MADEC,OAAOC,CAAAA,IAAPA,CAAYF,WAAZE,CACUC,CAAAA,IAAL,CAAU,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAC/B,MAAOL,YAAA,CAAYI,CAAZ,CAAP,CAAwBJ,WAAA,CAAYK,CAAZ,CADO,CAA1B,CAJT,CAzHAJ,MAAOK,CAAAA,cAAP,CAAsBR,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CS,MAAO,CAAA,CADoC,CAA7C,CAGAT,QAAQU,CAAAA,8BAAR,CAoEAA,QAAuC,CAACC,OAAD,CAErCT,WAFqC,CAIrCU,UAJqC,CAMrCC,cANqC,CAQrCC,IARqC,CAUrCC,WAVqC,CAcvC,CAEE,GAAIJ,OAAA,CAAQC,UAAR,CAAJ,CAAyB,MAAO,GAAII,MAAOC,CAAAA,WAAX,EAAwBN,OAAA,CAAQC,UAAR,CAAxB,CAE5BM,eAAAA,CAASP,OAAA,CAAQE,cAAR,CACTM;WAAAA,CAAoBlB,eAAA,CAAgBC,WAAhB,CACpBkB,WAAAA,CAAmBD,WAAkBE,CAAAA,KAAlB,CAAwBF,WAAkBG,CAAAA,OAAlB,CAA0BV,UAA1B,CAAxB,CAEdW,YAAAA,CAAI,CAAb,KAAK,IAAWC,IAAMJ,UAAiBK,CAAAA,MAAvC,CAA+CF,WAA/C,CAAmDC,GAAnD,CAAwDD,WAAA,EAAxD,CAA6D,CAC3D,IAAIhB,EAAIa,UAAA,CAAiBG,WAAjB,CAER,IAAIZ,OAAA,CAAQJ,CAAR,CAAJ,CAAgB,CACdW,cAAA,CAASP,OAAA,CAAQJ,CAAR,CACT,MAFc,CAH2C,CAS7DW,cAAA,CAAS,GAAIF,MAAOC,CAAAA,WAAX,EAAwBC,cAAxB,EAAkC,EAAlC,CAET,OAAO,GAAIF,MAAOU,CAAAA,OAAX,EAAoB,GAAIV,MAAOW,CAAAA,aAAX,EAA0BT,cAA1B,CAAkC,CACrDJ,IADqD,CAAlC,CAApB,CAEHC,WAFG,CAEUD,IAFV,CAnBT,CAjFAd,QAAQ4B,CAAAA,sBAAR,CAaAA,QAA+B,CAAC1B,WAAD,CAE7B2B,KAF6B,CAM/B,CAIE,IAHA,IAAIC,OAAS7B,eAAA,CAAgBC,WAAhB,CAAb;AACI6B,SAAWD,MAAA,CAAO,CAAP,CADf,CAGSP,EAAI,CAHb,CAGgBC,IAAMM,MAAOL,CAAAA,MAA7B,CAAqCF,CAArC,CAAyCC,GAAzC,CAA8CD,CAAA,EAA9C,CAAmD,CACjD,IAAIS,eAAiBF,MAAA,CAAOP,CAAP,CACjBM,MAAJ,CAAY3B,WAAA,CAAY8B,cAAZ,CAAZ,GAAyCD,QAAzC,CAAoDC,cAApD,CAFiD,CAKnD,MAAOD,SATT,CAlBA/B,QAAQiC,CAAAA,qBAAR,CAqCAA,QAA8B,CAACrB,UAAD,CAE5BE,IAF4B,CAM9B,CACE,GAAI,CAACA,IAAA,CAAKF,UAAL,CAAL,CACE,KAAUsB,MAAJ,CAAU,yDAAV,CAAsEtB,UAAtE,CAAmF,cAAnF,CAAN,CAGF,MAAOE,KAAA,CAAKF,UAAL,CALT,CA1CAZ,QAAQC,CAAAA,eAAR,CAA0BA,eAE1B,KAAIe,OAASlB,OAAA,CAAQ,mDAAR,CAX2G;",
"sources":["node_modules/react-grid-layout/build/responsiveUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_grid_layout$build$responsiveUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findOrGenerateResponsiveLayout = findOrGenerateResponsiveLayout;\nexports.getBreakpointFromWidth = getBreakpointFromWidth;\nexports.getColsFromBreakpoint = getColsFromBreakpoint;\nexports.sortBreakpoints = sortBreakpoints;\n\nvar _utils = require(\"./utils\");\n\n/**\n * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n *\n * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n * @param  {Number} width Screen width.\n * @return {String}       Highest breakpoint that is less than width.\n */\nfunction getBreakpointFromWidth(breakpoints\n/*: Breakpoints<Breakpoint>*/\n, width\n/*: number*/\n)\n/*: Breakpoint*/\n{\n  var sorted = sortBreakpoints(breakpoints);\n  var matching = sorted[0];\n\n  for (var i = 1, len = sorted.length; i < len; i++) {\n    var breakpointName = sorted[i];\n    if (width > breakpoints[breakpointName]) matching = breakpointName;\n  }\n\n  return matching;\n}\n/**\n * Given a breakpoint, get the # of cols set for it.\n * @param  {String} breakpoint Breakpoint name.\n * @param  {Object} cols       Map of breakpoints to cols.\n * @return {Number}            Number of cols.\n */\n\n\nfunction getColsFromBreakpoint(breakpoint\n/*: Breakpoint*/\n, cols\n/*: Breakpoints<Breakpoint>*/\n)\n/*: number*/\n{\n  if (!cols[breakpoint]) {\n    throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n  }\n\n  return cols[breakpoint];\n}\n/**\n * Given existing layouts and a new breakpoint, find or generate a new layout.\n *\n * This finds the layout above the new one and generates from it, if it exists.\n *\n * @param  {Object} layouts     Existing layouts.\n * @param  {Array} breakpoints All breakpoints.\n * @param  {String} breakpoint New breakpoint.\n * @param  {String} breakpoint Last breakpoint (for fallback).\n * @param  {Number} cols       Column count at new breakpoint.\n * @param  {Boolean} verticalCompact Whether or not to compact the layout\n *   vertically.\n * @return {Array}             New layout.\n */\n\n\nfunction findOrGenerateResponsiveLayout(layouts\n/*: ResponsiveLayout<Breakpoint>*/\n, breakpoints\n/*: Breakpoints<Breakpoint>*/\n, breakpoint\n/*: Breakpoint*/\n, lastBreakpoint\n/*: Breakpoint*/\n, cols\n/*: number*/\n, compactType\n/*: CompactType*/\n)\n/*: Layout*/\n{\n  // If it already exists, just return it.\n  if (layouts[breakpoint]) return (0, _utils.cloneLayout)(layouts[breakpoint]); // Find or generate the next layout\n\n  var layout = layouts[lastBreakpoint];\n  var breakpointsSorted = sortBreakpoints(breakpoints);\n  var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n\n  for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n    var b = breakpointsAbove[i];\n\n    if (layouts[b]) {\n      layout = layouts[b];\n      break;\n    }\n  }\n\n  layout = (0, _utils.cloneLayout)(layout || []); // clone layout so we don't modify existing items\n\n  return (0, _utils.compact)((0, _utils.correctBounds)(layout, {\n    cols: cols\n  }), compactType, cols);\n}\n/**\n * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n * e.g. ['xxs', 'xs', 'sm', ...]\n *\n * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n * @return {Array}              Sorted breakpoints.\n */\n\n\nfunction sortBreakpoints(breakpoints\n/*: Breakpoints<Breakpoint>*/\n)\n/*: Array<Breakpoint>*/\n{\n  var keys\n  /*: Array<string>*/\n  = Object.keys(breakpoints);\n  return keys.sort(function (a, b) {\n    return breakpoints[a] - breakpoints[b];\n  });\n}\n};"],
"names":["shadow$provide","global","require","module","exports","sortBreakpoints","breakpoints","Object","keys","sort","a","b","defineProperty","value","findOrGenerateResponsiveLayout","layouts","breakpoint","lastBreakpoint","cols","compactType","_utils","cloneLayout","layout","breakpointsSorted","breakpointsAbove","slice","indexOf","i","len","length","compact","correctBounds","getBreakpointFromWidth","width","sorted","matching","breakpointName","getColsFromBreakpoint","Error"]
}
