{"version":3,"sources":["modular/encoding/edn.cljc"],"mappings":";AAaA;;;sCAAA,tCAAMA,oFAEHC,EAAEC;AAFL,AAAA,kDAAA,sDAAA,FAGQD,wDAASC;;AAKjB,AAAKC,oCACH,AAACC,uGAAMC,mCACAC;AAQN,gCAAA,hCAAMC,wEAAUC;AAAhB,AACE,6DAAA,2CAAA,gGAAA,jMAACC,6JAA0BT,gGACAG,0CAAcK;;AAM3C,AAACE;AAaJ,wCAAA,xCAAMC,wFAAkBC;AAAxB,AACE,IAAAC,yCAAUE;IAAVD,yCAAA;AAAA,AAAA,oCAAAA,nCAAUC;;AAAV,IAAA,AACE,OAACC,wGAAOJ;UADV,AAAA,oCAAAC,nCAAUE;;AAGZ","names":["modular.encoding.edn/default-reader","t","v","modular.encoding.edn/data-readers","cljs.core.merge","modular.encoding.bidi/bidi-edn-tag","time-literals.read-write/tags","modular.encoding.edn/read-edn","s","cljs.reader.read_string","time-literals.read-write/print-time-literals-cljs!","modular.encoding.edn/pr-str-with-meta","data","*print-meta*-orig-val__58587","*print-meta*-temp-val__58588","cljs.core/*print-meta*","cljs.core.pr_str"],"sourcesContent":["(ns modular.encoding.edn\n  (:require\n   [modular.encoding.bidi :refer [bidi-edn-tag]]\n   [modular.encoding.time :as time]\n   #?(:clj  [time-literals.data-readers] ;; For literals\n      :cljs [time-literals.data-readers-cljs])\n   [time-literals.read-write] ;; For printing/writing\n   #?(:clj [clojure.edn :as edn]\n      :cljs [cljs.reader :as edn])))\n\n; com.widdindustries/time-literals\n; https://github.com/henryw374/time-literals/tree/master/src/time_literals\n\n(defn default-reader\n  \"A default reader, for when we don't know what's coming in.\"\n  [t v]\n  {:tag t :value v})\n\n; this would be an option too. \n#_(defrecord TaggedValue [tag value])\n\n(def data-readers\n  (merge bidi-edn-tag\n         time-literals.read-write/tags))\n\n#?(:clj\n   (defn read-edn [s]\n     (edn/read-string {:default default-reader\n                       :readers data-readers} s)))\n\n#?(:cljs\n   (defn read-edn [s]\n     (edn/read-string {:default default-reader\n                       :readers data-readers} s)))\n\n#?(:clj\n   (time-literals.read-write/print-time-literals-clj!))\n\n#?(:cljs\n   (time-literals.read-write/print-time-literals-cljs!))\n\n#?(:clj\n   (defn spit-edn [filename data]\n     (spit filename (pr-str data))))\n\n#?(:clj\n   (defn slurp-edn [filename]\n     (-> filename slurp read-edn)))\n\n; [clojure.tagged-literals]\n; (set! *default-data-reader-fn* tagged-literal)\n\n(defn pr-str-with-meta [data]\n  (binding [*print-meta* true]\n    (pr-str data)))\n\n(comment\n\n  (time-literals.read-write/print-time-literals-clj!)\n\n  (clojure.edn/read-string \"#inst \\\"1985-04-12T23:20:50.52Z\\\"\")\n  (clojure.edn/read-string  \"#time/date \\\"2021-11-04\\\"\")\n\n  (def x (read-str \"#time/date \\\"2011-01-01\\\"\"))\n  (def x (read-str \"#time/date-time \\\"2021-11-04T00:52:59.694154533\\\"\"))\n\n  x\n  (class x)\n\n  (pprint-str x)\n\n  (str x)\n  (pr-str x)\n  (type x)\n\n  (tagged-literal 'time/date (str x))\n\n;\n  )\n"],"x_google_ignoreList":[0]}