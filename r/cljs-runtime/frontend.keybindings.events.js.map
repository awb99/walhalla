{"version":3,"sources":["frontend/keybindings/events.cljs"],"mappings":"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","names":["frontend.keybindings.events/clean-search","frontend.keybindings.events/kb-from-config","db","or__5045__auto__","cljs.core.get_in","re_frame.core.reg_event_db","p__44965","vec__44969","cljs.core.nth","_","keybindings","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","frontend.keybindings.init/init-keybindings!","cljs.core/assoc-in","p__44977","vec__44978","re-frame.core/dispatch","frontend.keybindings.component/keybindings-dialog","re_frame.core.reg_sub","frontend.keybindings.events/make-regex","val","res","clojure.string.join","clojure.string.split","pattern","re","cljs.core/re-pattern","item","desc","match","cljs.core/re-find","p__45015","vec__45016","query","all","search-old","visible","cljs.core._EQ_","cljs.core.filter","cljs.core.merge","frontend.keybindings.events/highlight-move","direction","map__45032","cljs.core/--destructure-map","cljs.core.get","palette","highlight","visible-items","maxidx","cljs.core/count","highlight-new","G__45041","cljs.core/Keyword","js/Error","frontend.keybindings.events/highlight-action","map__45052","cljs.core/not-empty","p__45057","vec__45058","keycode","G__45061","p__45066","vec__45067","handler","frontend.notifications.core.add_notification"],"sourcesContent":["(ns frontend.keybindings.events\n  (:require\n   [clojure.string :as str]\n   [taoensso.timbre :refer-macros [debug debugf info error]]\n   [re-frame.core :refer [reg-event-db reg-sub dispatch]]\n   [frontend.notifications.core :refer [add-notification]]\n   [frontend.keybindings.init :refer [init-keybindings!]]\n   [frontend.keybindings.component :refer [keybindings-dialog]]))\n\n(def clean-search\n  {:highlight     0\n   :visible-items nil\n   :query        \"\"})\n\n(defn- kb-from-config [db]\n  (or (get-in db [:config :keybindings]) []))\n\n(reg-event-db\n :keybindings/init\n (fn [db [_]]\n   (let [db (or db {})\n         keybindings (kb-from-config db)]\n     (debug \"keybinding init ..\")\n     (init-keybindings! keybindings)\n     (assoc-in db\n               [:keybindings]\n               {:search clean-search}))))\n\n; dialog visibility\n\n(reg-event-db\n :palette/show\n (fn [db [_]]\n   (info \"showing keybindings dialog\")\n   (dispatch [:palette/filter-changed \"\"])\n   (dispatch [:modal/open [keybindings-dialog] :medium])\n   (assoc-in db [:keybindings :search] clean-search)))\n\n(reg-event-db\n :palette/hide\n (fn [db _]\n   (dispatch [:modal/close])\n   db))\n\n; palette\n\n(reg-sub\n :palette\n (fn [db _]\n   (get-in db [:keybindings :search])))\n\n(defn make-regex\n  [val]\n  (let [res (str/join \".*\" (str/split val \" \"))\n        pattern (str \"(?i)\" res \".*\") ; case insensitive\n        _ (error \"regex: \" pattern)\n        re (re-pattern pattern)]\n    (fn [item]\n      (let [desc (or (:desc item) \"\")\n            match (re-find re desc)] ; don't use re-match, it is mutating\n        match))))\n\n(reg-event-db\n :palette/filter-changed\n (fn [db [_ query]]\n   (let [all (kb-from-config db)\n         search-old (get-in db [:keybindings :search])\n         visible (if (or (nil? query) (= query \"\"))\n                   all\n                   (filter (make-regex query) all))]\n     (assoc-in db\n               [:keybindings :search]\n               (merge search-old {:visible-items visible\n                                  :query         query})))))\n\n(defn highlight-move [db direction]\n  (let [palette (get-in db [:keybindings :search])\n        {:keys [highlight visible-items]} palette\n        maxidx (- (count visible-items) 1)\n        highlight-new (case direction\n                        :up (if (> highlight 0)\n                              (- highlight 1)\n                              highlight)\n                        :down (if (< highlight maxidx)\n                                (+ highlight 1)\n                                highlight))]\n    (debug \"highlight: \" highlight-new)\n    (assoc-in db [:keybindings :search :highlight] highlight-new)))\n\n(defn highlight-action [db]\n  (let [palette (get-in db [:keybindings :search])\n        {:keys [highlight visible-items]} palette\n        _ (debugf \"action highlight: %s count: %s\" highlight (count visible-items))\n        item (when\n              (not-empty visible-items)\n               (nth visible-items highlight))]\n    (dispatch [:palette/action item])\n    db))\n\n(reg-event-db\n :palette/filter-keydown\n (fn [db [_ keycode]]\n   (case keycode\n     38 (highlight-move db :up)\n     40 (highlight-move db :down)\n     27 (do (dispatch [:palette/hide])\n            db)\n     13 (highlight-action db)\n     db)))\n\n(reg-event-db\n :palette/action\n (fn [db [_ item]]\n   (info \"palette/action!\" item)\n   (let [handler (:handler item)]\n     (if handler\n       (do (info \"dispatching\" handler)\n           (dispatch [:palette/hide]) ; if dispatch opens another dialog we first have to hide it\n           (dispatch handler))\n       (do\n         (error \"handler not found!\")\n         (add-notification :danger \"keybining didn't have a handler!\")\n         (dispatch [:palette/hide])))\n     db)))\n\n"],"x_google_ignoreList":[0]}