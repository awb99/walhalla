{"version":3,"sources":["modular/oauth2/authorize/redirect.cljs"],"mappings":";AAcA,AAAKA,uCAAG,KAAAC,iBAAA;AAER,+CAAA,/CAAMC,sGAAYC;AAAlB,AACE,oDAAA,7CAACC,gFACK,iBAAAC,qBAAA,qEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA07E2C,AAAA6C,sBAAAlD;IA17E3CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;QAAA,AAAAG,4CAAAF,WAAA,IAAA,/DAAOY;QAAP,AAAAV,4CAAAF,WAAA,IAAA,/DAASa;AAAT,AAAA,AAAA,AAAAV,uBAAAN,SAAA,mFACG,AAACiB,gDAAQF,GAAGC;;AADf,eAAA,CAAAd,WAAA;;;;AAAA;;;;;AAAA,OAAAK,qBAAA,AAAAC,gBAAAR,UAAA,AAAAS,2DAAA,AAAAC,qBAAAlB;;AAAA,OAAAe,qBAAA,AAAAC,gBAAAR,UAAA;;;AAAA,IAAAW,aAAA,AAAAC,gBAAApB;QAAA,AAAAa,4CAAAM,WAAA,IAAA,/DAAOI;QAAP,AAAAV,4CAAAM,WAAA,IAAA,/DAASK;AAAT,AAAA,OAAAH,eAAA,gJAAA,AAAAJ,2DAAA,AAAAK,eAAAtB,vIACG,AAACyB,gDAAQF,GAAGC;;;AADf;;;;GAAA,KAAA;;AAAA,AAAA,OAAAzB,mBAAYF;;;AAGpB,6CAAA,7CAAM6B,kGAAUC;AAAhB,AACE,IAAMC,MAAI,AAACC,+CAAQF;AAAnB,AAAA,kDAAA,8IAAA,rFACW,AAAC/B,6CAAW,AAACkC,2BAAe,AAASF,qEACtC,AAAChC,6CAAW,AAAQgC;;AAEhC,sDAAA,tDAAMG,oHAAmBC;AAAzB,AACE,QAAM,AAAItC,iDACJ,WAAKuC;AAAL,AACE,IAAMC,OAAK,AAAGD;IACRE,OAAK,AAACC,mDAAQ,AAAQC,WAAQH;IAC9BP,OAAK,iDAAA,jDAACW,4CAAIH;IACVI,WAAS,iDAAA,jDAACD,4CAAIH;IACdK,SAAO,wJAAA,2CAAA,nMAACC,uGAAO,AAACf,2CAASC,8GAAiB,AAACF,gDAAQc;AAJzD,AAKE,AAAAG,0DAAAC,mCAAA,qDAAA,oCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,+BAAA,LAAgCV,cAAeC;GAA/C,OAAA,KAAA,KAAA;;AACA,AAAAO,0DAAAC,mCAAA,qDAAA,oCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,kBAAwBJ;GAAxB,OAAA,KAAA,KAAA;;AACA,QAACR,mCAAAA,2CAAAA,VAAGQ,uBAAAA;;;AAOhB,+CAAA,/CAAMK;AAAN,AACE,OAAA,AAAIC;;AAEN,iDAAA,jDAAeC,0GAAcR;AAA7B,AACE,IAAMZ,OAAK,AAACkB;IACNG,MAAI,eAAA,fAAYX,6BAAuBE,iBAAcZ;AAD3D,AAEE,yGAAA,zGAACsB,6HAA4BD;;AAC7B,OAActD,iDAAGsD","names":["modular.oauth2.authorize.redirect/bc","js/BroadcastChannel","modular.oauth2.authorize.redirect/keywordize","my-map","cljs.core.into","iter__5523__auto__","s__39881","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__39887","cljs.core/chunk-buffer","i__39886","vec__39894","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39880","cljs.core/chunk-rest","vec__39897","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","cljs.core.keyword","modular.oauth2.authorize.redirect/url-data","wurl","url","cemerick.url.url","cemerick.url/query->map","modular.oauth2.authorize.redirect/register-callback","cb","ev","json","data","cljs.core.js__GT_clj","js/JSON","cljs.core.get","provider","cbdata","cljs.core.merge","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","modular.oauth2.authorize.redirect/window-url","js/window","modular.oauth2.authorize.redirect/sendcallback","str","cljs.core.println","cljs.core/chunk-first"],"sourcesContent":["(ns modular.oauth2.authorize.redirect\n  (:require\n   [taoensso.timbre :refer-macros [info error]]\n   [cemerick.url :as url]))\n\n#_(defn message-event-handler\n    [e]\n    (info \"message received: \" e)\n    (dispatch [:remote-oauth (.. e -data -code) (.. e -data -state)]))\n;(js/window.addEventListener \"message\" message-event-handler)\n\n; https://stackoverflow.com/questions/28230845/communication-between-tabs-or-windows\n; https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\n\n(def bc (js/BroadcastChannel. \"webly_oauth2_redirect_channel\"))\n\n(defn keywordize [my-map]\n  (into {}\n        (for [[k v] my-map]\n          [(keyword k) v])))\n\n(defn url-data [wurl]\n  (let [url (url/url wurl)]\n    {:anchor (keywordize (url/query->map (:anchor url)))\n     :query (keywordize (:query url))}))\n\n(defn register-callback [cb]\n  (set! (.. bc -onmessage)\n        (fn [ev]\n          (let [json (. ev -data)\n                data (js->clj (.parse js/JSON json))\n                wurl (get data \"url\")\n                provider (get data \"provider\")\n                cbdata (merge  (url-data wurl) {:provider (keyword provider)})]\n            (info \"oauth chan rcvd: json: \" json  \"data: \" data)\n            (info \"oauth cb data: \" cbdata)\n            (cb cbdata)))))\n\n;; to be used from redirect window.\n;; this is not used in production, as it would require the full bundle to be\n;; loaded in the redirect window.\n;; we load a javascript file, that does the same thing.\n\n(defn window-url []\n  (.. js/window -location -href))\n\n(defn ^:export sendcallback [provider]\n  (let [wurl (window-url)\n        str (.stringify js/JSON #js {:provider provider :url wurl})]\n    (println \"sending message: \" str)\n    (.postMessage bc str)))\n\n\n\n"],"x_google_ignoreList":[0]}