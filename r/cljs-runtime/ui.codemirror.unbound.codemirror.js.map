{"version":3,"sources":["ui/codemirror/unbound/codemirror.cljs"],"mappings":";;;;;;;;;AAuBA,iDAAA,jDAAMA,0GAAeC,GAAGC,GAAGC;AAA3B,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,mCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,8BAAoCL;GAApC,OAAA,KAAA,KAAA;;AACA,AAACM;;AAED,IAAMC,KAAG,AAAeC,2DAAWP,GAAGC;AAAtC,AACE,AAACO,mDAAMC,0CAAmBC,gBAAMX,GAAGO;;AACnCA;;AAEJ,kDAAA,lDAAMK,4GAAgBZ;AAAtB,AACE,AAAAG,0DAAAC,mCAAA,qDAAA,mCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,gCAAsCL;GAAtC,OAAA,KAAA,KAAA;;AACA,IAAAa,qBAAY,AAACC,kCAAWd;AAAxB,AAAA,oBAAAa;AAAA,SAAAA,LAASN;AAAT,AACE,AAAI,AAAaA;;AACb,OAACE,mDAAMC,0CAAmBK,iBAAOf;;AACrC,OAAAG,0DAAAC,mCAAA,uDAAA,mCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,0CAAiDL;GAAjD,OAAA,KAAA,KAAA;;;AAEJ,sDAAA,tDAAMgB,oHACHhB,GAAGiB;AADN,AAEE,IAAMA,cAAQ,iBAAAC,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAA;;;IACRC,OAAM,AAACC,uGACAC,8CACAJ;AAHb,AAME,+DAAA,2CAAA,nGAACK,uLAEC,WAAKC;AAAL,AACE,IAAMtB,KAAG,AAACuB,qBAAYD;IAChBrB,UAAQ,AAACuB,qBAAQN;AADvB,AAEE,OAACpB,+CAAcC,GAAGC,GAAGC;GAL3B,0FAQE,WAAKqB;AAAL,AACE,AAAApB,0DAAAC,mCAAA,wDAAA,mCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,KAAA;;AACA,AAAAF,0DAAAC,mCAAA,qDAAA,mCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,SAAekB;GAAf,OAAA,KAAA,KAAA;;AACA,OAACX,gDAAeZ;GAXpB,sFAcE,WAAKuB,MAAKG;AAAV,AACE,IAAAC,aAAkB,AAACG,kBAAOP;QAA1B,AAAAK,4CAAAD,WAAA,IAAA,/DAAOE;aAAP,AAAAD,4CAAAD,WAAA,IAAA,pEAAS3B;eAAT,AAAA4B,4CAAAD,WAAA,IAAA,tEAAYR;AAAZ,AACE,OAAAhB,0DAAAC,mCAAA,qDAAA,mCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,mCAAA,PAAkCL,gBAAYmB;GAA9C,OAAA,KAAA,KAAA;GAhBN,yEA0BE;AAAA,AACE,IAAAY,aAAyBZ;IAAzBY,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAAcG;AAAd,AACE,oBAAIA;AAAJ,0FAAA,6DAAA,2CAAA,+DAAA;;AAAA,0FAAA","names":["ui.codemirror.unbound.codemirror/create-editor","id","el","opts-js","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui.codemirror.unbound.options/ensure-initialized","cm","js/module$node_modules$codemirror$lib$codemirror","cljs.core.swap_BANG_","ui.codemirror.registry/active-editor-atom","cljs.core/assoc","ui.codemirror.unbound.codemirror/destroy-editor","temp__5802__auto__","ui.codemirror.registry/get-editor","cljs.core/dissoc","ui.codemirror.unbound.codemirror/codemirror-unbound","cm-opts","or__5045__auto__","opts","cljs.core.merge","ui.codemirror.unbound.options/cm-default-opts","reagent.core.create_class","this","reagent.dom/dom-node","cljs.core/clj->js","old-argv","vec__54609","cljs.core.nth","_","reagent.core/argv","map__54612","cljs.core/--destructure-map","cljs.core.get","readOnly"],"sourcesContent":["(ns ui.codemirror.unbound.codemirror\n  (:require\n   [taoensso.timbre :refer-macros [debug debugf info infof warn error]]\n   [reagent.core :as r]\n   [reagent.dom :as rd]\n   [\"codemirror\" :as CodeMirror]\n   [\"codemirror/addon/edit/closebrackets\"]\n   [\"codemirror/addon/edit/matchbrackets\"]\n   [\"codemirror/addon/hint/show-hint\"]\n   [\"codemirror/addon/runmode/runmode\"]\n   [\"codemirror/addon/runmode/colorize\"]\n   [\"codemirror/mode/clojure/clojure\"]\n   [\"codemirror/mode/markdown/markdown\"]\n   ; [cljsjs.codemirror.mode.xml]\n   ; [cljsjs.codemirror.mode.javascript]\n   ; [\"parinfer-codemirror\"]\n   ; [cljsjs.codemirror.mode.clojure-parinfer]\n   ;[\"codemirror/keymap/vim\"]\n   [ui.codemirror.highlight]\n   [ui.codemirror.unbound.options :refer [cm-default-opts ensure-initialized]]\n   [ui.codemirror.unbound.theme]\n   [ui.codemirror.registry :refer [active-editor-atom get-editor]]))\n\n(defn create-editor [id el opts-js]\n  (info \"creating codemirror-js id: \" id)\n  (ensure-initialized)\n  ;cm_ (CodeMirror. el opts-js)\n  (let [cm (.fromTextArea CodeMirror el opts-js)]\n    (swap! active-editor-atom assoc id cm)\n    cm))\n\n(defn destroy-editor [id]\n  (info \"destroying codemirror-js id: \" id)\n  (if-let [cm (get-editor id)]\n    (do (.toTextArea cm)\n        (swap! active-editor-atom dissoc id))\n    (error \"Could not kill CodeMirror instance id: \" id)))\n\n(defn codemirror-unbound\n  [id cm-opts]\n  (let [cm-opts (or cm-opts {})\n        opts  (merge\n               cm-default-opts\n               cm-opts)\n        ;_ (warn \"opts: \" opts)\n        ]\n    (r/create-class\n     {:component-did-mount\n      (fn [this]\n        (let [el (rd/dom-node this)\n              opts-js (clj->js opts)]\n          (create-editor id el opts-js)))\n\n      :component-will-unmount\n      (fn [this]\n        (debug \"cm component-will-unmount\")\n        (warn \"this: \" this)\n        (destroy-editor id))\n\n      :component-did-update\n      (fn [this old-argv]\n        (let [[_ id opts] (r/argv this)]\n          (info \"component-did-update: id \" id \"opts: \" opts)\n          ;(when-let [cm (get-editor id)]\n            ;(editor-load-content cm (get-data id))\n            ;(blur-inactive id opts cm)\n            ;(focus-active id opts cm)\n          ;  )\n          ;\n          ))\n\n      :reagent-render\n      (fn []\n        (let [{:keys [readOnly]} opts]\n          (if readOnly\n            [:textarea {:read-only true}]\n            [:textarea])))})))\n\n\n\n"],"x_google_ignoreList":[0]}