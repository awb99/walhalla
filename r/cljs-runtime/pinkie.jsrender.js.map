{"version":3,"sources":["pinkie/jsrender.cljs"],"mappings":";AAWA,uBAAA,vBAAMA,sDAAMC;AAAZ,AACE,OAAMC,YAAWD;;AAEnB,uCAAA,+CAAAE,tFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAC2BO;QAD3B,AAAAL,4CAAAF,eAAA,/DACWI;WADX,AAAAF,4CAAAF,eAAA,lEACaK;UADb,AAAAH,4CAAAF,eAAA,jEACkBM;AADlB,AAEE,IAAME,OAAK,AAACC,iCAAiB,AAACC;AAA9B,AAEE,+DAAA,2CAAA,oEAAA,uBAAA,9LAACC,uQAEiB,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAZ,4BAAAY;eAAAA,XAA6BN;YAA7B,AAAAL,4CAAAW,eAAA,nEAAaT;eAAb,AAAAF,4CAAAW,eAAA,tEAAeR;cAAf,AAAAH,4CAAAW,eAAA,rEAAoBP;AAApB,AAAA,0FAAA,gJACY,AAACQ,uBAAYP,rEACb,+EAAA,/EAACQ,iIAAUP,hLACX,sLAAA,tLAACQ;GAL/B,oFAMuB,WAAKC;AAAL,AAGE,IAAAC,WAAG,AAACE,qBAAqBH;IAAzBE,WAA+Bd;AAA/B,AAAA,0EAAAa,SAAAC,wBAAAD,SAAAC,5GAACf,kCAAAA,qDAAAA;GAT1B,sFAUwB,WAAKa,MAAKI;AAAV,AACE,IAAMI,WAAS,AAACC,eAAK,AAACC,kBAAaV;IAAnCK,aACaG;WADb,AAAAF,4CAAAD,WAAA,IAAA,lEACOM;IADPJ,aAEuBI;IAFvBJ,iBAAA,AAAAvB,4BAAAuB;YAAA,AAAAtB,4CAAAsB,eAAA,nEAEcpB;eAFd,AAAAF,4CAAAsB,eAAA,tEAEgBnB;AAFhB,AAIE,IAAAwB,WAAG,AAACT,qBAAqBH;IAAzBa,WAA+BzB;AAA/B,AAAA,kFAAAwB,SAAAC,4BAAAD,SAAAC,xHAAC1B,sCAAAA,yDAAAA;;;AASjC,6BAAA,7BAAM2B,kEAAYxB;AAAlB,AAAA,sHAAA,5BACGyB,+GACC7B,qCAAqBI;;AAEzB;;;;;;;;;4BAAA,oCAAA0B,hEACEE;AADF,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAjC,4BAAAiC;WAAAA,PASqB3B;WATrB,AAAAL,4CAAAgC,eAAA,lEASW7B;AATX,AAAA,0FAUG0B,2BAAW,mDAAA,nDAAChB,8CAAMR,0DAAW,AAAC6B,qBAAQ/B","names":["pinkie.jsrender/info","s","js/console","p__49187","map__49188","cljs.core/--destructure-map","cljs.core.get","pinkie.jsrender/render-function-impl","f","data","box","spec","uuid","cljs-uuid-utils.core/uuid-string","cljs-uuid-utils.core/make-random-uuid","reagent.core.create_class","p__49189","map__49190","pinkie.box/apply-style","cljs.core.assoc","cljs.core.dissoc","this","G__49192","G__49193","reagent.dom/dom-node","old-argv","vec__49194","cljs.core.nth","map__49197","new-argv","cljs.core/rest","reagent.core/argv","arg1","G__49198","G__49199","pinkie.jsrender/render-clj","pinkie.error/error-boundary","p__49202","map__49204","pinkie.jsrender/render-js","cljs.core/clj->js"],"sourcesContent":["(ns pinkie.jsrender\n  \"jsrender is part of a jsrequire based module system to render data via javascipt inside\n   reagent components. Typically custom ui renderers would use it:\n   [jsrender custom-module data]\"\n  (:require\n   [reagent.core :as reagent]\n   [reagent.dom]\n   [cljs-uuid-utils.core :as uuid]\n   [pinkie.error :refer [error-boundary]]\n   [pinkie.box :refer [container-style apply-style]]))\n\n(defn info [s]\n  (.log js/console s))\n\n(defn render-function-impl\n  [{:keys [f data box] :as spec}]\n  (let [uuid (uuid/uuid-string (uuid/make-random-uuid))]\n    ; https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md\n    (reagent/create-class\n     {:display-name \"render-function-impl\"\n      :reagent-render (fn [{:keys [f data box] :as spec}] ;; remember to repeat parameters\n                        [:div (-> (apply-style spec)\n                                  (assoc :id uuid)\n                                  (dissoc :f))])\n      :component-did-mount (fn [this] ; oldprops oldstate snapshot\n                             ;(println \"c-d-m: \" this)\n                             ;(info (str \"jsrender init data: \" data))\n                             (f (reagent.dom/dom-node this) data))\n      :component-did-update (fn [this old-argv]\n                              (let [new-argv (rest (reagent/argv this))\n                                    [arg1] new-argv\n                                    {:keys [f data]} arg1]\n                                ;(println \"component did update: \" this \"argv: \" new-argv)\n                                (f (reagent.dom/dom-node this) data)))\n\n      ; 2021 04 awb99: component-will-update is depeciated \n      ;:component-will-update (fn [this [_ {:keys [f data]}]]\n      ;        ; with changing of parameters, re-render the component. (important for vega charts)\n      ;                         (info (str \"jsrender new params: \" data))\n      ;                         (f (reagent.dom/dom-node this) data))\n      })))\n\n(defn render-clj [spec]\n  [error-boundary\n   [render-function-impl spec]])\n\n(defn ^{:category :pinkie}\n  render-js\n  \"reagent component that renders a js function,\n       calls \n       parameters:\n         f    the js render function\n              gets js data\n         data a clojure datastructure that will be converted to js\n              before calling f\"\n  [{:keys [data] :as spec}]\n  [render-clj (assoc spec :data (clj->js data))])\n\n\n\n"],"x_google_ignoreList":[0]}