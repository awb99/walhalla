{"version":3,"sources":["modular/oauth2/provider/google.cljc"],"mappings":";AAgBA,+DAAA,uEAAAA,tIAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAA6CI;AAA7C,AAME,IAAAC,aAA2CD;IAA3CC,iBAAA,AAAAJ,4BAAAI;YAAA,AAAAH,4CAAAG,eAAA,nEAAcC;WAAd,AAAAJ,4CAAAG,eAAA,lEAAoBE;aAApB,AAAAL,4CAAAG,eAAA,pEAAyBG;eAAzB,AAAAN,4CAAAG,eAAA,tEAAgCI;AAAhC,AAAA,kDAAA,6DAAA,NACUH,2DACDC;;AAEX,4CAAA,5CAAMG,gGAAYC;AAAlB,AAAA,kDAAA,2IAAA,tFACS,AAAA,gFAAKA,6DACJ,AAAA,qFAAQA;;AAElB,yDAAA,zDAAMC,0HAAyBC;AAA/B,AAAA,kDAAA,gBACmB,CAAA,sDAAeA;;AAOlC,wCAAA,wCAAA,kEAAA,6DAAA,2EAAA,4FAAA,qDAAA,uEAAA,8DAAA,kEAAA,qDAAA,wFAAA,kJAAA,6CAAA,kEAAA,qBAAA,+CAAA,2CAAA,4DAAA,kGAAA,gDAAA,WAAA,2CAAA,uEAAA,OAAA,mEAAA,pgDAAKC,m8BAOwBX,zGAQbS,yYAIDF;AAIf,AAAAK,oFAAA,wDAAA,WAAoCC;AAApC,AACEF","names":["p__39854","map__39858","cljs.core/--destructure-map","cljs.core.get","modular.oauth2.provider.google/parse-authorize-code-response","query","map__39859","scope","code","prompt","authuser","modular.oauth2.provider.google/user-parse","data","modular.oauth2.provider.google/api-request-auth-header","token","modular.oauth2.provider.google/config","modular.oauth2.protocol/provider-config","_"],"sourcesContent":["(ns modular.oauth2.provider.google\n  (:require\n   [modular.oauth2.protocol :refer [provider-config]]))\n\n#_(defn parse-authorize-token-response [{:keys [anchor]}]\n    ; #access_token=ya29.a0ARrdaM9mY4gaGPSU_5pMhS7x3wsgrPhDWhGy0fQVIwlsz7soPBlLVnAAEYQWl9SudGnfmapQ_2dq1oa6jS-SlJlR59cniSm1TAFkrK2KEqmBnvJHNI-mux6GDFtuVh-st5eysR97Z3xHSfjkxhsf9QknOZLv\n    ;  &token_type=Bearer\n    ;  &expires_in=3599\n    ;  &scope=email%20https://www.googleapis.com/auth/calendar%20https://www.googleapis.com/auth/drive.metadata%20https://www.googleapis.com/auth/docs%20https://www.googleapis.com/auth/drive%20https://www.googleapis.com/auth/drive.appdata%20openid%20https://www.googleapis.com/auth/drive.file%20https://www.googleapis.com/auth/cloud-platform%20https://www.googleapis.com/auth/drive.metadata.readonly%20https://www.googleapis.com/auth/spreadsheets.readonly%20https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/drive.readonly%20https://www.googleapis.com/auth/spreadsheets%20https://www.googleapis.com/auth/gmail.readonly%20https://www.googleapis.com/auth/drive.photos.readonly&authuser=0&prompt=none\n    (let [{:keys [access_token scope expires_in token_type]} anchor]\n      {:access-token access_token\n       :scope scope\n       :expires #?(:cljs (js/parseInt expires_in)\n                   :clj (:expires_in anchor))\n       :type token_type}))\n\n(defn parse-authorize-code-response [{:keys [query]}]\n  ;# :query {:scope \"email+https://www.googleapis.com/auth/drive.metadata.readonly+https://www.googleapis.com/auth/drive.appdata+openid+https://www.googleapis.com/auth/drive.file+https://www.googleapis.com/auth/drive.metadata+https://www.googleapis.com/auth/drive+https://www.googleapis.com/auth/userinfo.email+https://www.googleapis.com/auth/drive.readonly+https://www.googleapis.com/auth/gmail.readonly+https://www.googleapis.com/auth/drive.photos.readonly+https://www.googleapis.com/auth/spreadsheets+https://www.googleapis.com/auth/cloud_search+https://www.googleapis.com/auth/spreadsheets.readonly+https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/cloud-platform+https://www.googleapis.com/auth/docs\", \n;            :prompt \"none\", \n;            :authuser \"0\", \n;            :code \"4/0AX4XfWh8wjf3vIem2f-1VTW5zMdppmmY3DSex9vVfsSANTmf2kDqtyBs049qTlXc0f54XQ\"}, \n; :provider :google}\n  (let [{:keys [scope code prompt authuser]} query]\n    {:scope scope\n     :code code}))\n\n(defn user-parse [data]\n  {:user (:id data)\n   :email (:email data)})\n\n(defn api-request-auth-header [token]\n  {\"Authorization\" (str \"Bearer \" token)})\n\n; https://oauth2.example.com/code?state=security_token%3D138r5719ru3e1%26url%3Dhttps%3A%2F%2Foa2cb.example.com%2FmyHome&code=4/\n; https://developers.google.com/identity/protocols/oauth2/openid-connect#createxsrftoken\n; https://developers.google.com/identity/protocols/oauth2#5.-refresh-the-access-token,-if-necessary.\n; https://developers.google.com/accounts/docs/OAuth2WebServer\n\n(def config\n  {; authorize\n   :authorize-uri \"https://accounts.google.com/o/oauth2/v2/auth\"\n   :authorize-query-params {:response_type \"code\" ; \"token\" ; \n                            :access_type \"offline\"; the client does not receive a refresh token unless a value of offline is specified. (online or offline\n                            }\n   :authorize-nonce true\n   :parse-authorize-response parse-authorize-code-response\n\n    ; access token\n   :token-uri \"https://www.googleapis.com/oauth2/v4/token\"\n   ;\"https://accounts.google.com/o/oauth2/v2/access_token\"\n   :accessTokenResponseKey \"id_token\"\n\n   ; api requests\n   :auth-header api-request-auth-header\n   :endpoints {:userinfo \"https://www.googleapis.com/oauth2/v2/userinfo\"}\n; userinfo\n   :user \"https://www.googleapis.com/oauth2/v2/userinfo\"\n   :user-parse user-parse\n\n   :icon \"fab fa-google-plus\"})\n\n(defmethod provider-config :google [_]\n  config)\n\n; Google refresh token -> access token. \n;refresh_token: <REFRESH_TOKEN_FOR_THE_USER>\n;grant_type: refresh_token\n\n;In order to get an access token with a refresh token, you just need to ask for the offline \n; access\n; type (for example in PHP: $client->setAccessType(\"offline\");) and you will get it.\n; Just keep in mind you will get the access token with the refresh token only in \n; the first authorization, so make sure to save that access token in the first time\n; , and you will be able to use it anytime.\n\n; Token query \n; Grant type,: authorization_code\n; Code \n\n; refresh_token\n; (Optional)\n; Dieses Feld ist nur vorhanden, wenn der Parameter \n ; access_type in der Authentifizierungsanforderung \n;   auf offline wurde. Weitere Informationen finden Sie unter Aktualisieren von Token .\n"],"x_google_ignoreList":[0]}