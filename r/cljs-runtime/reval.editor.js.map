{"version":3,"sources":["reval/editor.cljc"],"mappings":"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","names":["reval.editor/reader-tag?","node","rewrite-clj.node.reader-macro/ReaderMacroNode","rewrite-clj.node.fn/FnNode","rewrite-clj.node.quote/QuoteNode","rewrite-clj.node.reader-macro/DerefNode","p__54480","p__54481","map__54482","cljs.core/--destructure-map","cljs.core.get","map__54483","reval.editor/in-range?","row","col","end-row","end-col","r","c","and__5043__auto__","cljs.core._EQ_","reval.editor/find-inners-by-pos","zloc","pos","cljs.core/iterate","rewrite-clj.zip/next","cljs.core.take_while","cljs.core/identity","cljs.core/complement","rewrite-clj.zip.move/end?","p1__54486#","cljs.core.filter","rewrite-clj.zip/node","cljs.core/meta","reval.editor/filter-forms","nodes","valid-tag?","cljs.core.comp","cljs.core.map","cljs.core.partition_all","p__54497","vec__54498","cljs.core.nth","fst","snd","cljs.core/first","reval.editor/zip-from-code","code","reader","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.core.repeatedly","e54503","rewrite-clj.parser/parse","_","cljs.tools.reader.reader-types/read-char","rewrite-clj.node/whitespace-node","cljs.core.doall","all-nodes","cljs.core/with-meta","rewrite-clj.node/forms-node","rewrite-clj.zip.base/edn","p__54504","vec__54505","reval.editor/block-for","map__54509","node-block","cljs.core/reverse","G__54510","rewrite-clj.node/string"],"sourcesContent":["(ns reval.editor\n  (:require [clojure.string :as str]\n            ; [cljs.reader :as edn]\n            [clojure.tools.reader :as reader]\n            [rewrite-clj.zip.move :as move]\n            [rewrite-clj.zip :as zip]\n            [rewrite-clj.zip.base :as zip-base]\n            [rewrite-clj.node :as node]\n            [clojure.tools.reader.reader-types :as r]\n            [rewrite-clj.parser :as parser]\n\n            #?(:cljs [rewrite-clj.node.uneval :refer [UnevalNode]])\n            #?(:cljs [rewrite-clj.node.reader-macro :refer [ReaderMacroNode DerefNode]])\n            #?(:cljs [rewrite-clj.node.fn :refer [FnNode]])\n            #?(:cljs [rewrite-clj.node.quote :refer [QuoteNode]])\n            ;#?(:cljs [\"fs\" :refer [readFileSync]])\n            )\n  #?(:clj (:import [rewrite_clj.node.uneval UnevalNode]\n                   [rewrite_clj.node.reader_macro ReaderMacroNode DerefNode]\n                   [rewrite_clj.node.fn FnNode]\n                   [rewrite_clj.node.quote QuoteNode])))\n\n; stolen from:\n;https://github.com/mauricioszabo/duck-repled/blob/master/src/duck_repled/editor_helpers.cljc\n\n; paredit-backward\n; https://github.com/clj-commons/rewrite-clj/blob/main/src/rewrite_clj/zip/move.cljc\n; https://github.com/clj-commons/rewrite-clj/blob/main/src/rewrite_clj/zip/base.cljc\n\n(defn- reader-tag? [node]\n  (when node\n    (or (instance? ReaderMacroNode node)\n        (instance? FnNode node)\n        (instance? QuoteNode node)\n        (instance? DerefNode node))))\n\n(defn in-range? [{:keys [row col end-row end-col]} {r :row c :col}]\n  (and (>= r row)\n       (<= r end-row)\n       (if (= r row) (>= c col) true)\n       (if (= r end-row) (<= c end-col) true)))\n\n(defn- find-inners-by-pos\n  \"Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.\"\n  [zloc pos]\n  (->> zloc\n       (iterate zip/next)\n       (take-while identity)\n       (take-while (complement move/end?))\n       (filter #(in-range? (-> % zip/node meta) pos))))\n\n(defn- filter-forms [nodes]\n  (when nodes\n    (let [valid-tag? (comp #{:vector :list :map :set :quote} :tag)]\n      (->> nodes\n           (map zip/node)\n           (partition-all 2 1)\n           (map (fn [[fst snd]]\n                  (cond\n                    (reader-tag? fst) fst\n                    (-> fst :tag (= :list) (and snd (reader-tag? snd))) snd\n                    (valid-tag? fst) fst)))\n           (filter identity)\n           first))))\n\n(defn- zip-from-code [code]\n  (let [reader (r/indexing-push-back-reader code)\n        nodes (->> (repeatedly #(try\n                                  (parser/parse reader)\n                                  (catch #?(:clj Throwable :cljs :default) _\n                                    (r/read-char reader)\n                                    (node/whitespace-node \" \"))))\n                   (take-while identity)\n                   (doall))\n        all-nodes (with-meta\n                    (node/forms-node nodes)\n                    (meta (first nodes)))]\n    (-> all-nodes (zip-base/edn {:track-position? true}))))\n\n(defn block-for\n  \"Gets the current block from the code (a string) to the current row and col (0-based)\"\n  [code [row col]]\n  (let [node-block (-> code\n                       zip-from-code\n                       (find-inners-by-pos {:row (inc row) :col (inc col)})\n                       reverse\n                       filter-forms)\n        {:keys [row col end-row end-col]} (some-> node-block meta)]\n    (when node-block\n      [[[(dec row) (dec col)] [(dec end-row) (- end-col 2)]]\n       (node/string node-block)])))\n\n(comment\n  (block-for \"(+ 3 1)\\n(* 3 4 5 \\n   6 7)\\n(println 55)\" [1 5])\n;\n  )\n"],"x_google_ignoreList":[0]}