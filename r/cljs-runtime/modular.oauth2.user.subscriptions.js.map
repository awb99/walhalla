{"version":3,"sources":["modular/oauth2/user/subscriptions.cljs"],"mappings":";AAIA,2DAAA,3DAACA,gLAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;AAAT,AACE,yDAAA,mFAAA,rIAACC,+CAAOF;;AAEX,iDAAA,jDAAMG,0GAAQC;AAAd,AACE,IAAAC,aAA6BD;IAA7BC,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAAcG;AAAd,AACE,oBAAIA;AAAJ;;AAAA;;;AAEJ,2DAAA,3DAACZ,0LAEA,cAAAa,HAAKT;AAAL,AAAA,IAAAU,aAAAD;QAAA,AAAAV,4CAAAW,WAAA,IAAA,/DAAST;cAAT,AAAAF,4CAAAW,WAAA,IAAA,rEAAWC;AAAX,AACE,IAAAC,qBAAe,kDAAA,mFAAA,rIAACV,+CAAOF,8IAAWW;AAAlC,AAAA,oBAAAC;AAAA,YAAAA,RAASR;AAAT,AAEE,OAACD,+CAAOC;;AAFV;;;AAKH,2DAAA,3DAACR,kNAEA,cAAAiB,HAAKb;AAAL,AAAA,IAAAc,aAAAD;QAAA,AAAAd,4CAAAe,WAAA,IAAA,/DAASb;cAAT,AAAAF,4CAAAe,WAAA,IAAA,rEAAWH;AAAX,AACE,IAAMI,QAAM,kDAAA,mFAAA,gEAAA,rMAACb,+CAAOF,8IAAWW;IACzBK,OAAK,kDAAA,mFAAA,gEAAA,rMAACd,+CAAOF,8IAAWW;IACxBM,KAAG,iBAAAC,mBAAIH;AAAJ,AAAA,oBAAAG;AAAAA;;AAAUF;;;AAFnB,AAGE,oBAAIC;AACFA;;AADF;;;AAIL,2DAAA,3DAACrB,8KAEA,cAAAuB,HAAKnB;AAAL,AAAA,IAAAoB,aAAAD;QAAA,AAAApB,4CAAAqB,WAAA,IAAA,/DAASnB;AAAT,AACE,IAAMe,OAAK,kDAAA,mFAAA,qDAAA,1LAACd,+CAAOF;AAAnB,AACEgB","names":["re_frame.core.reg_sub","p__39840","vec__39842","cljs.core.nth","db","_","cljs.core.get_in","modular.oauth2.user.subscriptions/token?","token","map__39846","cljs.core/--destructure-map","cljs.core.get","access-token","p__39847","vec__39848","service","temp__5802__auto__","p__39857","vec__39859","email","user","eu","or__5045__auto__","p__39870","vec__39871"],"sourcesContent":["(ns modular.oauth2.user.subscriptions\n  (:require\n   [re-frame.core :as rf]))\n\n(rf/reg-sub\n :oauth2/tokens\n (fn [db [_]]\n   (get-in db [:token])))\n\n(defn token? [token]\n  (let [{:keys [access-token]} token]\n    (if access-token true false)))   ;      (some? token)\n\n(rf/reg-sub\n :oauth2/logged-in?\n (fn [db [_ service]]\n   (if-let [token (get-in db [:token service])]\n     ;(token-expired? token)\n     (token? token)\n     false)))\n\n(rf/reg-sub\n :oauth2/logged-in-email-or-user\n (fn [db [_ service]]\n   (let [email (get-in db [:token service :email])\n         user (get-in db [:token service :user])\n         eu (or email user)]\n     (if eu\n       eu\n       \"unknown email\"))))\n\n(rf/reg-sub\n :oauth2/user\n (fn [db [_]]\n   (let [user (get-in db [:user :user])]\n     user)))\n\n"],"x_google_ignoreList":[0]}