{"version":3,"sources":["frontend/css/loading.cljs"],"mappings":";AAKA,yDAAA,zDAACA,gIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;WAAT,AAAAF,4CAAAD,WAAA,IAAA,lEAAWI;AAAX,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,uBAAA,KAAA,EAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,oBAA0BH;GAA1B,OAAA,KAAA,MAAA;;AACA,IAAMI,cAAY,iBAAAC,mBAAI,AAAA,8FAAcP;AAAlB,AAAA,oBAAAO;AAAAA;;AAAA;;;IACZD,kBAAY,6CAAA,7CAACE,8EAAQ,AAACC,6CAAKH,YAAYJ;AAD7C,AAEE,AAAAC,0DAAAC,mCAAA,qDAAA,uBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,gBAAsBC;GAAtB,OAAA,KAAA,MAAA;;AACA,6BAAA,mFAAA,zGAACI,mBAASV,8JAAkBM;;AAEjC,yDAAA,zDAACV,yIAEA,cAAAe,HAAKX;AAAL,AAAA,IAAAY,aAAAD;QAAA,AAAAZ,4CAAAa,WAAA,IAAA,/DAASX;WAAT,AAAAF,4CAAAa,WAAA,IAAA,lEAAWV;AAAX,AACE,AAAAC,0DAAAC,mCAAA,wDAAA,uBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,wBAA+BH;GAA/B,OAAA,KAAA,MAAA;;AACA,IAAMI,cAAY,iBAAAC,mBAAI,AAAA,8FAAcP;AAAlB,AAAA,oBAAAO;AAAAA;;AAAA;;;IACZD,kBAAY,6CAAA,7CAACE,8EAAQ,+CAAA,WAAAK,1DAACC;AAAD,AAAS,yDAAAD,lDAACE,6CAAEb;GAAQI;AAD/C,AAEE,AAAAH,0DAAAC,mCAAA,wDAAA,uBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,gBAAuBC;GAAvB,OAAA,KAAA,MAAA;;AACA,6BAAA,mFAAA,zGAACI,mBAASV,8JAAkBM;;AAEjC,2DAAA,3DAACU,+KAEA,WAAKhB,GAAGC;AAAR,AACE,IAAMK,cAAY,iBAAAC,mBAAI,AAAA,8FAAcP;AAAlB,AAAA,oBAAAO;AAAAA;;AAAA;;;AAAlB,AACE,uCAAA,/BAAG,AAACU,gBAAMX","names":["re_frame.core.reg_event_db","p__44864","vec__44868","cljs.core.nth","db","_","href","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","css-loading","or__5045__auto__","cljs.core.into","cljs.core.conj","cljs.core/assoc-in","p__44877","vec__44878","p1__44873#","cljs.core.remove","cljs.core._EQ_","re_frame.core.reg_sub","cljs.core/count"],"sourcesContent":["(ns frontend.css.loading\n  (:require\n   [taoensso.timbre :refer-macros [debug debugf info warn warnf error]]\n   [re-frame.core :as rf]))\n\n(rf/reg-event-db\n :css/loading-add\n (fn [db [_ href]]\n   (info \"css/loading-add: \" href)\n   (let [css-loading (or (:css/loading db) [])\n         css-loading (into [] (conj css-loading href))]\n     (info \"css/loading: \" css-loading)\n     (assoc-in db [:css/loading] css-loading))))\n\n(rf/reg-event-db\n :css/loading-success\n (fn [db [_ href]]\n   (debug \"css/loading-success: \" href)\n   (let [css-loading (or (:css/loading db) [])\n         css-loading (into [] (remove #(= href %) css-loading))]\n     (debug \"css/loading: \" css-loading)\n     (assoc-in db [:css/loading] css-loading))))\n\n(rf/reg-sub\n :css/loading?\n (fn [db _]\n   (let [css-loading (or (:css/loading db) [])]\n     (> (count css-loading) 0))))"],"x_google_ignoreList":[0]}