{"version":3,"sources":["frontend/config/events.cljs"],"mappings":";AAkBA,yDAAA,zDAACA,yHAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBG;wBAAnB,AAAAF,4CAAAD,WAAA,IAAA,/EAAqBI;oBAArB,AAAAH,4CAAAD,WAAA,IAAA,3EAAuCK;AAAvC,AACE,IAAMC,SAAO,kBAAID,eACF,CAACE,+DAAAA,iEAAAA,2CACD,mIAAA,oIAAA,tQAACC,kEAAAA,wJAAAA,nCAAmCC,oIAAAA;IAC7CC,MAAI,gKAAA,9IAAIL,eACF,6CAAA,AAAAM,wDAAA,xCAAMC;AAJlB,AAME,AAAAC,0DAAAC,mCAAA,qDAAA,yBAAA,KAAA,GAAA,gDAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,4DAAmEV,cAAQK,IAAIN;GAA/E,OAAA,KAAA,MAAA;;AANF,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,uDAAA,2DAAA,QAAA,kFAAA,iEAAA,mFAAA,uHAAA,gEAAA,mFAAA,vjBASiCM,kJAEAJ,0OACsBD,cAAQD;;AAYlE,yDAAA,zDAACV,wIAEA,gBAAAsB,LAAKE;AAAL,AAAA,IAAAD,aAAAD;QAAA,AAAAf,4CAAAgB,WAAA,IAAA,/DAAWd;oBAAX,AAAAF,4CAAAgB,WAAA,IAAA,3EAAaZ;wBAAb,AAAAJ,4CAAAgB,WAAA,IAAA,/EAAqBb;aAArB,AAAAH,4CAAAgB,WAAA,IAAA,pEAAuCE;AAAvC,AACE,IAAMA,aAAO,kBAAId,eACF,AAACe,8BAASD,QACVA;IACTA,aAAO,yDAAA,zDAACE,8CAAMF,uEACSd;SAJ7B,2CAAA,sTAAA,6DAAA,naASMiB,gGAAQ,uGAAA,mFAAA,1LAACC,mBAAS,AAAA,8EAAKL,yJAAgBC,4JACxBf,kBAAkBC;AAVvC,AAWE,AAAAQ,0DAAAC,mCAAA,qDAAA,yBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,MAAA;;AACA,AAACS,gCAAe,AAAA,8FAAcL;;AAC9B,AAAAN,0DAAAC,mCAAA,wDAAA,yBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,WAAkBI;GAAlB,OAAA,KAAA,MAAA;;AACA,oBAAIf;AACFkB;;AACA,yDAAA,lDAACG,+CAAOH;;;AAEf,yDAAA,zDAACI,sIAEA,cAAAC,HAAKzB;AAAL,AAAA,IAAA0B,aAAAD;QAAA,AAAA1B,4CAAA2B,WAAA,IAAA,/DAASzB;eAAT,AAAAF,4CAAA2B,WAAA,IAAA,tEAAWC;AAAX,AACE,AAAAhB,0DAAAC,mCAAA,uDAAA,yBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,sBAA6Bc;GAA7B,OAAA,KAAA,MAAA;;AACA,IAAMC,UAAQ,0JAAA,oJAAA,jQAAK,AAAA,kGAAcD,4DAAe,AAAA,wFAASA;AAAzD,AACE,2EAAA,uDAAA,lIAACE;;AACD,AAAAlB,0DAAAC,mCAAA,uDAAA,yBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,sBAA6Be;GAA7B,OAAA,KAAA,MAAA;;AACA5B","names":["re_frame.core.reg_event_fx","p__44921","p__44922","map__44926","cljs.core/--destructure-map","cljs.core.get","vec__44927","cljs.core.nth","db","_","after-config-load","static?","format","ajax.core/text-response-format","ajax.core/transit-response-format","modular.encoding.transit/decode","uri","cljs.core/deref","frontend.routes/static-main-path-atom","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","p__44946","vec__44947","cofx","config","modular.encoding.edn/read-edn","cljs.core.assoc","fx","cljs.core/assoc-in","modular.log/timbre-config!","cljs.core.dissoc","re_frame.core.reg_event_db","p__44966","vec__44967","response","details","frontend.notifications.core.add_notification"],"sourcesContent":["(ns frontend.config.events\n  \"Events related configuration loading\"\n  (:require\n   [taoensso.timbre :refer-macros [debug info infof error]]\n   [ajax.core :as ajax]\n   [cljs.reader :refer [read-string]]\n   [bidi.bidi]\n   [re-frame.core :refer [reg-event-db reg-event-fx dispatch]]\n   [modular.log :refer [timbre-config!]]\n   [modular.encoding.transit :refer [decode]]\n   [modular.encoding.edn :refer [read-edn]]\n   [frontend.notifications.core :refer [add-notification]]\n   [frontend.routes :refer [static-main-path-atom]]\n  ; [webly.build.prefs :refer [pref]]\n   ))\n\n; load configuration\n\n(reg-event-fx\n :config/load\n (fn [{:keys [db]} [_ after-config-load static?]]\n   (let [format (if static?\n                  (ajax/text-response-format)\n                  (ajax/transit-response-format :json decode))\n         uri (if static?\n               (str @static-main-path-atom \"/r/config.edn\")\n               \"/api/config\")]\n     (infof \"loading config static?: %s from url: %s then dispatch: %s\" static? uri after-config-load)\n     {;:db   (assoc-in db [:build] (pref))\n      :http-xhrio {:method          :get\n                   :uri             uri\n                   :timeout         10000                     ;; optional see API docs\n                   :response-format format ;; IMPORTANT!: You must provide this.\n                   :on-success      [:config/load-success static? after-config-load]\n                   :on-failure      [:config/load-error]}})))\n\n\n;(def config\n;  {'bidi.bidi.TaggedMatch bidi/map->TaggedMatch})\n\n\n;(defn read-str [s]\n;  (read-string\n;   {:readers config} s))\n\n(reg-event-fx\n :config/load-success\n (fn [cofx [_ static? after-config-load config]]\n   (let [config (if static?\n                  (read-edn config) ; (cljs.reader/read-string config)\n                  config)\n         config (assoc config\n                       :static? static?\n                       ;:build (pref)\n         ;              :mode @webly-mode-atom\n         ;              :entry-path @entry-path-atom\n                       )\n         fx {:db (assoc-in (:db cofx) [:config] config)\n             :dispatch [after-config-load static?]}]\n     (info \"config load-success!\")\n     (timbre-config! (:timbre/cljs config))\n     (debug \"config: \" config)\n     (if after-config-load\n       fx\n       (dissoc fx :dispatch)))))\n\n(reg-event-db\n :config/load-error\n (fn [db [_ response]]\n   (error \"config-load-error: \" response)\n   (let [details (str (:status-text response) \" (\" (:status response) \")\")]\n     (add-notification :error \"Error loading config\")\n     (error \"config load error: \" details)\n     db)))\n"],"x_google_ignoreList":[0]}