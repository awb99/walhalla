{"version":3,"sources":["pinkgorilla/repl/cljs/http.cljs"],"mappings":"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","names":["pinkgorilla.repl.cljs.http/make-get","process","p__54755","vec__54756","cljs.core.nth","url","a","path","opts","or__5045__auto__","c__41244__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41245__auto__","switch__41221__auto__","state_54768","state_val_54769","inst_54759","cljs.core.async.impl.ioc-helpers/take!","inst_54761","inst_54762","inst_54763","inst_54764","inst_54765","inst_54766","statearr-54770","cljs.core.async.impl.ioc-helpers/return-chan","statearr-54771","state-machine__41222__auto__","ret-value__41223__auto__","result__41224__auto__","cljs.core/keyword-identical?","ex__41225__auto__","e54772","statearr-54773","cljs.core/seq","statearr-54774","cljs.core/first","state__41246__auto__","statearr-54775","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","cljs.core.println","cljs.core/type","cljs.core.swap_BANG_","cljs.core/assoc-in","pinkgorilla.repl.cljs.http/get-str","cljs.core/identity","pinkgorilla.repl.cljs.http/get-edn","pinkgorilla.repl.cljs.http/parse-json","s","js/JSON.parse","cljs.core.js__GT_clj","pinkgorilla.repl.cljs.http/get-json","pinkgorilla.repl.cljs.http/application-url","cemerick.url.url","js/window","pinkgorilla.repl.cljs.http/ws-origin","app-url","proto","cljs.core._EQ_","port-postfix","port","clojure.string/replace"],"sourcesContent":["(ns pinkgorilla.repl.cljs.http\n  (:require\n   [clojure.edn :as edn]\n   ;[ajax.core]\n   [cljs.core.async :refer [<! >! chan close!] :refer-macros [go]]\n   [cljs-http.client :as http]\n   [cemerick.url :as url]\n   [clojure.string :as str]))\n\n(defn- make-get [process]\n  (fn [url a path & [opts]]\n    (let [opts (or opts {:with-credentials? false  ; true blocks remote api with corsrequests\n                         })]\n      (go (let [response (<! (http/get url opts))\n                body (:body response)\n                _ (println \"body: \" body \"type: \" (type body))\n                data (-> body process)]\n            (swap! a assoc-in path data)\n            nil)))))\n\n(def get-str (make-get identity))\n\n(def get-edn (make-get identity)) ; edn/read-string\n\n(defn parse-json [s]\n  (-> s js/JSON.parse js->clj))\n\n;(def get-json (make-get parse-json))\n\n(def get-json (make-get identity))\n\n; {:with-credentials? false\n;   :query-params {\"since\" 135}}\n\n(defn application-url\n  \"gets the current url, as a map\"\n  []\n  (url/url (-> js/window .-location .-href)))\n\n(defn ws-origin\n  \"useful to get a websocket to a path on the same server as the website is loaded from\"\n  [path]\n  (let [app-url (application-url)\n        proto (if (= (:protocol app-url) \"http\") \"ws\" \"wss\")\n        port-postfix  (let [port (:port app-url)]\n                        (if (< 0 port)\n                          (str \":\" port)\n                          \"\"))]\n    (str proto \":\" (:host app-url) port-postfix (str/replace (:path app-url) #\"[^/]+$\" path))))"],"x_google_ignoreList":[0]}