{"version":3,"sources":["ui/codemirror/cm_events/key.cljs"],"mappings":";AAOA,uCAAA,+CAAAA,tFAAMI,+FAA0CK;AAAhD,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAAuCO;SAAvC,AAAAL,4CAAAF,eAAA,hEAAwBI;SAAxB,AAAAF,4CAAAF,eAAA,hEAA2BK;UAA3B,AAAAH,4CAAAF,eAAA,jEAA8BM;AAA9B,AACE,AAAAG,0DAAAC,mCAAA,wDAAA,8BAAA,KAAA,EAAA,gDAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,uBAA+BJ;GAA/B,OAAA,KAAA,MAAA;;AACA,GAAM,AAACK,6CAAYR;AAAnB,AACE,AAAAK,0DAAAC,mCAAA,wDAAA,8BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,MAAA;;AACA,AAAiBH;;AACjB,0CAAA,mFAAA,4DAAA,lLAACK,2BAASN,oJAAkBF;;AAH9B;;;AAKF,yCAAA,iDAAAS,1FAAME,mGAA4CR;AAAlD,AAAA,IAAAO,aAAAD;IAAAC,iBAAA,AAAAd,4BAAAc;cAAAA,VAAyCR;SAAzC,AAAAL,4CAAAa,eAAA,hEAA0BX;SAA1B,AAAAF,4CAAAa,eAAA,hEAA6BV;UAA7B,AAAAH,4CAAAa,eAAA,jEAAgCT;AAAhC,AACE,AAAAG,0DAAAC,mCAAA,wDAAA,8BAAA,KAAA,GAAA,gDAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,yBAAiCJ;GAAjC,OAAA,KAAA,MAAA;;AACA,GAAM,AAACU,4CAAWb;AAAlB,AACE,AAAAK,0DAAAC,mCAAA,wDAAA,8BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,MAAA;;AACA,AAAiBH;;AACjB,0CAAA,mFAAA,4DAAA,lLAACK,2BAASN,oJAAkBF;;AAH9B;;;AAOF,AAmBA,wCAAA,gDAAAa,xFAAME,iGAA4CE,EAAEC;AAApD,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAlB,4BAAAkB;cAAAA,VAAyCZ;cAAzC,AAAAL,4CAAAiB,eAAA,rEAAyBE;SAAzB,AAAAnB,4CAAAiB,eAAA,hEAAiCf;AAAjC,AACE,OAAAK,0DAAAC,mCAAA,wDAAA,8BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,UAAiB,AAAWY;GAA5B,OAAA,KAAA,MAAA;;AAEF,0CAAA,kDAAAC,5FAAME,qGAA8CJ,EAAEC;AAAtD,AAAA,IAAAE,aAAAD;IAAAC,iBAAA,AAAAxB,4BAAAwB;cAAAA,VAA2ClB;cAA3C,AAAAL,4CAAAuB,eAAA,rEAA2BJ;SAA3B,AAAAnB,4CAAAuB,eAAA,hEAAmCrB;AAAnC,AACE,AAAAK,0DAAAC,mCAAA,wDAAA,8BAAA,KAAA,GAAA,gDAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,sBAA8B,AAAWY,YAAKnB;GAA9C,OAAA,KAAA,MAAA;;AACA,IAAAuB,WAAM,AAAWJ;AAAjB,AAAA,QAAAI;KAAA;AAUE,OAACxB,qCAASI,QAAQgB;;;KAVpB;AAaE,OAACP,uCAAWT,QAAQgB;;;KAbtB;AAgBE,GAAM,AAACK,cAAI,AAAYL;AAAvB,AACE,OAACM,oCAAKtB,QAAQgB;;AADhB;;;;;AAhBF","names":["p__54618","map__54619","cljs.core/--destructure-map","cljs.core.get","ui.codemirror.cm-events.key/arrow-up","cm","id","fun","context","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui.codemirror.api.position/first-line?","ui.codemirror.fun/dispatch","p__54620","map__54621","ui.codemirror.cm-events.key/arrow-down","ui.codemirror.api.position/last-line?","p__54623","map__54624","ui.codemirror.cm-events.key/on-key-up","cm-opts","_","evt","p__54627","map__54628","ui.codemirror.cm-events.key/on-key-down","G__54629","cljs.core/not","ui.codemirror.cm-js.completion/hint"],"sourcesContent":["(ns ui.codemirror.cm-events.key\n  (:require\n   [taoensso.timbre :refer-macros [debug debugf info infof error]]\n   [ui.codemirror.api.position :refer [first-line? last-line?]]\n   [ui.codemirror.cm-js.completion :refer [hint]]\n   [ui.codemirror.fun :refer [dispatch]]))\n\n(defn arrow-up [{:keys [cm id fun] :as context} e]\n  (debugf \"arrow-up context: %s\" context)\n  (when (first-line? cm)\n    (debug \"up on first-line!\")\n    (.preventDefault e)\n    (dispatch context [:cm/move id :up])))\n\n(defn arrow-down [{:keys [cm id fun] :as context} e]\n  (debugf \"arrow-down context: %s\" context)\n  (when (last-line? cm)\n    (debug \"down on last-line!\")\n    (.preventDefault e)\n    (dispatch context [:cm/move id :down])))\n\n;; http://gcctech.org/csc/javascript/javascript_keycodes.htm\n\n(comment\n  (def tab           9)\n  (def enter        13)\n  (def escape       27)\n\n  (def arrow-left   37)\n  (def arrow-up \t  38)\n  (def arrow-right  39)\n  (def arrow-down   40)\n\n  (def shift \t      16)\n  (def ctrl \t      17)\n  (def alt \t        18)\n  (def pause-break  19)\n  (def caps-lock \t  20)\n  (def window-left  91)\n  (def window-right 92)\n  (def select       93))\n\n(defn on-key-up [{:keys [cm-opts cm] :as context} _ evt]\n  (debug \"key-up:\" (.-keyCode evt)))\n\n(defn on-key-down [{:keys [cm-opts cm] :as context} _ evt]\n  (debugf \"key-down: %s cm: %s\" (.-keyCode evt) cm)\n  (case (.-keyCode evt)\n\n    #_enter #_(when (and (not (.-shiftKey evt))\n                         (.-metaKey evt))\n                (when-let [source (.getValue cm)]\n                  (when (should-eval cm evt source)\n                    (.preventDefault evt)\n                    (run-eval source))))\n\n    38 ; arrow-up\n    (arrow-up context evt)\n\n    40 ; arrow-down\n    (arrow-down context evt)\n\n    9 ; tab\n    (when (not (.-shiftKey evt))\n      (hint context evt))\n\n    ;13 ; enter\n    ;(rf/dispatch [:codemirror/completion-apply context evt])\n\n    :none))\n\n"],"x_google_ignoreList":[0]}