{"version":3,"sources":["frontend/settings/events.cljs"],"mappings":"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","names":["akiroz.re-frame.storage/reg-co-fx!","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__45018","map__45019","cljs.core/--destructure-map","cljs.core.get","db","store","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","or__5045__auto__","settings-default","cljs.core.get_in","use-localstorage","cljs.core.dissoc","settings","cljs.core.merge","cljs.core.assoc","p__45026","p__45027","map__45032","vec__45033","cljs.core.nth","_","k","v","cljs.core/assoc-in","p__45040","p__45041","map__45042","vec__45043"],"sourcesContent":["(ns frontend.settings.events\n  \"events related to the settings\"\n  (:require\n   [taoensso.timbre :refer-macros [info warn]]\n   [re-frame.core :refer [reg-event-fx inject-cofx]]\n   [akiroz.re-frame.storage :refer [reg-co-fx!]] ; https://github.com/akiroz/re-frame-storage\n   ))\n\n(reg-co-fx! :webly         ;; local storage key\n            {:fx :store     ;; re-frame fx ID\n             :cofx :store}) ;; re-frame cofx ID\n\n(reg-event-fx\n :settings/init\n [(inject-cofx :store)]\n (fn [{:keys [db store]}]\n   (info \"settings/localstorage init\")\n   (let [store (or store {})\n         settings-default (get-in db [:config :settings])\n         use-localstorage (:use-localstorage settings-default)\n         settings-default (dissoc settings-default :use-localstorage)\n         settings (if use-localstorage\n                    (merge settings-default store)\n                    settings-default)]\n     (if use-localstorage\n       (info \":db :settings can be changed by user via localstorage\")\n       (info \"using static settings supplied via config\"))\n     {:db (assoc db :settings settings)})))\n\n;; Settings Change\n\n(reg-event-fx\n :settings/set\n [(inject-cofx :store)]\n (fn [{:keys [db store]} [_ k v]]\n   (info \"changing setting \" k \" to: \" v)\n   (let [store (or store {})]\n     {:db (assoc-in db [:settings k] v)\n      :store (assoc store k v)})))\n\n(reg-event-fx\n :settings/unset\n [(inject-cofx :store)]\n (fn [{:keys [db store]} [_ k]]\n   (info \"unsetting setting \" k)\n   (let [store (or store {})\n         settings (dissoc (:settings db) k)]\n     {:db (assoc-in db [:settings] settings)\n      :store (dissoc store k)})))\n"],"x_google_ignoreList":[0]}