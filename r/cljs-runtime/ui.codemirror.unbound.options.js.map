{"version":3,"sources":["ui/codemirror/unbound/options.cljs"],"mappings":";;AAKA,gDAAA,wCAAA,wDAAA,qEAAA,uEAAA,0FAAA,oDAAA,+DAAA,wDAAA,8DAAA,+DAAA,2EAAA,mEAAA,iFAAA,UAAA,KAAA,KAAA,KAAA,UAAA,KAAA,WAAA,MAAA,MAAA,IAAA,KAAA,r8BAAKA;AAwBL,+CAAA,2CAAA,mEAAA,YAAA,4EAAA,YAAA,2EAAA,YAAA,kEAAA,1ZAAKC;AAWL;;;4DAAA,5DAAMC;AAAN,AAGE,AAAAC,0DAAAC,mCAAA,uDAAA,gCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,KAAA;;AACA,IAAMC,cAAY,AAAYC;IACxBC,YAAU,AAAUD;AAD1B,AAEE,oBAAID;AACF,aAAA,eAAA,3BAAMA;AAAN,AAAA;;;AACA,AAAAH,0DAAAC,mCAAA,uDAAA,gCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,KAAA;;;AACF,oBAAIG;AACF,WAAA,VAAMA,uBAAoB,AAACC,qBAAQR;;AACnC,AAAAE,0DAAAC,mCAAA,uDAAA,gCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,KAAA;;;AAPJ;;AAeF,GAAA,QAAAK,+BAAAC,0CAAAC,kDAAAC,0DAAAC;AAAA;AAAA,AAAA,AAASC,2CAAW,6CAAA,7CAACC;;AAErB,mDAAA,nDAAMC;AAAN,AACE,oBAAA,AAAAC,gBAAOH;AAAP,AACE,AAACb;;AACD,+DAAA,/DAACiB,sBAAOJ;;AAFV;;AADF","names":["ui.codemirror.unbound.options/cm-default-opts","ui.codemirror.unbound.options/cm-keybindings","ui.codemirror.unbound.options/configure-cm-globally!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cm-commands","js/module$node_modules$codemirror$lib$codemirror","cm-keymap","cljs.core/clj->js","js/ui","js/ui.codemirror","js/ui.codemirror.unbound","js/ui.codemirror.unbound.options","js/ui.codemirror.unbound.options.needs-init","ui.codemirror.unbound.options/needs-init","cljs.core.atom","ui.codemirror.unbound.options/ensure-initialized","cljs.core/deref","cljs.core/reset!"],"sourcesContent":["(ns ui.codemirror.unbound.options\n  (:require\n   [taoensso.timbre :refer-macros [debug debugf info infof warn error]]\n   [\"codemirror\" :as CodeMirror]))\n\n(def cm-default-opts\n  {:lineNumbers true\n   :firstLineNumber 1\n   :lineWrapping true ;  false=scroll (horizontal), true=wrap \n   ; viewportMargin: Specifies the amount of lines that are rendered above and \n   ; below the part of the document that's currently scrolled into view. This \n   ; affects the amount of updates needed when scrolling, and the amount of \n   ; work that such an update does. You should usually leave it at its \n   ; default, 10. Can be set to Infinity to make sure the whole document is \n   ; always rendered, and thus the browser's text search works on it. This \n   ; will have bad effects on performance of big documents.\n   ;:viewportMargin js/Infinity\n   :matchBrackets true\n   :autoCloseBrackets \"()[]{}\\\"\\\"\"\n   :showCursorWhenSelecting true\n   :theme \"mdn-like\" ; \"default\" ; \n   :mode \"clojure\" ; \"clojure-parinfer\"\n   ;:keyMap \"default\" ; \"vim\" \n   :keyMap \"gorilla\"\n   :extraKeys #js {} ;\"Shift-Enter\" \"newlineAndIndent\"}\n   :autofocus false ; true\n   :readOnly false ;true\n   })\n\n(def cm-keybindings\n  {:Shift-Enter      \"doNothing\"\n   :Shift-Ctrl-Enter \"doNothing\"\n   :Shift-Alt-Enter  \"doNothing\"\n   :fallthrough      \"default\"})\n\n#_(def cm-default-opts {:text/x-clojure  {:cm-opts (merge cm-default-opts-common\n                                                          {:mode \"clojure\"})}\n                        :text/x-markdown {:cm-opts (merge cm-default-opts-common\n                                                          {:mode \"text/x-markdown\"})}})\n\n(defn configure-cm-globally!\n  \"Initialize CodeMirror globally\"\n  []\n  (error \"Configure Code Mirror globally\")                  ;\n  (let [cm-commands (.-commands CodeMirror)\n        cm-keymap (.-keyMap CodeMirror)]\n    (if cm-commands\n      (aset cm-commands \"doNothing\" #())\n      (error \"could not set codemirror commands!\"))\n    (if cm-keymap\n      (aset cm-keymap \"gorilla\" (clj->js cm-keybindings))\n      (error \"could not set codemirror keymap!\"))\n    nil))\n\n; webly brings a css loader\n; this css loader is essential for codemirror, because codemirror expects\n; that the css theme is loaded before it gets rendered.\n; the css loader takes care of that - also if the theme gets changed at runtime\n\n(defonce needs-init (atom true))\n\n(defn ensure-initialized []\n  (when @needs-init\n    (configure-cm-globally!)\n    (reset! needs-init false))\n  nil)"],"x_google_ignoreList":[0]}