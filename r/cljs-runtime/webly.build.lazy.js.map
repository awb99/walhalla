{"version":3,"sources":["webly/build/lazy.cljs"],"mappings":"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","names":["js/webly","js/webly.build","js/webly.build.lazy","js/webly.build.lazy.renderer","webly.build.lazy/renderer","reagent.core.atom","webly.build.lazy/log-loading","symbol-fn","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","js/webly.build.lazy.on-load","webly.build.lazy/on-load","webly.build.lazy/available","cljs.core/deref","cljs.core/keys","webly.build.lazy/add-available","s","cljs.core.swap_BANG_","cljs.core/assoc","webly.build.lazy/add-loaded","f","cljs.core/assoc-in","webly.build.lazy/start-load","load-spec","fexpr__45055","e45056","shadow.lazy.load","cljs.core.partial","e","webly.build.lazy/run","args","cljs.core.apply","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","webly.build.lazy/loading","seq45064","G__45065","cljs.core/first","cljs.core/next","self__5754__auto__","webly.build.lazy/show-lazy","css-loading?","re_frame.core.subscribe","r","cljs.core.get_in","and__5043__auto__","cljs.core/not"],"sourcesContent":["(ns webly.build.lazy\n  (:require-macros [webly.build.lazy])\n  (:require\n   [taoensso.timbre :refer-macros [debug info warn error]]\n   [reagent.core :as r]\n   [re-frame.core :as rf]\n   [shadow.lazy :as lazy]))\n\n; https://code.thheller.com/blog/shadow-cljs/2019/03/03/code-splitting-clojurescript.html\n; https://clojureverse.org/t/shadow-lazy-convenience-wrapper-for-shadow-loader-cljs-loader/3841\n\n(defonce renderer (r/atom {}))\n\n(defn log-loading [symbol-fn]\n  (debug \"webly lazy loading: \" symbol-fn))\n\n(defonce on-load (r/atom log-loading))\n\n(defn available []\n  (keys @renderer))\n\n(defn add-available [s]\n  (debug \"available lazy renderer: \" s)\n  (swap! renderer assoc s {:symbol s}))\n\n(defn add-loaded [s f]\n  (debug \"loaded lazy renderer: \" s)\n  (swap! renderer assoc-in [s :fun] f))\n\n(defn start-load [symbol-fn load-spec]\n  (@on-load symbol-fn)\n  (try\n    (lazy/load load-spec (partial add-loaded symbol-fn))\n    (catch :default e\n      (error \"Lazy Loading failed for: \" symbol-fn))))\n\n(defn run [f args]\n  (if args\n    (apply f args)\n    (f)))\n\n(defn loading [symbol-fn & args]\n  [:span \"lazy-load \"])\n\n(defn show-lazy [load-spec symbol-fn]\n  (let [css-loading? (rf/subscribe [:css/loading?])]\n    (fn [& args]\n      (let [r (get-in @renderer [symbol-fn :fun])]\n        (if (and r (not @css-loading?))\n          [run r args]\n          (do (start-load symbol-fn load-spec)\n              [loading symbol-fn]))))))\n\n\n\n"],"x_google_ignoreList":[0]}