{"version":3,"sources":["sci/async.cljs"],"mappings":";AASA,AAAA,AAEA,4BAAA,5BAAOA,gEAAiBC,IAAIC;AAA5B,AACE,IAAMC,UAAQ,AAAA,yFAAUF;AAAxB,AACE,GAAI,AAACG,cAAIF;AACP,IAAMQ,MAAI,AAACF,gBAAMN;IAAjBG,aACuB,qCAAA,nCAAI,gBAAAQ,fAASH,qHACVA,YAAKA;IAF/BJ,aAAA,AAAAF,cAAAC;IAAAE,eAAA,AAAAC,gBAAAF;IAAAA,iBAAA,AAAAG,eAAAH;cAAAC,VACOI;WADPL,PACiBM;IAEXD,cAAQ,2HAAA,AAAA,zHAAI,6CAAA,AAAA,7CAACG,+GAAaH,mFACFA;IACxBI,YAAK,AAAA,kFAAMd;IACXe,MAAI,iBAAA,AAAAC,jBAACC,iCAAaf;AANxB,AAOE,oBAAI,iBAAAgB,oBAAK,wBAAAN,vBAASF;AAAd,AAAA,GAAAQ;AACK,OAACC,iBAAYnB,IAAIU;;AADtBQ;;;AAGF,AAAI,IAAAE,0BAAA,4DAAA,AAAAJ,ZAAcS,4BAAQvB;AAAtB,AAAA,GAAA,AAAAmB,qBAAAD;AAAA;AAAA,AAAA,MAAA,KAAAE,MAAA;;;AAAA,AAAAC,mCAAAH;;AAAA,IAAA,AAAA,AAAA,AACE,yEAAA,zEAACM,8CAAMC,uBAAc3B,SAAQU,YAAQC;UADvC,AAAA,AAAAa;;AAEA,IAAAI,WAAiB5B;IAAjB6B,WAAqB,AAACC,eAAK7B;AAA3B,AAAA,0HAAA2B,SAAAC,gDAAAD,SAAAC,pLAAC9B,0DAAAA,6EAAAA;;AACL,IAAAgC,qBAAiB,AAAA,qGAAA,AAAAf,gBAAiBF;AAAlC,AAAA,oBAAAiB;AAAA,cAAAA,VAASC;AAAT,AACE,IAAMrB,WAAK,AAACe,8CAAMS,mBAASxB;IAA3BsB,aACsB,4EAAA,1EAAI,OAASvB,0BACX,AAAC4B,4BAAc5B,gGACdA;oBAHzB,AAAAwB,4CAAAD,WAAA,IAAA,3EACOG;WADP,AAAAF,4CAAAD,WAAA,IAAA,lEACgBI;AADhB,AAIE,OAAO,AAACE,gBAAmB,iBAAAC,WAAA,2CAAA,2FAAA,uDAAA,wEAAA,2EAAA,rPAAc,iBAAA,AAAAxB,jBAACC,iCAAaf,6DACbF,8DACIoC,oFACMC,yDACT1B;AAJhB,AAAA,sFAAA6B,8BAAAA,5GAACR,wCAAAA,kDAAAA;WAKrB,WAAKS;AAAL,AACE,IAAMzC,UAAI,iBAAA0C,mBAAI,AAAA,iFAAMD;AAAV,AAAA,oBAAAC;AAAAA;;AAAe1C;;;AAAzB,AACE,oBAAI,AAAA,yFAAUyC;AACZ,IAAAE,WAAiB3C;IAAjB4C,WAAqB,AAACd,eAAK7B;AAA3B,AAAA,0HAAA0C,SAAAC,gDAAAD,SAAAC,pLAAC7C,0DAAAA,6EAAAA;;AAED,IAAM8C,cACA,WAAK7C,QAAIyC;AAAT,AACE,IAAM/B,cAAQ,iBAAAgC,mBAAI,AAAA,wFAAUD;AAAd,AAAA,oBAAAC;AAAAA;;AAAmBhC;;;IAC3BI,gBAAK,AAAA,kFAAMd;AADjB,AAEE,OAAC8C,mDAAMhC,cACA,WAAKiC;AAAL,AACE,IAAMC,aAAW,gDAAA,hDAACC,4CAAIF;IAChBG,gBAAc,AAACD,4CAAID,WAAWtC;AADpC,AAEE,OAACyC,yCAAgCnD,QAAI+C,IAAIhC,IACRmC,cACAxC,YAAQC;;;AAV9D,AAWE,IAAAoB,yBAAa,AAAA,uFAASU;AAAtB,AAAA,oBAAAV;AAAA,UAAAA,NAASqB;AAAT,AACE,cAAA,AAAApC,VAAMqC,0BAASnD;AAAf,AACE,OAAO,CAACoD,4DAAAA,yEAAAA,fAAatD,qDAAAA,7CAAIoD,qDAAAA,WAClB;AAAA,AACE,AAACG,uBAAQrD,QAAQmD;;AACjB,AAACR,YAAY7C,QAAIyC;;AACjB,IAAAe,WAAiBxD;IAAjByD,WAAqB,AAAC3B,eAAK7B;AAA3B,AAAA,0HAAAuD,SAAAC,gDAAAD,SAAAC,pLAAC1D,0DAAAA,6EAAAA;;;AACZ,AACE,AAAC8C,YAAY7C,QAAIyC;;AACjB,IAAAiB,WAAiB1D;IAAjB2D,WAAqB,AAAC7B,eAAK7B;AAA3B,AAAA,0HAAAyD,SAAAC,gDAAAD,SAAAC,pLAAC5D,0DAAAA,6EAAAA;;;;;AACtB,AAAI,IAAAqB,0BAAA,4DAAA,AAAAJ,ZAAcS,4BAAQvB;AAAtB,AAAA,GAAA,AAAAmB,qBAAAD;AAAA;AAAA,AAAA,MAAA,KAAAE,MAAA;;;AAAA,AAAAC,mCAAAH;;AAAA,IAAA,AAAA,AAAA,AACE,yEAAA,zEAACM,8CAAMC,uBAAc3B,SAAQU,YAAQC;UADvC,AAAA,AAAAa;;AAEA,IAAAoC,WAAiB5D;IAAjB6D,WAAqB,AAAC/B,eAAK7B;AAA3B,AAAA,0HAAA2D,SAAAC,gDAAAD,SAAAC,pLAAC9D,0DAAAA,6EAAAA;;;;AACX,uBAAA,hBAACwC;;;AAEP,yBAAA,zBAAgBuB,0DAAc9D,IAAI+D;AAAlC,AACE,IAAM7D,UAAQ,AAAA,yFAAUF;IAAxBgE,aAC+BD;IAD/BE,aAAA,AAAA9D,cAAA6D;IAAAE,eAAA,AAAA3D,gBAAA0D;IAAAA,iBAAA,AAAAzD,eAAAyD;UAAAC,NACOC;IADPD,mBAAA,AAAA3D,gBAAA0D;IAAAA,iBAAA,AAAAzD,eAAAyD;cAAAC,VACWE;eADXH,XACqBI;IACfC,UAAQ,AAACC,mBAAS,WAAKR;AAAL,AACE,SAAK,AAACS,qBAAKT,kBACN,6CAAA,7CAAClD,wGAAW,AAACN,gBAAMwD;GAAYM;IACxDI,gBAAc,oDAAA,pDAACxB,4CAAIqB;IACnBI,cAAY,oDAAA,pDAACzB,4CAAIqB;IAEjBI,kBAAY,+CAAA,WAAAC,1DAACC;AAAD,AAAS,SAAK,qBAAAD,rBAACH,4CAAQ,6CAAA,7CAAC3D,qHAAkB,gBAAA8D,hBAACpE;GACnCmE;IAEpBG,SAAO,iBAAAzD,oBAAA,4DAAA,AAAAJ,ZAAcS,4BAAQvB;AAAtB,AAAA,GAAA,AAAAmB,qBAAAD;AAAA;AAAA,AAAA,MAAA,KAAAE,MAAA;;;AAAA,AAAAC,mCAAAH;;AAAA,IAAA,AAAA,AAAA,AACE,OAAC0D,mBAAc9E,IAAI,KAAA+E,eAAA,KAAA,AAAA,qDAAA,KAAAA,eAAA,sIAAA,KAAAA,eAAA,KAAA,AAAA,wDAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,jPAAU,mDAAA,AAAA,nDAACC,wGAAUZ,QAAQM;UADlD,AAAA,AAAAlD;;IAEPyD,IAAE,AAAC1B,uBAAQrD,QAAQ2E;IACnB5E,WAAS,AAACiF,sDAAOpD,iEAAK2C;AAd5B,AAeE,OAAC1E,0BAAgBC,IAAIC;;AAEzB,AAAA;AAAA,AAEA,8BAAA,9BAAMqD,oEACHtD,IAAImF;AADP,AAEE,IAAMC,MAAI,AAACC,gBAAWF;IAChBjF,UAAQ,iBAAAwC,mBAAI,AAAA,yFAAU1C;AAAd,AAAA,oBAAA0C;AAAAA;;AAAmB,gCAAA,AAAA1B,zBAACsE,yCAAW7D;;;IACvCzB,UAAI,kDAAA,lDAACuF,8CAAMvF,+DAAaE;IACxBsF,YAAU,kDAAe/C;AAAf,AACE,gBAAA,ZAAMgD;AAAN,AAAgB,IAAArE,oBAAA,4DAAA,AAAAJ,ZAAcS,4BAAQvB;AAAtB,AAAA,GAAA,AAAAmB,qBAAAD;AAAA;AAAA,AAAA,MAAA,KAAAE,MAAA;;;AAAA,AAAAC,mCAAAH;;AAAA,IAAA,AAAA,AAAA,AACE,IAAMsE,OAAK,AAACC,kDAAe3F,QAAIoF;AAA/B,AACE,GAAI,6CAAA,7CAACvE,+GAAgB6E;AACnB,OAACnD,gBAAmBE;;AACpB,GAAI,AAAC+B,qBAAKkB;AACR,GAAI,6CAAA,AAAA,7CAAC7E,kGAAM,AAACN,gBAAMmF;AAChB,OAACF,wCAAU,iBAAAI,WAAO,AAAC9B,uBAAa9D,QAAI0F;AAAzB,AAAA,wGAAAE,uCAAAA,vIAACC,iDAAAA,2DAAAA;;;AACZ,OAACL,wCACA,AAACV,mBAAc9E,QAAI0F;;;AACtB,OAACF,wCAAU,AAACV,mBAAc9E,QAAI0F;;;UATtC,AAAA,AAAAlE;;AAAhB,AAUE,oBAAI,iBAAAkB,mBAAI,GAAK,gBAAWoD,fAAWrD;AAA/B,AAAA,GAAAC;AAAAA;;AACI,QAACqD,uDAAAA,4DAAAA,PAAOtD,wCAAAA;;;AAEd,OAAO,AAACF,gBAAmBE,UACpBgD;;AAEP,OAACA;;;AApBvB,AAqBE,iBAAA,VAACD;;AAEL,AAAA;;;;;8BAAA,sCAAAQ,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA5E,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAM4E,uEAIFlG,IAAImF;AAJR,AAIW,uEAAA,hEAACgB,0DAAanG,IAAImF;;;AAJ7B,CAAA,4DAAA,5DAAMe,uEAKFlG,IAAImF,EAAExE;AALV,AAMG,IAAMT,UAAQ,AAACoF,yBAAU,iBAAA5C,mBAAI,wBAAA,oFAAA,1FAAM/B,MAAK,AAAA,8EAAKA;AAApB,AAAA,oBAAA+B;AAAAA;;AAAA,OAAA1B,gBACKS;;;IACxBzB,UAAI,kDAAA,lDAACuF,8CAAMvF,+DAAaE;AAF9B,AAGE,OAAO,AAACoD,4BAAatD,QAAImF,QAClB,WAAKiB;AAAL,AAAA,kDAAA,oDAAA,gDAAA,AAAApF,lDACQoF,kEACAlG;;;;AAZpB,CAAA,sDAAA,tDAAMgG;;AAAN,AAcA;;;;mBAAA,nBAAML,6CAGHQ;AAHH,AAIE,uBAAA,tBAAM,AAAmBA;;AACzBA;;AAEF;;;yBAAA,zBAAMN,0DAEHM;AAFH,AAGE,OAAmBA;;AAErB,AAAA,0BAAA,kCAAAL,5DAAOW;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,6DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,+DAAA,/DAAOE,0EAAU3G,IAAMC;AAAvB,AACE,IAAMD,UAAI,kDAAA,lDAACuF,8CAAMvF,+DAAa,iBAAA0C,mBAAI,AAAA,yFAAU1C;AAAd,AAAA,oBAAA0C;AAAAA;;AACI,gCAAA,AAAA1B,zBAACsE,yCAAW7D;;;IACxCsF,IAAE,AAAChH,0BAAgBC,QAAIC;AAF7B,AAGE,OAAC4F,iBAAMkB;;;AAJX,CAAA,kDAAA,lDAAOJ;;AAAP;AAAA,CAAA,4CAAA,WAAAC,vDAAOD;AAAP,AAAA,IAAAE,WAAA,AAAAtG,gBAAAqG;IAAAA,eAAA,AAAApG,eAAAoG;AAAA,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAAD,SAAAD;;;AAAA,AAMA;;;;AAAKI,oBAGH,yDAAA,AAAA,uFAAA,hJAACC,wHAAoCN","names":["sci.async/handle-libspecs","ctx","libspecs","last-ns","cljs.core/seq","vec__72585","seq__72586","first__72587","cljs.core/first","cljs.core/next","fst","libname","opts","cljs.core/Symbol","cljs.core._EQ_","env*","cnn","cljs.core/deref","sci.core/ns-name","and__5043__auto__","sci.core/find-ns","bm__72236__auto__","cljs.core/map?","js/Error","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.core/ns","cljs.core.apply","sci.impl.load/load-lib","G__72594","G__72598","cljs.core/rest","temp__5802__auto__","load-fn","vec__72599","cljs.core.nth","cljs.core/hash-map","libname*","path","sci.impl.load/lib+path","js/Promise.resolve","G__72604","res","or__5045__auto__","G__72606","G__72607","handle-opts","cljs.core.swap_BANG_","env","namespaces","cljs.core.get","the-loaded-ns","sci.impl.load/handle-require-libspec-env","src","curr-ns","sci.async/eval-string*","cljs.core/vreset!","G__72611","G__72612","G__72614","G__72615","G__72617","G__72618","sci.async/eval-ns-form","ns-form","vec__72622","seq__72623","first__72624","_ns","ns-name","ns-forms","grouped","cljs.core/group-by","cljs.core/seq?","require-forms","other-forms","p1__72620#","cljs.core.remove","ns-obj","sci.core/eval-form","cljs.core/List","cljs.core.list_STAR_","_","cljs.core.mapcat","s","rdr","sci.core/reader","cljs.core/volatile!","cljs.core.assoc","eval-next","continue","form","sci.core.parse_next","G__72629","sci.async/await","js/Promise","sci.async/await?","var_args","G__72634","sci.async/eval-string+","sci.async.eval_string_PLUS_","v","promise","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.async/require*","seq72636","G__72637","self__5754__auto__","p","sci.async/require","sci.impl.copy_vars.new_var"],"sourcesContent":["(ns sci.async\n  (:require\n   [sci.core :as sci]\n   [sci.impl.copy-vars]\n   [sci.impl.load :as load]\n   [sci.impl.namespaces]\n   [sci.impl.vars])\n  (:refer-clojure :exclude [require]))\n\n(declare eval-string*)\n\n(defn- handle-libspecs [ctx libspecs]\n  (let [last-ns (:last-ns ctx)]\n    (if (seq libspecs)\n      (let [fst (first libspecs)\n            [libname & opts] (if (symbol? fst)\n                               [fst] fst)\n            libname (if (= 'cljs.core libname)\n                      'clojure.core libname)\n            env* (:env ctx)\n            cnn (sci/ns-name @last-ns)]\n        (if (and (symbol? libname)\n                 (sci/find-ns ctx libname))\n          ;; library already loaded, the only thing left to do is process the options, we can defer to load\n          (do (sci/binding [sci/ns @last-ns]\n                (apply load/load-lib ctx nil libname opts))\n              (handle-libspecs ctx (rest libspecs)))\n          (if-let [load-fn (:async-load-fn @env*)]\n            (let [opts (apply hash-map opts)\n                  [libname* path] (if (string? libname)\n                                    (load/lib+path libname)\n                                    [libname])]\n              (.then (js/Promise.resolve (load-fn {:ns (sci/ns-name @last-ns)\n                                                   :ctx ctx\n                                                   :libname libname*\n                                                   :property-path path\n                                                   :opts opts}))\n                     (fn [res]\n                       (let [ctx (or (:ctx res) ctx)]\n                         (if (:handled res)\n                           (handle-libspecs ctx (rest libspecs))\n                           ;; TODO: handle return value\n                           (let [handle-opts\n                                 (fn [ctx res]\n                                   (let [libname (or (:libname res) libname)\n                                         env* (:env ctx)]\n                                     (swap! env*\n                                            (fn [env]\n                                              (let [namespaces (get env :namespaces)\n                                                    the-loaded-ns (get namespaces libname)]\n                                                (load/handle-require-libspec-env ctx env cnn\n                                                                                 the-loaded-ns\n                                                                                 libname opts))))))]\n                             (if-let [src (:source res)]\n                               (let [curr-ns @last-ns]\n                                 (.then (eval-string* ctx src)\n                                        (fn []\n                                          (vreset! last-ns curr-ns)\n                                          (handle-opts ctx res)\n                                          (handle-libspecs ctx (rest libspecs)))))\n                               (do\n                                 (handle-opts ctx res)\n                                 (handle-libspecs ctx (rest libspecs))))))))))\n            (do (sci/binding [sci/ns @last-ns]\n                  (apply load/load-lib ctx nil libname opts))\n                (handle-libspecs ctx (rest libspecs))))))\n      (js/Promise.resolve nil #_ns-obj))))\n\n(defn ^:private eval-ns-form [ctx ns-form]\n  (let [last-ns (:last-ns ctx)\n        [_ns ns-name & ns-forms] ns-form\n        grouped (group-by (fn [ns-form]\n                            (and (seq? ns-form)\n                                 (= :require (first ns-form)))) ns-forms)\n        require-forms (get grouped true)\n        other-forms (get grouped false)\n        ;; ignore all :require-macros for now\n        other-forms (remove #(and (seq? %) (= :require-macros (first %)))\n                            other-forms)\n        ;; TODO: there might be a more efficient way\n        ns-obj (sci/binding [sci/ns @last-ns]\n                 (sci/eval-form ctx (list 'do (list* 'ns ns-name other-forms) '*ns*)))\n        _ (vreset! last-ns ns-obj)\n        libspecs (mapcat rest require-forms)]\n    (handle-libspecs ctx libspecs)))\n\n(declare await await?)\n\n(defn eval-string*\n  [ctx s]\n  (let [rdr (sci/reader s)\n        last-ns (or (:last-ns ctx) (volatile! @sci/ns))\n        ctx (assoc ctx :last-ns last-ns)\n        eval-next (fn eval-next [res]\n                    (let [continue #(sci/binding [sci/ns @last-ns]\n                                      (let [form (sci/parse-next ctx rdr)]\n                                        (if (= :sci.core/eof form)\n                                          (js/Promise.resolve res)\n                                          (if (seq? form)\n                                            (if (= 'ns (first form))\n                                              (eval-next (await (eval-ns-form ctx form)))\n                                              (eval-next\n                                               (sci/eval-form ctx form)))\n                                            (eval-next (sci/eval-form ctx form))))))]\n                      (if (or (not (instance? js/Promise res))\n                              (await? res))\n                        ;; flatten awaited promise or non-promise\n                        (.then (js/Promise.resolve res)\n                               continue)\n                        ;; do not flatten promise results from evaluated results\n                        (continue))))]\n    (eval-next nil)))\n\n(defn eval-string+\n  \"Same as eval-string* but returns map with `:val`, the evaluation\n  result, and `:ns`, the last active namespace. The return value can\n  be passed back into `opts` to preserve the namespace state.\"\n  ([ctx s] (eval-string+ ctx s nil))\n  ([ctx s opts]\n   (let [last-ns (volatile! (or (when opts (:ns opts))\n                                @sci/ns))\n         ctx (assoc ctx :last-ns last-ns)]\n     (.then (eval-string* ctx s)\n            (fn [v]\n              {:val v\n               :ns @last-ns})))))\n\n(defn await\n  \"Mark promise to be flatteded into top level async evaluation, similar\n  to top level await.\"\n  [promise]\n  (set! (.-__sci_await ^js promise) true)\n  promise)\n\n(defn await?\n  \"Check if promise was marked with `await`.\"\n  [promise]\n  (.-__sci_await ^js promise))\n\n(defn- require* [ctx & libspecs]\n  (let [ctx (assoc ctx :last-ns (or (:last-ns ctx)\n                                    (volatile! @sci/ns)))\n        p (handle-libspecs ctx libspecs)]\n    (await p)))\n\n(def require\n  \"Async require that can be substituted for sync require by\n  `{:namespaces {'clojure.core {'require scia/require}}}`\"\n  (sci.impl.copy-vars/new-var 'require require* true))\n"],"x_google_ignoreList":[0]}