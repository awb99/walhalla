{"version":3,"sources":["pinkie/html.cljs"],"mappings":";AAOA,6BAAA,7BAAMA,kEACHC;AADH,AAEE,oBAAMA;AAAN,AAAY,oDAAA,7CAACC,gIAAM,AAACC,gDAAQ,AAACC,gBAAMH,gBACjB,AAACI,eAAKJ;;AADxB;;;AA2BF;;;;oCAAA,pCAAMK,gFAGHC;AAHH,AAIE,IAAMC,qBAAa,wBAAA,xBAAuBD,XACvB,AAAOE;AAD1B,AAEE,OAACC,8CACA,AAACC,4CAAI,WAAKC;AAAL,AAIE,IAAMC,YAAU,iBAAAC,WAAM,uBAAA,vBAAgBC;AAAtB,AAAA,CAAAD,SAAA,iBACsB,AAAeF;;AADrCE;;AAAhB,AAEE,IAAAE,2BAAa,oBAAA,pBAAeJ;AAA5B,AAAA,oBAAAI;AAAA,gBAAAA,ZAASC;AAAT,AACE,uBAAA,vBAAeJ,6BAAgBI;;AADjC;;AAEA,OAAcL,mBAAOC;GACzBL;;AAEV;;;mBAAA,nBACEU,8CAECC;AAHH,AAIE,GAAM,OAASA;AAAf,AACE,+DAAA,2CAAA,oEAAA,cAAA,rLAACC,yQAGsB,WAAKC;AAAL,AAAW,OAACf,kCAAiB,AAACgB,qBAAqBD;GAH1E,yEAMuB;AAAA,AAAA,0FAAA,mDAAA,2CAAA,2FAAA,2CAAA,wDAC2CF;;;AARpE","names":["pinkie.html/temp-comp-hack","no-kw","cljs.core.into","cljs.core.keyword","cljs.core/first","cljs.core/rest","pinkie.html/process-scripts!","el","scripts","js/Array","cljs.core.doall","cljs.core.map","script","newScript","G__48393","js/document","temp__5802__auto__","src","pinkie.html/html","html","reagent.core.create_class","this","reagent.dom/dom-node"],"sourcesContent":["(ns pinkie.html\n  (:require\n   [reagent.core :as reagent]\n   [reagent.dom]))\n\n; this was moved from notebook.\n\n(defn temp-comp-hack\n  [no-kw]\n  (when no-kw (into [(keyword (first no-kw))]\n                    (rest no-kw))))\n\n;; Scripts in Injected html are not being evaluated.\n;; This is what worked for GorillaRepl\n\n;; https://www.martinklepsch.org/posts/just-in-time-script-loading-with-react-and-clojuresript.html\n;; https://stackoverflow.com/questions/35614809/react-script-tag-not-working-when-inserted-using-dangerouslysetinnerhtml\n;; https://stackoverflow.com/questions/2592092/executing-script-elements-inserted-with-innerhtml\n;; https://stackoverflow.com/questions/42233778/why-cant-i-pass-clojurescript-functions-as-callbacks-to-javascript\n\n;; awb99 ticket on reagent: [2 tickets]\n;; https://github.com/reagent-project/reagent/issues/457\n;; https://github.com/reagent-project/reagent/issues/14#issuecomment-543582060\n\n;; A BETTER WAY FOR A HTML UI:\n;; Interface:\n;; (require-js-scripts [...])\n;; (js-render-function (cljs->js data))\n;; (js-render-function (cljs->js data props))\n\n;; TODO: refactor UI library interface to use reagent and not html\n;; THEN we can use this nice just in time loader component:\n;; https://www.martinklepsch.org/posts/just-in-time-script-loading-with-react-and-clojuresript.html\n\n;; TODO Ugh, old stylesheets persist as html so we get a string\n\n(defn process-scripts!\n  \"Setting innerHTML (dangerouslySetInnerHTML) or textContent does not\n execute scripts! Thats why we clone and replace the elements.\"\n  [el]\n  (let [scripts (->> (.getElementsByTagName el \"SCRIPT\")\n                     (.from js/Array))]\n    (doall\n     (map (fn [script]\n            ;; WTF does this not work\n            ;; (.replaceWith script (.cloneNode script true))\n            ;; Ugly cloning hack\n            (let [newScript (doto (.createElement js/document \"script\")\n                              (aset \"textContent\" (.-textContent script)))]\n              (if-let [src (.getAttribute script \"src\")]\n                (.setAttribute newScript \"src\" src))\n              (.replaceWith script newScript)))\n          scripts))))\n\n(defn ^{:category :ui}\n  html\n  \"inject html string to reagent. allows script injection\"\n  [html]\n  (when (string? html)\n    (reagent/create-class\n     {:display-name        \"htmlwrapper\"                 ;; for more helpful warnings & errors\n         ;; :component-will-unmount (fn [this])\n      :component-did-mount (fn [this] (process-scripts! (reagent.dom/dom-node this)))\n\n         ;; :component-did-update (fn [this old-argv])\n      :reagent-render      (fn []\n                             [:div {:dangerouslySetInnerHTML {:__html html}}])})))\n"],"x_google_ignoreList":[0]}