{"version":3,"sources":["goldly/sci/loader/cljs_source.cljs"],"mappings":";AAOA,gDAAA,hDAAMA,wGAAcC;AAApB,qDACMA,vBACA,0BAAA,KAAA,/BAACC,9BACD,kEAAA,KAAA,hEAACA;;AAEP,kDAAA,0DAAAC,5GAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAAA,TAAqCK;WAArC,AAAAH,4CAAAF,eAAA,lEAA2BI;AAA3B,AACE,IAAAE,oBAAKF;AAAL,AAAA,oBAAAE;AACK,UAAK,AAACC,4BAAsBH;;AADjCE;;;AAGF,iDAAA,4FAAAE,7IAAMI,0GAAkBC,IAAIC,QAAQjB,GAAGkB,KAAKC,QAAQC;AAApD,AAAA,IAAAR,aAAAD;iBAAA,AAAAE,4CAAAD,WAAA,IAAA,xEAA4DS;IAA5DP,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAV,4BAAAU;WAAAA,PAA2FQ;aAA3F,AAAAjB,4CAAAS,eAAA,pEAA+EN;AAA/E,AACE,AAAAe,0DAAAC,mCAAA,wDAAA,gCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,gCAAA,XAA4BJ,oBAAoBC;GAAhD,OAAA,KAAA,KAAA;;AACA,oBAAI,AAAChB,gDAAYE;AACf,IAAMD,OAAK,AAAA,mFAAOC;IACZkB,SAAO,AAACC,0DAAkBX,IAAIT;AADpC,AAEE,AAAOmB,YAAO,WAAKE;AAAL,AACE,IAAAC,aAAuBD;IAAvBC,iBAAA,AAAAzB,4BAAAyB;UAAA,AAAAxB,4CAAAwB,eAAA,jEAAcC;aAAd,AAAAzB,4CAAAwB,eAAA,pEAAkB7B;AAAlB,AACE,AAAAuB,0DAAAC,mCAAA,qDAAA,gCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,4BAAkCG;GAAlC,OAAA,KAAA,KAAA;;AACA,IAAAG,2BAAc,AAAA,+EAAKb;AAAnB,AAAA,oBAAAa;AAAA,AAAA,eAAAA,XAAWC;AAAX,AAGE,AAAAT,0DAAAC,mCAAA,qDAAA,gCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,4BAAA,iBAAA,1BAAyBO,mBAAahC,cAAU,AAACiC,+CAAOhB;GAAxD,OAAA,KAAA,KAAA;;AACA,AAACiB,0BAAgBlB,IAAIhB,OAAG,AAACiC,+CAAOhB,SAAS,AAAA,+EAAKC;;AAJhD;;AAKA,IAAAiB,WAAA,2CAAA,2DAAA;AAAA,AAAA,sFAAAA,8BAAAA,5GAAChB,wCAAAA,kDAAAA;;;AACnB,OAAQO,aAAO,WAAKU;AAAL,AACE,AAAAb,0DAAAC,mCAAA,uDAAA,gCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,8BAAA,RAA6BR,mBAAmBmB;GAAhD,OAAA,KAAA,KAAA;;AACA,oFAAA,kDAAA,9HAAChB,uCAAAA,sEAAAA,XAA6BH,kDAAAA;;;AACjD,oFAAA,gDAAA,5HAACG,uCAAAA,oEAAAA,XAA2BH,gDAAAA","names":["goldly.sci.loader.cljs-source/ns->filename","ns","clojure.string/replace","p__54538","map__54539","cljs.core/--destructure-map","cljs.core.get","goldly.sci.loader.cljs-source/valid-code?","code","result","and__5043__auto__","clojure.string/blank?","p__54540","vec__54541","cljs.core.nth","map__54544","goldly.sci.loader.cljs-source/on-cljs-received","ctx","libname","opts","resolve","reject","event-type","data","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","eval-p","sci.async.eval_string_PLUS_","res","map__54545","val","temp__5804__auto__","as","cljs.core.symbol","sci.core/add-import!","G__54546","e"],"sourcesContent":["(ns goldly.sci.loader.cljs-source\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info warn error]]\n   [clojure.string]\n   [sci.core :as sci]\n   [sci.async :as scia]))\n\n(defn ns->filename [ns]\n  (-> ns\n      (clojure.string/replace #\"\\.\" \"/\")\n      (clojure.string/replace #\"\\-\" \"_\")))\n\n(defn valid-code? [{:keys [code] :as result}]\n  (and code\n       (not (clojure.string/blank? code))))\n\n(defn on-cljs-received [ctx libname ns opts resolve reject [event-type {:keys [result] :as data}]]\n  (debug \"on-cljs-received: \" event-type \"data: \" data)\n  (if (valid-code? result)\n    (let [code (:code result)\n          eval-p (scia/eval-string+ ctx code)]\n      (.then eval-p (fn [res]\n                      (let [{:keys [val ns]} res]\n                        (info \"sci-cljs compile result: \" res)\n                        (when-let [as (:as opts)]\n                             ;; import class in current namespace with reference to globally\n                             ;; registed class\n                          (warn \"registering as: \" as \"in ns: \" ns \" to:\" (symbol libname))\n                          (sci/add-import! ctx ns (symbol libname) (:as opts)))\n                        (resolve {:handled false}))))\n      (.catch eval-p (fn [e]\n                       (error \"compile error for: \" libname \" error: \" e)\n                       (reject \"compile error for: \" libname))))\n    (reject \"no sci-code for: \" libname)))\n"]}