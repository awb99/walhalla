{"version":3,"sources":["shadow/lazy.cljs"],"mappings":"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","names":["shadow$lazy$ILoadable$ready_QMARK_$dyn","x__5393__auto__","m__5394__auto__","shadow.lazy/ready?","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","shadow.lazy/ILoadable","x","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.lazy/Loadable","shadow.lazy/->Loadable","modules","deref-fn","this","cljs.core/every?","shadow.lazy.goog$module$shadow$loader.loaded?","cljs.core.ex_info","shadow.lazy/loadable","thing","var_args","G__58778","shadow.lazy/load","js/Error","the-loadable","all-mods","loading-map","shadow.lazy.goog$module$shadow$loader.load-multiple","cljs.core.into_array","cljs.core.map","cljs.core/name","combined","js/goog.async.Deferred","callback-fn","err-fn","err","success-fn","seq__58788","cljs.core/seq","chunk__58789","count__58790","i__58791","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","mod","mod-deferred","shadow.lazy.goog$module$goog$object.get","call-fn","shadow.lazy.load"],"sourcesContent":["(ns shadow.lazy\n  (:require-macros [shadow.lazy])\n  (:require\n    [goog.async.Deferred]\n    [goog.object :as gobj]\n    [shadow.loader :as l]))\n\n\n(defprotocol ILoadable\n  (ready? [x]))\n\n(deftype Loadable [modules deref-fn]\n  ILoadable\n  (ready? [this]\n    (every? l/loaded? modules))\n\n  IDeref\n  (-deref [this]\n    (when-not (ready? this)\n      (throw (ex-info \"loadable not ready yet\" {:modules modules})))\n\n    (deref-fn)))\n\n(defn loadable [thing]) ;; macro\n\n;; FIXME: maybe just replace all the goog.module.ModuleManager stuff\n;; the API is just weird, can't control retries\n;; why does it retry when all code is loaded but the eval failed?\n;; FIXME: maybe don't expose the Thenable API, just take explicit args\n;; would make it easier to port this to Clojure\n(defn load\n  ([^Loadable the-loadable]\n   {:pre [(instance? Loadable the-loadable)]}\n   (let [all-mods (.-modules the-loadable)\n\n         ;; FIXME: extra path if only loading one?\n         loading-map\n         (l/load-multiple (into-array (map name) all-mods))\n\n         combined\n         (js/goog.async.Deferred.)\n\n         callback-fn\n         (.-deref-fn the-loadable)\n\n         err-fn\n         (fn [err]\n           (.errback combined err))\n\n         success-fn\n         (fn []\n           (when (ready? the-loadable)\n             (.callback combined (callback-fn))))]\n\n     (doseq [mod all-mods]\n       (let [^js mod-deferred (gobj/get loading-map (name mod))]\n         (.addCallbacks mod-deferred success-fn err-fn)))\n\n     combined))\n  ([the-loadable call-fn]\n    (-> (load the-loadable)\n        (.then call-fn)))\n  ([the-loadable call-fn err-fn]\n   (-> (load the-loadable)\n       (.then call-fn err-fn))))\n"],"x_google_ignoreList":[0]}