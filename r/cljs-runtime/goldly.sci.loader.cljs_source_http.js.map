{"version":3,"sources":["goldly/sci/loader/cljs_source_http.cljs"],"mappings":"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","names":["goldly.sci.loader.cljs-source-http/filename-to-url-goldly","filename","goldly.sci.loader.cljs-source-http/application-url","cemerick.url.url","js/window","goldly.sci.loader.cljs-source-http/filename-to-url-github","url","url-base","cljs.core.subs","clojure.string.last_index_of","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","goldly.sci.loader.cljs-source-http/filename-to-url","cljs.core.atom","goldly.sci.loader.cljs-source-http/set-github-load-mode","cljs.core/reset!","p__51770","map__51771","cljs.core/--destructure-map","cljs.core.get","goldly.sci.loader.cljs-source-http/load-module-sci","ctx","libname","ns","opts","property-path","d","goldly.sci.loader.cljs-source/ns->filename","fexpr__51772","cljs.core/deref","js/Promise","resolve","reject","c__41247__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41248__auto__","switch__41224__auto__","state_51823","state_val_51824","inst_51773","statearr-51838","statearr-51841","statearr-51842","statearr-51847","inst_51780","inst_51782","inst_51783","cljs.core/PersistentHashMap","statearr-51857","inst_51785","inst_51787","statearr-51860","cljs.core.async.impl.ioc-helpers/take!","inst_51791","inst_51792","inst_51790","inst_51796","inst_51797","inst_51798","inst_51799","statearr-51867","statearr-51869","statearr-51870","inst_51801","cljs.core/PersistentVector","inst_51802","inst_51803","inst_51804","inst_51805","inst_51806","inst_51807","inst_51808","inst_51809","inst_51810","statearr-51890","inst_51814","inst_51815","statearr-51893","inst_51817","cljs.core.async.impl.ioc-helpers/return-chan","statearr-51902","state-machine__41225__auto__","ret-value__41226__auto__","result__41227__auto__","cljs.core/keyword-identical?","ex__41228__auto__","e51909","statearr-51910","cljs.core/seq","statearr-51913","cljs.core/first","state__41249__auto__","statearr-51922","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","response","cljs_http.client.get","status","code","cljs.core._EQ_","goldly.sci.loader.cljs-source/on-cljs-received"],"sourcesContent":["(ns goldly.sci.loader.cljs-source-http\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info warn error]]\n    [cljs.core.async :refer [<! >! chan close!] :refer-macros [go]]\n    [cljs-http.client :as http]\n    [clojure.string]\n    [cemerick.url :as curl]\n    [goldly.sci.loader.cljs-source :refer [ns->filename on-cljs-received]]))\n\n(defn filename-to-url-goldly [filename]\n  (str \"/code/\" filename))\n\n(defn application-url\n  \"gets the current url, as a map\"\n  []\n  (curl/url (-> js/window .-location .-href)))\n\n(defn filename-to-url-github [filename]\n  (let [url (application-url)\n        url-base (subs url (clojure.string/last-index-of url \"/\"))]\n    (info \"github url-base: \" url-base)\n    (str url-base filename)))\n\n(def filename-to-url\n  (atom filename-to-url-goldly))\n\n(defn set-github-load-mode []\n  (reset! filename-to-url filename-to-url-github))\n\n\n(defn load-module-sci [{:keys [ctx libname ns opts property-path] :as d}]\n  ; libname: bongo.trott ; the ns that gets compiled\n  ; ns:  demo.notebook.applied-science-jsinterop ; the namespace that is using it\n  ; opts: {:as bongo, :refer [saying]}\n  ; ctx is the sci-context\n  (info \"load-sci-src\" \"libname:\" libname \"ns: \" ns \"opts:\" opts)\n  (let [filename (-> libname str ns->filename (str \".cljs\"))\n        url (@filename-to-url filename)]\n    (info \"loading filename: \" filename)\n    (js/Promise.\n     (fn [resolve reject]\n       (go (let [opts (or opts {:with-credentials? false})\n                 response (<! (http/get url opts))\n                 status (:status response)\n                 code (:body response)]\n             (info \"load-module-sci-cljs url: \" url \"status: \" status)\n             (if (= status 200)\n               (on-cljs-received ctx libname ns opts resolve reject [:http-load {:result {:code code}}])\n               (reject (str \"failed to load: \" libname \" status: \" status \" url: \" url))\n               )))))))\n"]}