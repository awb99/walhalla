{"version":3,"sources":["modular/oauth2/authorize/userinfo.cljs"],"mappings":";AAQA,yDAAA,zDAACA,kIAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBG;eAAnB,AAAAF,4CAAAD,WAAA,IAAA,tEAAqBI;AAArB,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,oCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,qBAA2BH;GAA3B,OAAA,KAAA,KAAA;;AACA,IAAMI,eAAO,AAACC,4CAAoBL;IAC5BM,YAAI,AAAA,mFAAOF;AADjB,AAEE,uBAAA,mFAAA,8EAAA,xLAACG,qKAAmBP,SAASM;;AAC/BR;;AAEH,yDAAA,zDAACR,iIAEA,cAAAkB,HAAKV;AAAL,AAAA,IAAAW,aAAAD;QAAA,AAAAX,4CAAAY,WAAA,IAAA,/DAASV;eAAT,AAAAF,4CAAAY,WAAA,IAAA,tEAAWT;WAAX,AAAAH,4CAAAY,WAAA,IAAA,lEAAoBC;AAApB,AACE,IAAAC,aACM,AAACG,uCAAed,SAASU;IAD/BC,iBAAA,AAAAjB,4BAAAiB;WAAA,AAAAhB,4CAAAgB,eAAA,lEAAcC;YAAd,AAAAjB,4CAAAgB,eAAA,nEAAmBE;AAAnB,AAEE,AAAAZ,0DAAAC,mCAAA,qDAAA,oCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,mBAAyBH,SAASY,KAAKC;GAAvC,OAAA,KAAA,KAAA;;AACA,uBAAA,mFAAA,1GAACN,oLAA4BP;;6CACzBF,nBACA,sBAAA,mFAAA,iEAAA,1KAACiB,iKAAkBf,sEAAgBY,jQACnC,uQAAA,mFAAA,iEAAA,pZAACG,2YAAkBf,wEAAiBa","names":["re_frame.core.reg_event_db","p__41318","p__41319","map__41322","cljs.core/--destructure-map","cljs.core.get","vec__41323","cljs.core.nth","db","_","provider","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","config","modular.oauth2.provider/get-provider-config","uri","re-frame.core/dispatch","p__41343","vec__41344","data","map__41351","user","email","modular.oauth2.provider/parse-userinfo","cljs.core/assoc-in"],"sourcesContent":["(ns modular.oauth2.authorize.userinfo\n  (:require\n   [taoensso.timbre :refer-macros [info error]]\n   [clojure.string :as str]\n   [ajax.core :as ajax]\n   [re-frame.core :refer [reg-event-db reg-event-fx dispatch]]\n   [modular.oauth2.provider :refer [get-provider-config parse-userinfo]]))\n\n(reg-event-db\n :oauth2/get-user\n (fn [{:keys [db]} [_ provider]]\n   (info \"oauth/after-login:\" provider)\n   (let [config (get-provider-config provider)\n         uri (:user config)]\n     (dispatch [:request provider uri :oauth2/set-user]))\n   db))\n\n(reg-event-db\n :oauth2/set-user\n (fn [db [_ provider data]]\n   (let [{:keys [user email]}\n         (parse-userinfo provider data)]\n     (info \"oauth2/set-user:\" provider user email)\n     (dispatch [:oauth2/logged-in provider])\n     (-> db\n         (assoc-in  [:token provider :user] user)\n         (assoc-in  [:token provider :email] email)))))"],"x_google_ignoreList":[0]}