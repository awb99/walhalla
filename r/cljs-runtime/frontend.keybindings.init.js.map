{"version":3,"sources":["frontend/keybindings/init.cljs"],"mappings":";AAOA,AAAKA,oCAAQ,6CAAA,7CAACC;AACd,+BAAA,/BAAMC;AAAN,AACE,AAACC,mDAAMH,kCAAQI;;AACf,OAACC,gDAAQ,4CAAA,AAAAC,gBAAMN;;AAEjB,AAAKO,0CAAc,6CAAA,7CAACN;AAEpB,4CAAA,oDAAAO,hGAAMI,yGAA2DK;AAAjE,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAAA,bAAqDO;SAArD,AAAAL,4CAAAF,eAAA,hEAA+BI;cAA/B,AAAAF,4CAAAF,eAAA,rEAAkCK;YAAlC,AAAAH,4CAAAF,eAAA,nEAA0CM;AAA1C,AACE,AAAAG,0DAAAC,mCAAA,qDAAA,4BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,qCAAA,oBAAA,1BAAqCL,kBAAkBD,iBAAiBG;GAAxE,OAAA,KAAA,MAAA;;AACA,GAAM,EAAI,UAAA,TAAMF,oBACN,mDAAA,AAAAT,nDAACe,6CAAEN,sBAAOR;AADpB,AAEE,AAACe,uBAASR;;AACV,OAAiBG;;AAHnB;;;AAKF,AAAKM,qCAAS,6CAAA,7CAACtB;AAEf;;;;;;qCAAA,6CAAAuB,lFAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAf,4BAAAe;iBAAAA,bAKiCT;SALjC,AAAAL,4CAAAc,eAAA,hEAKWZ;cALX,AAAAF,4CAAAc,eAAA,rEAKcX;YALd,AAAAH,4CAAAc,eAAA,nEAKsBV;AALtB,AAME,AAAAG,0DAAAC,mCAAA,wDAAA,4BAAA,KAAA,GAAA,gDAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,mBAA2BP,GAAGC;GAA9B,OAAA,KAAA,MAAA;;AAGA,OAACa,wBAAUd,GAAG,AAACX,+BAAI,AAAC0B,gDAAQhB,0CAAgBI;;AAE9C,mDAAA,nDAAea,8GACZC;AADH,AAEE,AAAAZ,0DAAAC,mCAAA,qDAAA,4BAAA,KAAA,GAAA,gDAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,+BAAsC,AAACW,gBAAMD;GAA7C,OAAA,KAAA,MAAA;;AACA,OAACE,8CAAM,iBAAAC,qBAAA,yEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAu6E0C,AAAAc,sBAAAnB;IAv6E1CM,qBAAA,AAAAT,gBAAAQ;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,SAAA,AAAAI,eAAAL,gBAAAI,pCAAM9B;AAAN,AAAA,AAAA,AAAAgC,uBAAAJ,SACE,AAACf,mCAASb;;AADZ,eAAA,CAAA8B,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,+DAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,SAAA,AAAAS,gBAAAhB,rBAAMrB;AAAN,AAAA,OAAAsC,sDAAA,AAAAH,+DAAA,AAAAI,eAAAlB,rHACE,AAACR,mCAASb;;;AADZ;;;;GAAA,KAAA;;AAAA,AAAA,OAAAoB,mBAASH","names":["frontend.keybindings.init/current","cljs.core.atom","frontend.keybindings.init/id","cljs.core.swap_BANG_","cljs.core/inc","cljs.core.keyword","cljs.core/deref","frontend.keybindings.init/current-scope","p__44938","map__44940","cljs.core/--destructure-map","cljs.core.get","frontend.keybindings.init/reframe-handler","kb","handler","scope","keybinding","evt","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core._EQ_","re-frame.core/dispatch","frontend.keybindings.init/BINDINGS","p__44958","map__44959","frontend.keybindings.init/bind-key","keybind.core/bind!","cljs.core.partial","frontend.keybindings.init/init-keybindings!","keybindings","cljs.core/count","cljs.core.doall","iter__5523__auto__","s__44976","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__44978","cljs.core/chunk-buffer","i__44977","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44975","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.keybindings.init\n  (:require\n   [taoensso.timbre :refer-macros [debug debugf info infof error]]\n   [re-frame.core :as r :refer [reg-event-db dispatch]]\n   [keybind.core :as key]))\n\n; https://github.com/piranha/keybind\n(def current (atom 0))\n(defn id []\n  (swap! current inc)\n  (keyword (str @current)))\n\n(def current-scope (atom nil))\n\n(defn reframe-handler [{:keys [kb handler scope] :as keybinding} evt]\n  (info \"keybinding triggered scope: \" scope \"handler: \" handler \" evt: \" evt)\n  (when (or (nil? scope)\n            (= scope @current-scope))\n    (dispatch handler)\n    (.preventDefault evt))) ; important, so that the \"s\" in \"alt-g s\" does not end in editor\n\n(def BINDINGS (atom {}))\n\n(defn bind-key\n  \"Binds a sequence of button presses, specified by `spec`, to `cb` when\n  pressed. Keys must be unique per `spec`, and can be used to remove keybinding\n  with `unbind!`.\n  `spec` format is emacs-like strings a-la \\\"ctrl-c k\\\", \\\"meta-shift-k\\\", etc.\"\n  [{:keys [kb handler scope] :as keybinding}]\n  (debugf \"binding %s to %s\" kb handler)\n  #_(swap! BINDINGS\n           key/bind kb (id) (partial reframe-handler keybinding))\n  (key/bind! kb (id) (partial reframe-handler keybinding)))\n\n(defn ^:export init-keybindings!\n  [keybindings]\n  (infof \"registering %s keybindings..\" (count keybindings))\n  (doall (for [kb keybindings]\n           (bind-key kb))))\n\n"],"x_google_ignoreList":[0]}