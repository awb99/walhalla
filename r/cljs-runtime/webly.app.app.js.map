{"version":3,"sources":["webly/app/app.cljs"],"mappings":"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","names":["webly.app.app/mount-app","reagent.dom.render","webly.app.views/webly-app","js/document","webly.app.app/before-load","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","re-frame.core/dispatch","webly.app.app/after-load","cljs.core/enable-console-print!","re-frame.core/clear-subscription-cache!","webly.app.app/remove-spinner","spinner","body-classes","webly.app.app/setup-bidi","user-routes-api","user-routes-app","routes-frontend","webly.app.routes/make-routes-frontend","routes-backend","webly.app.routes/make-routes-backend","re_frame.core.reg_event_db","p__47945","vec__47946","cljs.core.nth","db","_","static?","routes","cljs.core.get_in","start-user-app","webly.app.app/start","mode","cljs.core.println","cljs.core._EQ_","main-path","asset-path","frontend.routes/set-main-path!"],"sourcesContent":["(ns webly.app.app\n  (:require\n   [reagent.dom]\n   ;[cljs.pprint]\n   [taoensso.timbre :refer-macros [info warn]]\n   [re-frame.core :refer [clear-subscription-cache! dispatch reg-event-db reg-sub]]\n   ; side-effects\n   [ajax.core :as ajax] ; https://github.com/JulianBirch/cljs-ajax used by http-fx\n   [day8.re-frame.http-fx]\n   [modular.oauth2]\n   [modular.ws.events]\n   [modular.ws.core]\n   ; frontend\n   [frontend.config.events]\n   [frontend.config.subscription]\n   [frontend.routes.events]\n   [frontend.css.events]\n   [frontend.css.loading]\n   [frontend.css.subscriptions]\n   [frontend.keybindings.events]\n   [frontend.analytics.events]\n   [frontend.settings.events]\n   [frontend.settings.subscriptions]\n   [frontend.dialog]\n   [frontend.routes :refer [set-main-path!]]\n   ; webly\n   [webly.build.lazy]\n   [webly.app.tenx.events]\n   [webly.app.views :refer [webly-app]]\n   [webly.app.events]\n   [webly.app.routes :refer [make-routes-frontend make-routes-backend]]\n   [webly.app.status.page] ; side-effects\n\n   [webly.build.prefs :refer [pref]]\n;   [webly.app.static :refer [make-static-adjustment]]\n;   [frontend.config.core :refer [webly-mode-atom]]\n   ))\n\n(defn mount-app []\n  (reagent.dom/render [webly-app]\n                      (.getElementById js/document \"app\")))\n\n;; see:\n;; https://shadow-cljs.github.io/docs/UsersGuide.html#_lifecycle_hooks\n;; https://code.thheller.com/blog/shadow-cljs/2019/08/25/hot-reload-in-clojurescript.html\n\n;; configuration is done EITHER\n;; - EITHER via METADATA\n;; - OR shadow-cljs.edn :devtools section   \n\n;; before-reload is a good place to stop application stuff before we reload.\n\n(defn ^:dev/before-load\n  before-load []\n  (info \"before-load\")\n  (dispatch [:webly/before-load]))\n\n(defn ^:dev/after-load\n  after-load []\n  (enable-console-print!)\n  (info \"after-load\")\n\n  (info \"clearing reframe subscription cache..\")\n  (clear-subscription-cache!)\n\n  (info \"mounting webly-app ..\")\n  (dispatch [:ga/event {:category \"webly\" :action \"mounted\" :label 77 :value 13}])\n  (webly.app.app/mount-app))\n\n(defn remove-spinner []\n  (let [spinner (.. js/document (getElementById \"spinner\"))\n        body-classes (.. js/document -body -classList)]\n    ;(println \"spinner: \" spinner)\n    ;(println \"cl: \" body-classes)\n    (.. spinner (remove))\n    (when (.contains body-classes \"loading\")\n      (.remove body-classes \"loading\"))))\n\n(defn setup-bidi [user-routes-api user-routes-app]\n  (let [routes-frontend (make-routes-frontend user-routes-app)\n        routes-backend (make-routes-backend user-routes-app user-routes-api)]\n    (dispatch [:bidi/init routes-frontend routes-backend])))\n\n(reg-event-db\n :webly/app-after-config-load\n (fn [db [_ static?]]\n   (let [routes (get-in db [:config :webly :routes])\n         start-user-app (get-in db [:config :webly :start-user-app])]\n     (info \"webly config after-load\")\n     (remove-spinner)\n     (dispatch [:webly/status :configuring-app])\n     (setup-bidi (:api routes) (:app routes))\n     (dispatch [:ga/init])\n     (dispatch [:keybindings/init])\n     (dispatch [:css/init])\n     (dispatch [:settings/init])\n     (if static?\n       (warn \"websockets are deactivated in static mode.\")\n       (dispatch [:ws/init]))\n     (dispatch [:webly/set-status :configured? true])\n\n     (if start-user-app\n       (do (info \"starting user app: \" start-user-app)\n           (dispatch start-user-app))\n       (warn \"no user app startup defined.\"))\n     ;(dispatch [:webly/status :running])\n     )\n   db))\n\n(defn ^:export start [mode]\n  (enable-console-print!)\n  (println \"webly starting mode:\" mode)\n  (info \"webly starting mode: \" mode \" prefs: \" (pref))\n  (let [static? (= mode \"static\")\n        main-path (:main-path (pref))\n        asset-path (:asset-path (pref))]\n    (when static?\n      (set-main-path! main-path))\n    (dispatch [:reframe10x-init])\n    (dispatch [:webly/status :route-init])\n    (dispatch [:webly/status :loading-config])\n    (dispatch [:config/load :webly/app-after-config-load static? main-path])\n    (mount-app)))\n"],"x_google_ignoreList":[0]}