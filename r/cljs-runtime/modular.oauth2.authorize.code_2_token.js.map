{"version":3,"sources":["modular/oauth2/authorize/code_2_token.cljs"],"mappings":";AAOA,oDAAA,pDAAOA;AAAP,AACE,OAAA,AAAIC;;AAEN,yDAAA,zDAACC,wIAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBG;QAAnB,AAAAF,4CAAAD,WAAA,IAAA,/DAAqBI;WAArB,AAAAH,4CAAAD,WAAA,IAAA,lEAAuBK;AAAvB,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,wCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,gCAAA,FAAoCJ,iBAAiBC;GAArD,OAAA,KAAA,KAAA;;AACA,IAAMK,WAAS,AAACC,4CAAoBP;IAC9BQ,OAAK,AAAA,mFAAOP;IADlBI,aAEwC,kDAAA,mFAAA,wDAAA,7LAACM,+CAAOb,uMAAoBE;IAFpEK,iBAAA,AAAAX,4BAAAW;gBAAA,AAAAV,4CAAAU,eAAA,vEAEcI;oBAFd,AAAAd,4CAAAU,eAAA,3EAEwBK;AAFxB,AAGE,AAAAR,0DAAAC,mCAAA,qDAAA,wCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,oCAAA,LAAqCI,kBAAkBC;GAAvD,OAAA,KAAA,KAAA;;AAHF,kDAAA,mDAAA,iEAAA,2CAAA,uDAAA,mDAAA,mDAAA,oBAAA,wDAAA,2CAAA,+DAAA,0DAAA,0KAAA,2DAAA,OAAA,iOAAA,iEAAA,mFAAA,oGAAA,gEAAA,mFAAA,p1CAIaX,gcAGsBE,uDACJQ,2EACQ,AAACI,qCAAaZ,EAAE,AAACZ,0MAGvB,+BAAA,2CAAA,8DAAA,xIAACyB,oYAC0Bb,yOACPA","names":["modular.oauth2.authorize.code-2-token/current-url","js/window","re_frame.core.reg_event_fx","p__41336","p__41337","map__41338","cljs.core/--destructure-map","cljs.core.get","vec__41339","cljs.core.nth","db","_","p","data","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","map__41351","provider","modular.oauth2.provider/get-provider-config","code","client-id","client-secret","cljs.core.get_in","modular.oauth2.provider/url-redirect","ajax.core/json-response-format"],"sourcesContent":["(ns modular.oauth2.authorize.code-2-token\n  (:require\n   [taoensso.timbre :refer-macros [info error]]\n   [re-frame.core :as rf]\n   [ajax.core :as ajax]\n   [modular.oauth2.provider :refer [get-provider-config url-redirect]]))\n\n(defn  current-url []\n  (-> js/window .-location .-href))\n\n(rf/reg-event-fx\n :oauth2/code->token\n (fn [{:keys [db]} [_ p data]]\n   (info \"getting token for provider \" p \" with data: \" data)\n   (let [provider (get-provider-config p)\n         code (:code data)\n         {:keys [client-id client-secret]} (get-in db [:config :oauth2 p])]\n     (info \"oauth2/code->token .. code: \" code \" clientId \" client-id)\n     {:db       db\n      :http-xhrio {:method :get\n                   :uri    \"/api/oauth2/token\" ;  \"https://github.com/login/oauth/access_token\"\n                   :params {:provider p\n                            :code code\n                            :url-redirect (url-redirect p (current-url))}\n                   ;:format (ajax/json-request-format {:keywords? true})\n                   :timeout         5000                     ;; optional see API docs\n                   :response-format (ajax/json-response-format {:keywords? true});; IMPORTANT!: You must provide this.\n                   :on-success      [:oauth2/authorize-success p]\n                   :on-failure      [:oauth2/save-error p]}})))\n\n"],"x_google_ignoreList":[0]}