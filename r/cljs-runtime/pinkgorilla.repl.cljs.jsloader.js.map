{"version":3,"sources":["pinkgorilla/repl/cljs/jsloader.cljs"],"mappings":";;;;AAOA,+CAAA,/CAAMA,sGAAeC;AAArB,AACE,OAACC,+CAAO,eAAAC,JAAKG;AAAL,AAAA,IAAAF,aAAAD;oBAAA,AAAAE,4CAAAD,WAAA,IAAA,3EAAUG;UAAV,AAAAF,4CAAAD,WAAA,IAAA,jEAAkBI;AAAlB,AACE,oBAAI,CAACD,8CAAAA,gDAAAA;AAASD;;AAAI,OAACG,6CAAKH,IAAIE;;GADtC,iCAGQP;;AAEV,yCAAA,zCAAMS,0FAASC;AAAf,AACE,IAAMC,SAAO,gDAAA,hDAACC;IACRC,IAAE,2BAAA,yDAAA,qBAAIH,rBACAI,zDACAC,3BACAC;AAJZ,AAKE,AAAOH,OACA;mCAAOI;AAAP,AAEE,oCAAA,7BAACC,sBAAOP;;;IAFHM;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;CAGP;mCAAOA;AAAP,AACE,oCAAA,7BAACC,sBAAOP;;;IADHM;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAEdN;;AAEJ;;;;;;;;;2CAAA,3CAAMQ,8FAQHnB,QAAQoB,iBAAiBC,aAAaC;AARzC,AASE,IAAMX,SAAO,gDAAA,hDAACC;AAAd,AACE,+DAAA,2CAAA,nGAACW,uLACsB,WAAKC;AAAL,AACE,IAAMC,aAAW,AAAC1B,6CAAcC;IAC1B0B,kBAAgB,AAACZ,qBAAQ,AAACa,4CAAIZ,yDACA,AAACD,qBAAQW;IACvCZ,IAAE,AAACe,+BAAiBF;AAH1B,AAIE,AAAMG,YAAW,CAAA,2DAAoBJ;;AACrC,OAAOZ,OACA;mCAAOI;AAAP,AAEE,oCAAA,7BAACC,sBAAOP;;;IAFHM;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;CAGP;mCAAOA;AAAP,AACE,oCAAA,7BAACC,sBAAOP;;;IADHM;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;GAXzC,yEAakB,WAAKjB,YAAQoB,qBAAiBC,iBAAaC;AAA3C,AACE,IAAAQ,WAAA,AAAAC,gBAAOpB;AAAP,AAAA,GAAA,AAAAqB,6CAAA,KAAAF;AACOV;;AADP,GAAA,AAAAY,6CAAA,uDAAAF;AAESR;;AAFT,AAGED;;;;;;AAE1B,6CAAA,7CAAMY;AAAN,AAAA;;AAGA,wDAAA,xDAAMC,wHAAkBC;AAAxB,AACE;AAAA,AACE,IAAMC,iBAAS,AAACC,2DAAMC,OAAUH;AAAhC,AACE,YAAA,ZAAMN,sBAAqBM,EAAG,kCAAA,cAAA,9BAAIC;;AAClCA;;;AAEN,yCAAA,zCAAMG,0FACHvC,QAAQoB;AADX,AAAA,4JAAA,mFAAA,8CAAA,wBAAA,mFAAA,8CAAA,5VAEGD,yCAAUnB,QAAQoB;;AAIrB,2CAAA,3CAAMoB;AAAN,AACE,IAAMC,WAASC;AAAf,AACED","names":["pinkgorilla.repl.cljs.jsloader/filter-loaded","scripts","cljs.core.reduce","p__49643","vec__49647","cljs.core.nth","acc","loaded?","src","cljs.core.conj","pinkgorilla.repl.cljs.jsloader/load-js","url","status","reagent.core.atom","p","cljs.core/clj->js","goog.html.legacyconversions/trustedResourceUrlFromString","goog.net.jsloader/safeLoad","args","cljs.core/reset!","pinkgorilla.repl.cljs.jsloader/js-loader","show-once-loaded","show-loading","show-error","reagent.core.create_class","_","not-loaded","not-loaded-safe","cljs.core.map","goog.net.jsloader/safeLoadMany","js/console","G__49705","cljs.core/deref","cljs.core._EQ_","pinkgorilla.repl.cljs.jsloader/load-always","pinkgorilla.repl.cljs.jsloader/browser-defined?","s","defined?","pinkgorilla.repl.cljs.jsloader.goog$module$goog$object.get","js/window","pinkgorilla.repl.cljs.jsloader/with-js","pinkgorilla.repl.cljs.jsloader/host-name","hostname","js/window.location.hostname"],"sourcesContent":["(ns pinkgorilla.repl.cljs.jsloader\n  (:require\n   [reagent.core :as r]\n   [goog.object :as g]\n   [goog.net.jsloader :as jsl]\n   [goog.html.legacyconversions :as conv]))\n\n(defn filter-loaded [scripts]\n  (reduce (fn [acc [loaded? src]]\n            (if (loaded?) acc (conj acc src)))\n          []\n          scripts))\n\n(defn load-js [url]\n  (let [status (r/atom false)\n        p (-> url\n              clj->js\n              conv/trustedResourceUrlFromString\n              jsl/safeLoad)]\n    (.then p\n           (fn [& args]\n            ;(js/console.info \"Loaded:\" not-loaded)\n             (reset! status true))\n           (fn [& args]\n             (reset! status :error)))\n    status))\n\n(defn js-loader\n  \"Load a supplied list of Javascript files and render a component\n   during loading and another component as soon as every script is\n   loaded.\n\n   Arg map: {:scripts {loaded-test-fn src}\n             :loading component\n             :loaded component}\"\n  [scripts show-once-loaded show-loading show-error]\n  (let [status (r/atom false)]\n    (r/create-class\n     {:component-did-mount (fn [_]\n                             (let [not-loaded (filter-loaded scripts)\n                                   not-loaded-safe (clj->js (map conv/trustedResourceUrlFromString\n                                                                 (clj->js not-loaded)))\n                                   p (jsl/safeLoadMany not-loaded-safe)]\n                               (.log js/console (str \"loading js: \" not-loaded))\n                               (.then p\n                                      (fn [& args]\n                                            ;(js/console.info \"Loaded:\" not-loaded)\n                                        (reset! status true))\n                                      (fn [& args]\n                                        (reset! status :error)))))\n      :reagent-render (fn [scripts show-once-loaded show-loading show-error]\n                        (case @status\n                          true show-once-loaded\n                          :error show-error\n                          show-loading))})))\n\n(defn load-always []\n  false)\n\n(defn browser-defined? [s]\n  (fn []\n    (let [defined? (g/get js/window s)]\n      (.log js/console \"symbol \" s  (if defined? \" is defined\" \" is NOT DEFINED!\"))\n      defined?)))\n\n(defn with-js\n  [scripts show-once-loaded]\n  [js-loader scripts show-once-loaded\n   [:p \"loading js ..\"]\n   [:p \"load-js error!\"]])\n\n(defn host-name []\n  (let [hostname js/window.location.hostname]\n    hostname))\n\n"],"x_google_ignoreList":[0]}