{"version":3,"sources":["frontend/routes.cljs"],"mappings":"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","names":["js/frontend","js/frontend.routes","js/frontend.routes.static-main-path-atom","frontend.routes/static-main-path-atom","cljs.core.atom","frontend.routes/set-main-path!","path","safe-path","clojure.string/ends-with?","cljs.core.subs","cljs.core/count","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/reset!","frontend.routes/entry-path-adjust","path-adjusted","cljs.core/deref","clojure.string/blank?","clojure.string/replace","frontend.routes/html-static-adjust","frontend.routes/window-query-params","js/window","cemerick.url.url","js/frontend.routes.routes","frontend.routes/routes","reagent.core.atom","var_args","G__44722","frontend.routes/link","js/Error","handler","url","bidi.bidi/path-for","route-params","cljs.core.apply","cljs.core.partial","frontend.routes/map->params","m","add","p__44735","vec__44736","cljs.core.nth","acc","k","v","cljs.core.conj","cljs.core.reduce","p__44748","map__44750","cljs.core/--destructure-map","cljs.core.get","frontend.routes/route->url","query-params","url-handler","cljs.core/empty?","frontend.routes.link","cemerick.url/map->query","js/frontend.routes.current","frontend.routes/current","frontend.routes/reset-current!","trigger","match","cljs.core._EQ_","frontend.routes/path->route","routes","path-with-qp","options","map__44777","query","cljs.core.map","p__44782","vec__44783","cljs.core.keyword","cljs.core.into","bidi.bidi/match-route*","map__44787","tag","route","or__5045__auto__","frontend.routes/pushy-goto!","G__44798","frontend.routes/hard-redirect","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","frontend.routes/on-url-change","seq44803","G__44805","cljs.core/first","cljs.core/next","self__5754__auto__","frontend.routes/history","pushy.core/pushy","frontend.routes/hard-redirect!","frontend.routes/params->map","params","pairs","cljs.core.partition","p__44820","vec__44821","cljs.core.assoc","frontend.routes/goto-route!","frontend.routes/goto!","seq44835","G__44836","params-map","cljs.core.dissoc","frontend.routes/nav!","map__44850","h","G__44858","frontend.routes/start-router!","routes-frontend","frontend.routes.start_router_BANG_","entry-path","and__5043__auto__","frontend.routes/G","handler-str","handler-kw","frontend.routes/current-route"],"sourcesContent":[" (ns frontend.routes\n   (:require\n    [clojure.string :as str]\n    [taoensso.timbre :refer-macros [info infof error]]\n    [reagent.core :as r]\n    [bidi.bidi :as bidi]\n    [pushy.core :as pushy]\n    [cemerick.url :as url]))\n\n(defonce static-main-path-atom (atom \"\"))\n\n(defn set-main-path! [path]\n  (let [safe-path (if (str/ends-with? path \"/\")\n                    (subs path 0 (dec (count path)))\n                    path)]\n    (info \"set-main-path!\" safe-path)\n    (reset! static-main-path-atom safe-path)))\n\n\n(defn entry-path-adjust [path]\n  (let [path-adjusted (if (str/blank? @static-main-path-atom)\n                        path\n                        (str/replace path @static-main-path-atom \"\"))]\n    (info \"entry-path-adjust path: \" path \" adjusted: \" path-adjusted)\n    path-adjusted))\n\n(defn html-static-adjust [path]\n  (if (str/ends-with? path \"/index.html\")\n    (str/replace path \"/index.html\" \"/\")\n    path))\n\n; bidi does not handle query params\n; idea how to solve the problem: https://github.com/juxt/bidi/issues/51\n\n(defn window-query-params []\n  (info \"window query params: href: \" (.. js/window -location -href))\n  (-> (.. js/window -location -href)\n      (url/url)\n      ; (url/query->map)\n      :query))\n\n;; not yet used\n;; todo : hard redirects for backend routes or exernal links\n\n(defonce routes (r/atom nil))\n\n(defn link\n  ([handler]\n   ;(info \"link for handler: \" handler \"no-route-params\")\n   (let [url (bidi/path-for @routes handler)]\n     ;(info \"bidi link url: \" url)\n     url))\n  ([handler route-params]\n   ;(info \"link for handler: \" handler \"route-params: \" route-params)\n   (let [url (apply (partial bidi/path-for @routes) handler route-params)]\n     ;(info \"bidi link url: \" url)\n     url)))\n\n(defn- map->params [m]\n  (let [add (fn [acc [k v]]\n              (conj acc k v))]\n    (reduce add [] m)))\n\n(defn route->url [{:keys [handler query-params route-params]}]\n  (let [url-handler (if (empty? route-params)\n                      (link handler)\n                      (link handler (map->params route-params)))]\n    (if (empty? query-params)\n      url-handler\n      (str url-handler \"?\" (url/map->query query-params)))))\n\n(defonce current (r/atom nil))\n\n(defn reset-current! [trigger match]\n  (when (not (= match @current))\n    (info \"reset-current! \" match \"trigger: \" trigger)\n    (reset! current match)))\n\n;; take some tricks from this \n;; https://github.com/timgilbert/haunting-refrain-posh/blob/develop/src/cljs/haunting_refrain/fx/navigation.cljs\n\n; pushy\n\n(defn- path->route\n  [routes path-with-qp options]\n  (let [{:keys [path query]} (cemerick.url/url path-with-qp)\n        query-params (->> query\n                          (map (fn [[k v]] [(keyword k) v]))\n                          (into {}))\n        match (bidi/match-route* routes path options)]\n        ;(bidi/match-route @routes path)\n    ;(info \"match: \" match) \n    ; {{} nil, \n    ;   :route-params {:location \"Bali\"}, \n    ;   :handler :demo/party\n    ;   :tag  :wunderbar}\n    (if match\n      (let [{:keys [handler route-params tag]} match\n            route {:handler handler\n                   :query-params query-params\n                   :route-params (or route-params {})\n                   :tag (or tag nil)}]\n        route)\n      (do (error \"no route found for \" path-with-qp)\n          {:handler :webly/unknown-route\n           :url path-with-qp}))))\n\n(declare hard-redirect)\n\n(defn pushy-goto! [match]\n  (reset-current! \"pushy/goto\" match)\n  (when (=  :webly/unknown-route (:handler match))\n    (hard-redirect (:url match))))\n\n(defn on-url-change [path & options]\n  (info \"url did change to: \" path) ; \" options:\" options  \n  (let [options (or options {})\n        path (entry-path-adjust path)\n        path (html-static-adjust path)]\n    (info \"adjusted path: \" path)\n    ;(info \"routes: \" @routes)\n    ;(info \"options:  \" options)\n    (path->route @routes path options))) ; options\n\n; see: \n; https://github.com/clj-commons/pushy\n\n(def history\n  (pushy/pushy pushy-goto! on-url-change))\n\n(defn hard-redirect! [url]\n  (info \"hard redirect to: \" url)\n  (pushy/stop! history)\n  (set! (.-location js/window) url))\n\n; bidi swagger:\n; https://github.com/pink-junkjard/bidi-swagger\n\n; goto! \n\n(defn- params->map [params]\n  (let [pairs (partition 2 params)\n        add (fn [m [k v]]\n              (assoc m k v))]\n    (reduce add {} pairs)))\n\n(defn goto-route! [route]\n  (let [url (route->url route)]\n    (infof \"bidi/goto route: %s url: %s\" route url)\n    (reset-current! \"goto-route\" route)\n    (pushy/set-token! history url)))\n\n(defn goto! [handler & params]\n  (let [params-map (params->map params) ; params is a map without {} example:  :a 1 :b 2  \n        ; _ (error \"params map: \" params-map)\n        route-params (dissoc params-map :query-params :tag)\n        query-params (or (:query-params params-map) {})\n        tag (:tag params-map)\n        route {:handler handler\n               :route-params route-params\n               :query-params query-params\n               :tag tag}]\n    (goto-route! route)))\n\n(defn nav! [url]\n  (let [{:keys [handler] :as h} (path->route @routes url {})]\n    (info \"nav!: \" h) ; {:handler :demo/help, :query-params {}, :route-params {}}\n    (if (= handler :webly/unknown-route)\n      (set! (.-location js/window) url)\n      (do (reset-current! \"bidi/goto!\" h)\n          (pushy/set-token! history url)))))\n\n(defn start-router!\n  ([routes-frontend]\n   (start-router! routes-frontend \"\"))\n  ([routes-frontend entry-path]\n  (info \"bidi init - routes: \" routes-frontend)\n  (reset! routes routes-frontend)\n\n  (when (and entry-path\n             (not (str/blank? entry-path)))\n     (info \"bidi init - entry path: \" entry-path)\n     (set-main-path! entry-path))\n  \n  (info \"starting pushy\")\n  (pushy/start! history) ; link url => state\n  nil))\n\n; here for testing of github pages\n(defn ^:export\n  G [handler-str]\n  (info \"handler-str: \" handler-str)\n  (let [handler-kw (keyword handler-str)]\n    (info \"handler-kw: \" handler-kw)\n    (goto! handler-kw)))\n\n\n(defn current-route []\n  @current)\n"],"x_google_ignoreList":[0]}