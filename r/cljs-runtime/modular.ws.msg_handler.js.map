{"version":3,"sources":["modular/ws/msg_handler.cljs"],"mappings":"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","names":["js/modular","js/modular.ws","js/modular.ws.msg-handler","js/modular.ws.msg-handler.-event-msg-handler","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__41440","cljs.core/MultiFn","cljs.core.symbol","modular.ws.msg-handler/-event-msg-handler","p__41441","map__41442","cljs.core/--destructure-map","ev-msg","?data","vec__41443","cljs.core.nth","?uid","?csrf-token","?handshake-data","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","p__41448","map__41449","vec__41451","old-state-map","new-state-map","e","taoensso.truss.impl/-dummy-error","e41460","js/Error","taoensso.truss.impl/-invar-violation!","cljs.core/vector?","re-frame.core/dispatch","p__41475","map__41476","event","id","ring-req","?reply-fn","send-fn","p__41486","map__41487","cljs.core._EQ_","p__41500","map__41501","p__41516","map__41519","modular.ws.msg-handler/event-msg-handler","req"],"sourcesContent":["(ns modular.ws.msg-handler\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [tracef debug debugf infof info  warnf error errorf trace]]\n   [re-frame.core :as rf]\n   [taoensso.encore :as encore :refer-macros [have have?]]))\n\n(defmulti -event-msg-handler :id)\n\n(defmethod -event-msg-handler :chsk/handshake\n  [{:as ev-msg :keys [?data]}]\n  (let [[?uid ?csrf-token ?handshake-data] ?data]\n    (debugf \"Handshake: %s\" ?data)))\n\n(defmethod -event-msg-handler :chsk/state\n  [{:keys [?data] :as ev-msg}]\n  (let [[old-state-map new-state-map] (have vector? ?data)]\n    (debugf \"ws state: %s\" new-state-map)\n    (rf/dispatch [:ws/state new-state-map old-state-map])))\n\n;; This is the main event handler; If we want to do cool things with other kinds of data \n;; going back and forth, this is where we'll inject it.\n\n(defmethod -event-msg-handler :chsk/ws-ping\n  [{:as ev-msg :keys [event id ?data ring-req ?reply-fn send-fn]}]\n  (infof \":chsk/ws-ping: %s\" event))\n\n(defmethod -event-msg-handler :chsk/recv\n  [{:as ev-msg :keys [?data]}]\n  (if (= ?data [:chsk/ws-ping])\n    (debug \"ws-ping rcvd.\")\n    (if (vector? ?data)\n      (do ;(info \"dispatching rcvd ws msg to reframe:\" (first ?data))\n        (debug \"dispatching rcvd ws msg to reframe:\" ?data)\n        (rf/dispatch ?data))\n      (error \"ws rcvd. cannot dispatch. data no vector: \" ?data))))\n\n(defmethod -event-msg-handler :default\n  [{:as ev-msg :keys [event]}]\n  (errorf \"Unhandled ws event: %s\" event))\n\n; msg-handler\n\n(defn event-msg-handler\n  \"Wraps `-event-msg-handler` with logging, error catching, etc.\"\n  [{:keys [id ?data event] :as req}]\n  (debugf \"ws rcvd: evt: %s id: %s data: %s\" event id ?data)\n  (-event-msg-handler req))"],"x_google_ignoreList":[0]}