{"version":3,"sources":["modular/oauth2/authorize/start.cljs"],"mappings":";AAYA,6CAAA,7CAAOA;AAAP,AACE,OAAA,AAAIC;;AAEN,uDAAA,vDAAMC,sHAAuBC,GAAGC;AAAhC,AACE,IAAMC,WAAS,AAACC,kCAAUF,SAAS,AAACJ;AAApC,AACE,AAAAO,0DAAAC,mCAAA,qDAAA,iCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,0BAAgCJ;GAAhC,OAAA,KAAA,KAAA;;AACA,gFAAA,zEAAOJ,YACAI,SACA,CAAA,gBAAqB,AAACK,eAAKN;;AAGtC,yDAAA,zDAACO,+IAEA,cAAAC,HAAKT;AAAL,AAAA,IAAAU,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASE;eAAT,AAAAD,4CAAAD,WAAA,IAAA,tEAAWT;0BAAX,AAAAU,4CAAAD,WAAA,IAAA,jFAAoBG;AAApB,AACE,IAAMC,aAAO,AAACf,qDAAsBC,GAAGC;AAAvC,AACE,6BAAA,mFAAA,mFAAA,2CAAA,mEAAA,1SAACc,mBAASf,4QAA+Bc,kFACOD;;AAErD,yDAAA,zDAACL,mJAEA,cAAAQ,HAAKhB;AAAL,AAAA,IAAAiB,aAAAD;QAAA,AAAAL,4CAAAM,WAAA,IAAA,/DAASL;eAAT,AAAAD,4CAAAM,WAAA,IAAA,tEAAWhB;YAAX,AAAAU,4CAAAM,WAAA,IAAA,nEAAoBC;AAApB,AACE,IAAMA,YAAM,AAACI,6CAAeJ;IACtBK,eAAa,AAAA,mGAAeL;IADlCC,aAEqC,AAAA,yGAAkBnB;IAFvDmB,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAEcL;oBAFd,AAAAO,4CAAAF,eAAA,3EAEqBK;AAFrB,AAGE,AAAApB,0DAAAC,mCAAA,qDAAA,iCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,6BAAmCL,SAASiB;GAA5C,OAAA,KAAA,KAAA;;AACA,oBAAIK;AACF,AACE,uBAAA,mFAAA,1GAACE,mLAA8BxB;;AAC/B,uBAAA,vBAACwB,0GAAaD,cAAcvB,SAASiB;;AACrC,oBAAMJ;AAAN,AACE,AAAQA;;AADV;;yEAEId,nBACA,sBAAA,mFAAA,zGAACe,iKAAiBd,iBAAUiB,xOAC5B,mPAAA,5OAACQ;;AACP,6BAAA,mFAAA,zGAACX,mBAASf,8IAAWC,iBAAUiB","names":["modular.oauth2.authorize.start/current-url","js/window","modular.oauth2.authorize.start/open-authorize-window","db","provider","url-auth","modular.oauth2.provider/url-start","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/name","re_frame.core.reg_event_db","p__41343","vec__41348","cljs.core.nth","_","oauth-success-event","window","cljs.core/assoc-in","p__41358","vec__41359","token","map__41362","cljs.core/--destructure-map","cljs.core.get","modular.oauth2.token.sanitize/sanitize-token","access-token","success-event","re-frame.core/dispatch","cljs.core.dissoc"],"sourcesContent":["(ns modular.oauth2.authorize.start\n  (:require\n   [clojure.set :refer [rename-keys]]\n   [taoensso.timbre :refer-macros [info error]]\n   [re-frame.core :as rf]\n   [modular.oauth2.authorize.redirect :refer [register-callback]]\n   [modular.oauth2.token.save-handler] ; side effects\n   [modular.oauth2.provider :refer [url-start url-authorize]]\n   [modular.oauth2.token.sanitize :refer [sanitize-token]]))\n\n;; LOGIN\n\n(defn  current-url []\n  (-> js/window .-location .-href))\n\n(defn open-authorize-window [db provider]\n  (let [url-auth (url-start provider (current-url))]\n    (info \"opening oauth2 window: \" url-auth)\n    (.open js/window\n           url-auth\n           (str \"Webly OAuth2 \" (name provider))\n           \"width=500,height=600\")))\n\n(rf/reg-event-db\n :oauth2/authorize-start\n (fn [db [_ provider oauth-success-event]]\n   (let [window (open-authorize-window db provider)]\n     (assoc-in db [:oauth-authorize] {:window window\n                                      :success-event oauth-success-event}))))\n\n(rf/reg-event-db\n :oauth2/authorize-success\n (fn [db [_ provider token]]\n   (let [token (sanitize-token token)\n         access-token (:access-token token)\n         {:keys [window success-event]} (:oauth-authorize db)]\n     (info \"oauth2 authorize success: \" provider token)\n     (if access-token\n       (do\n         (rf/dispatch [:oauth2/get-user provider])\n         (rf/dispatch [success-event provider token])\n         (when window\n           (.close window))\n         (-> db\n             (assoc-in [:token provider] token)\n             (dissoc :oauth-authorize)))\n       (assoc-in db [:token provider] token)))))"],"x_google_ignoreList":[0]}