{"version":3,"sources":["ui/frisk.cljs"],"mappings":";AAOA,oBAAA,pBAAMA,gDAAUC,EAAEC;AAAlB,AACE,OAACC,iBAAO,AAACC,eAAKF,GACN,AAACG,4CAAIJ,EAAE,AAACK,eAAKJ;;AAEvB,AAAA,AAEA,kBAAA,2CAAA,uDAAA,2CAAA,2EAAA,UAAA,iEAAA,wCAAA,4DAAA,OAAA,2DAAA,eAAA,4DAAA,2CAAA,uDAAA,kBAAA,6DAAA,2CAAA,uDAAA,iBAAA,2DAAA,2CAAA,uDAAA,eAAA,iDAAA,2CAAA,uDAAA,cAAA,sFAAA,2CAAA,2EAAA,n2CAAKK;AAWL,qBAAA,rBAAMC;AAAN,AAAA,0FAAA,kDAAA,2CAAA,2DAAA,YAAA,uDAAA,OAAA,yDAAA,eAAA,mFAAA,qDAAA,2CAAA,oDAAA,aAAA,yDAAA,MAAA,oEAAA,IAAA,+CAAA,kHAAA,mFAAA,yDAAA,2CAAA,iDAAA,KAAA,gDAAA,KAAA,+CAAA,IAAA,oDAAA;;AAWA,qBAAA,rBAAMC,kDAAWC;AAAjB,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,4DAAA,QAAA,0DAAA,OAAA,mEAAA,SAAA,uDAAA,sBAIgCA;;AAEhC,wBAAA,gCAAAC,xDAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;sBAAA,AAAAE,4CAAAF,eAAA,7EAA4BI;WAA5B,AAAAF,4CAAAF,eAAA,lEAAsCK;cAAtC,AAAAH,4CAAAF,eAAA,rEAA2CM;AAA3C,AAAA,0FAAA,yDAAA,2CAAA,uDAAA,2CAAA,yDAAA,IAAA,2DAAA,kBAAA,+DAAA,SAAA,2EAAA,cAAA,uDAAA,OAAA,yDAAA,OAAA,yDAAA,kBAAA,4DAAA;AAAA,AAQsB,IAAAC,WAAS,mCAAA,4DAAA,7EAAIH;IAAbI,WAA0CH;AAA1C,AAAA,sFAAAE,SAAAC,8BAAAD,SAAAC,9HAACF,wCAAAA,2DAAAA;WARvB,mFAAA,kDAAA,2CAAA,2DAAA,cAAA,uDAAA,OAAA,yDAAA,OAAA,uDAAA,2CAAA,gEAAA,gBAAA,wIAAA,mFAAA,0DAAA,2CAAA,0DAAA,mBAAA,yDAAA,vYAY6B,mCAAA,AAAA,gBAAA,jCAAMF;;AAGnC,wBAAA,2CAAA,2DAAA,UAAA,yDAAA,UAAA,4EAAA,vRAAKK;AAIL,2BAAA,3BAAMC,8DAAiBJ,QAAQK;AAA/B,AAAA,0FAAA,yDAAA,2CAAA,4DAAA;AAAA,AACsB,sFAAA,4FAAA,1KAACL,wCAAAA,gHAAAA,RAAoBK,4FAAAA;GAD3C,6fAAA,tcAEmB,6HAAA,2CAAA,oFAAA,MAAA,0FAAA,MAAA,yDAAA,3ZAACC,uGAAMH;;AAM1B,6BAAA,7BAAMI,kEAAmBP,QAAQK;AAAjC,AAAA,0FAAA,yDAAA,2CAAA,4DAAA;AAAA,AACsB,sFAAA,yFAAA,vKAACL,wCAAAA,6GAAAA;GADvB,ikBAAA,1gBAGY,6HAAA,2CAAA,+DAAA,qBAAA,qEAAA,qBAAA,mEAAA,qBAAA,kEAAA,hfAACM,uGAAMH;;AAOnB,sBAAA,tBAAMK,oDAAYR,QAAQK;AAA1B,AAAA,0FAAA,yDAAA,2CAAA,4DAAA;AAAA,AACsB,sFAAA,gFAAA,9JAACL,wCAAAA,oGAAAA,RAAcK,gFAAAA;GADrC,6vBAAA,tsBAEmB,6HAAA,2CAAA,qFAAA,MAAA,2FAAA,MAAA,+DAAA,qBAAA,qEAAA,qBAAA,mEAAA,qBAAA,kEAAA,5qBAACC,uGAAMH;;AAS1B,mBAAA,nBAAMM;AAAN,AAAA,0FAAA,qDAAA,2CAAA,uDACiB,AAAA,+EAAMpB,yBAAS,wGAAA,xGAACqB;;AAEjC,sBAAA,tBAAMC,oDAAYN;AAAlB,AAAA,0FAAA,qDAAA,2CAAA,uDACiB,AAAA,0FAAUhB,yBAAS,AAACqB,wGAAOL;;AAE5C,uBAAA,vBAAMO,sDAAaP;AAAnB,AAAA,0FAAA,qDAAA,2CAAA,uDACiB,AAAA,2FAAWhB,yBAAS,4CAAKgB;;AAE1C,sBAAA,tBAAMQ,oDAAYR;AAAlB,AAAA,0FAAA,qDAAA,2CAAA,uDACiB,AAAA,yFAAUhB,yBAASgB;;AAEpC,kBAAA,lBAAMS,4CAAQC;AAAd,AAAA,0FAAA,2GAIQ,AAACG,oDACA,WAAKC,EAAEd,vHAMR,kDAAA,lDAACgB;AANA,AAAA,2BAAA,mFAAA,qDACwB,kBAAA,4GAAA,4BAAA,oHAAA,uCAAA,qHAAA,4BAAA,oHAAA,xjBAAM,SAAA,RAAMhB,kGAAOI,2BACb,OAASJ,sGAAOM,oBAAWN,eAC3B,iBAAAe,hBAAUf,uHAAOO,qBAAYP,eAC7B,OAASA,sGAAOQ,oBAAWR,aACrB,4CAAKA;aALzC,2CAAA,oDAAoBc;iEAHrBJ,9DACA,AAACC,gDAAQC;;AAUjB,gBAAA,wBAAAK,xCAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA5B,4BAAA4B;WAAA,AAAA3B,4CAAA2B,eAAA,lEAAoBlB;WAApB,AAAAT,4CAAA2B,eAAA,lEAAyBxB;cAAzB,AAAAH,4CAAA2B,eAAA,rEAA8BvB;gBAA9B,AAAAJ,4CAAA2B,eAAA,vEAAsCE;qBAAtC,AAAA7B,4CAAA2B,eAAA,5EAAgDG;AAAhD,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,uBACmC,kBAAA,4GAAA,5HACE,SAAA,RAAMrB,kGACLI,2BAED,OAASJ,mBACT,6BAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,2EAAA,tUAAIoB,iUAE2BpB,oEAEpB,yCAAoBsB;AAApB,AACE,IAAAC,WAAA;IAAAC,WAAkB9B;IAAlB+B,WAAuB,AAAA,AAAIH;AAA3B,AAAA,sFAAAC,SAAAC,SAAAC,8BAAAF,SAAAC,SAAAC,hJAAC9B,wCAAAA,oEAAAA;wIAVhB,rHAKE,mFAMGW,oBAAWN,gBAEd,iBAAAe,hBAAUf,oCACV,6BAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,2FAAA,tVAAIoB,iUAEsB,AAACM,eAAK1B,qEAErB,0CAAqBsB;AAArB,AACE,IAAAK,WAAA;IAAAC,WAAkBlC;IAAlBmC,WAAuB,AAACC,gDAAQ,AAAA,AAAIR;AAApC,AAAA,sFAAAK,SAAAC,SAAAC,8BAAAF,SAAAC,SAAAC,hJAAClC,wCAAAA,oEAAAA;yIAnBhB,oKAAA,1RAcE,mFAMGY,qBAAYP,gBAEf,AAAC+B,wBAAQ/B,OACT,mDAAA,NAAKA,sDAAS,AAAYgC,eAAQhC,mBAElC,OAASA,mBACT,6BAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,2EAAA,xUAAIoB,mUAEsBpB,oEAEf,yCAAoBsB;AAApB,AACE,IAAAW,WAAA;IAAAC,WAAkBxC;IAAlByC,WAAuB,AAACC,OAAU,AAAA,AAAId;AAAtC,AAAA,sFAAAW,SAAAC,SAAAC,8BAAAF,SAAAC,SAAAC,hJAACxC,wCAAAA,oEAAAA;wIA/BhB,rHA0BE,mFAMGa,oBAAWR,cAEd,4CAAKA;MACvC,iBAAAqC,qBAAkB,AAAA,qFAAQ,AAAC9C,4CAAI8B,eAAe3B;AAA9C,AAAA,oBAAA2C;AAAA,AAAA,aAAAA,TAAWC;AAAX,AAAA,0FACGpD,mBAAU,CAAA,sDAAeoD;;AAD5B;;;;AAGH,6BAAA,7BAAMC,kEAAaC;AAAnB,AACE,sCAAA,7BAAI,AAACC,qBAAKD,UAAG,AAACE,qBAAKF,QAAG,AAACG,sBAAMH;;AAE/B,6BAAA,qCAAAI,lEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAvD,4BAAAuD;WAAA,AAAAtD,4CAAAsD,eAAA,lEAAiC7C;AAAjC,AACE,GAAM,AAACyC,qBAAKzC;AAAZ,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,mFAAA,qDAAA,YAAA,gIAAA,mFAAA,qDAAA,rLAEoBS,gBAAO,AAAC5B,eAAKmB;;AAFjC,GAIM,AAAC+C,qBAAK/C;AAJZ,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,mFAAA,qDAAA,oGAAA,mFAAA,qDAAA,/NAKmB,oEAAA,vBAAK,AAACgD,gBAAMhD;;AAL/B,GAOM,EAAI,AAAC0C,qBAAK1C,WACN,AAACiD,wBAAQjD;AARnB,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,oBAAA,mFAAA,8LAAA,mFAAA,5NASkC,iCAAA,IAAA,nCAAI,AAACiD,wBAAQjD,wBACpB,oEAAA,vBAAK,AAACgD,gBAAMhD,kKACL,iCAAA,IAAA,nCAAI,AAACiD,wBAAQjD;;AAX/C;;;;;AAaF,sBAAA,8BAAAkD,pDAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAA7D,4BAAA6D;IAAAC,aAAA,AAAA7D,4CAAA4D,eAAA;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAoBG;QAApB,AAAAF,4CAAAD,WAAA,IAAA,/DAAsBZ;WAAtB,AAAAjD,4CAAA4D,eAAA,lEAAsCzD;qBAAtC,AAAAH,4CAAA4D,eAAA,5EAA2C9B;cAA3C,AAAA9B,4CAAA4D,eAAA,rEAA0DxD;gBAA1D,AAAAJ,4CAAA4D,eAAA,vEAAkE/B;AAAlE,AACE,IAAMoC,eAAa,AAACC,6CAAK/D,KAAK6D;IACxBG,yBAAiB,EAAK,AAACnB,2BAAYC,QACb,GAAK,AAACmB,uBAAOnB;IACnCoB,WAAS,AAACrE,4CAAI8B,eAAemC;IAC7B/D,kBAAU,AAAA,6FAAYmE;AAJ5B,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,8DAAA,yBAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,uBAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,0bAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,8DAAA,sBAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,iGAAA,2CAAA,+EAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,WAAA,kEAAA,hoEASK,0BAAA,AAAA,yGAAA,2CAAA,+EAAA,kEAAA,kFAAA,/YAAMF,2GACHlE,gIAAyBC,qEACL+D,uEACG7D,yuCAKvBwB,8GAAYoC,scAEb,iCAAA,8GAAA,2CAAA,uEAAA,iGAAA,2CAAA,uDAAA,0EAAA,kEAAA,yFAAA,vqBAAI,AAAChB,2BAAYC,uFACdM,2HAAyBN,qGACzBrB,8GAAYqB,kEACKpB,+DACLoC,uFACUnC,yEACP1B,yDACtB,mCAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,oBAAA,sGAAA,2CAAA,oEAAA,KAAA,uDAAA,0EAAA,kEAAA,yFAAA,0FAAA,97BAAMF,icAEFoE,4LACiBrB,kEACKpB,+DACLoC,uFACUnC,yEACP1B;;AAE7B,uBAAA,+BAAAmE,tDAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAzE,4BAAAyE;WAAA,AAAAxE,4CAAAwE,eAAA,lEAA2B/D;WAA3B,AAAAT,4CAAAwE,eAAA,lEAAgCrE;qBAAhC,AAAAH,4CAAAwE,eAAA,5EAAqC1C;cAArC,AAAA9B,4CAAAwE,eAAA,rEAAoDpE;gBAApD,AAAAJ,4CAAAwE,eAAA,vEAA4D3C;yBAA5D,AAAA7B,4CAAAwE,eAAA,hFAAsEE;AAAtE,AACE,IAAML,WAAS,AAACrE,4CAAI8B,eAAe3B;IAC7BD,kBAAU,AAAA,6FAAYmE;AAD5B,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,8DAAA,yBAIG,sCAAA,KAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,gvBAAA,yGAAA,2CAAA,+EAAA,0DAAA,kFAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,mFAAA,8LAAA,mFAAA,7oEAAUK,6XAEP,kHAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,mEAAA,OAAA,uDAAA,MAAA,yDAAA,wBAAA,sHAAA,jsBAAM,AAAA,qFAAQL,ykBAIV3E,4HACHO,gIAAyBC,qEACLC,+DACGC,ogBAEhB,iCAAA,IAAA,nCAAI,AAACsD,wBAAQjD,wBACpB,oEAAA,vBAAK,AAACgD,gBAAMhD,kKACL,iCAAA,IAAA,nCAAI,AAACiD,wBAAQjD,yCACxB,mCAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,WAAA,2DAAA,haAAMP,6bAEH,kHAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,uEAAA,sBAAA,qNAAA,rqBAAM,AAAA,qFAAQmE,8cAEV1E,mBAAU,AAAA,qFAAQ0E,gCACtB,AAAC/C,oDAAY,WAAKC,EAAEoD;AAAP,AAAA,2BAAA,sGAAA,2CAAA,uDAAA,0EAAA,0GAAA,yFAAA,kFAAA,2CAAA,oDAAiBpD,njBAAI+C,mHAAiBK,kEACK9C,+DACL,AAACqC,6CAAK/D,KAAKoB,6EACDO,yEACP1B;iBATzD,dASoEK;;AAEzE,mBAAA,2BAAAmE,9CAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA9E,4BAAA8E;WAAA,AAAA7E,4CAAA6E,eAAA,lEAAuBpE;WAAvB,AAAAT,4CAAA6E,eAAA,lEAA4B1E;qBAA5B,AAAAH,4CAAA6E,eAAA,5EAAiC/C;cAAjC,AAAA9B,4CAAA6E,eAAA,rEAAgDzE;gBAAhD,AAAAJ,4CAAA6E,eAAA,vEAAwDhD;yBAAxD,AAAA7B,4CAAA6E,eAAA,hFAAkEH;AAAlE,AACE,IAAML,WAAS,AAACrE,4CAAI8B,eAAe3B;IAC7BD,kBAAU,AAAA,6FAAYmE;AAD5B,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,8DAAA,yBAIG,sCAAA,KAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,gvBAAA,yGAAA,2CAAA,+EAAA,0DAAA,kFAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,mFAAA,qDAAA,oGAAA,mFAAA,qDAAA,7pEAAUK,6XAEP,kHAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,mEAAA,OAAA,uDAAA,MAAA,yDAAA,wBAAA,sHAAA,jsBAAM,AAAA,qFAAQL,ykBAIV3E,4HACHO,gIAAyBC,qEACLC,+DACGC,ihBAGvB,oEAAA,vBAAK,AAACqD,gBAAMhD,+LAEhB,mCAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,WAAA,kEAAA,vaAAMP,8bAEH,kHAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,uEAAA,sBAAA,qNAAA,rqBAAM,AAAA,qFAAQmE,8cAEV1E,mBAAU,AAAA,qFAAQ0E,gCACtB,AAAC/C,oDAAY,WAAKC,EAAEoD;AAAP,AAAA,2BAAA,sGAAA,2CAAA,uDAAA,0EAAA,0GAAA,yFAAA,kFAAA,2CAAA,oDAAiBpD,njBAAI+C,mHAAiBK,kEACK9C,+DACL,AAACqC,6CAAK/D,KAAKoB,6EACDO,yEACP1B;iBATzD,dASoEK;;AAEzE,mBAAA,2BAAAsE,9CAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAjF,4BAAAiF;UAAAA,NAA0EE;WAA1E,AAAAlF,4CAAAgF,eAAA,lEAAuBvE;WAAvB,AAAAT,4CAAAgF,eAAA,lEAA4B7E;qBAA5B,AAAAH,4CAAAgF,eAAA,5EAAiClD;cAAjC,AAAA9B,4CAAAgF,eAAA,rEAAgD5E;yBAAhD,AAAAJ,4CAAAgF,eAAA,hFAAwDN;AAAxD,AACE,IAAML,WAAS,AAACrE,4CAAI8B,eAAe3B;IAC7BD,kBAAU,AAAA,6FAAYmE;AAD5B,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,8DAAA,yBAIG,sCAAA,KAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,gvBAAA,yGAAA,2CAAA,+EAAA,0DAAA,kFAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,mFAAA,iEAAA,gIAAA,mFAAA,qDAAA,rsEAAUK,6XAEP,kHAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,mEAAA,OAAA,uDAAA,MAAA,yDAAA,wBAAA,sHAAA,jsBAAM,AAAA,qFAAQL,ykBAIV3E,4HACHO,gIAAyBC,qEACLC,+DACGC,ogBAEhB,+FACNc,gBAAO,AAAC5B,eAAKmB,mLAElB,mCAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,WAAA,kEAAA,vaAAMP,8bAEH,kHAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,uEAAA,sBAAA,qNAAA,rqBAAM,AAAA,qFAAQmE,8cAEV1E,mBAAU,AAAA,qFAAQ0E,gCAGjB,AAAC/C,oDAAY,WAAKC,EAAEoD;AAAP,AAAA,2BAAA,yNAAA,2CAAA,oDAAiBpD,rOAAIwC,oBAAW,kDAAA,lDAACuB,8CAAMJ,yDAAUP;GAD9D,AAACvD,gDAAQ,WAAA+D;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAArB,4CAAAsB,WAAA,IAAA,/DAAMpB;QAAN,AAAAF,4CAAAsB,WAAA,IAAA,/DAAQC;AAAR,AAAY,mDAAKrB;kBANlC,fAKQvD;;AAIb,qBAAA,6BAAA8E,lDAAMjB;AAAN,AAAA,IAAAkB,aAAAD;IAAAC,iBAAA,AAAAzF,4BAAAyF;UAAAA,NAAmCN;WAAnC,AAAAlF,4CAAAwF,eAAA,lEAAyB/E;AAAzB,AACE,GAAM,AAACyC,qBAAKzC;AAAZ,0FAAmBwE,iBAAQC;;AAA3B,GACM,AAAC1B,qBAAK/C;AADZ,0FACmBqE,iBAAQI;;AAD3B,GAEM,EAAI,AAAC/B,qBAAK1C,WAAM,AAACiD,wBAAQjD;AAF/B,0FAEuCgE,qBAAYS;;AAFnD,GAGM,EAAA,GAAA,SAAA,SAAA,EAAA,EAAA,CAAA,2CAAA,cAAA,CAAAO,gCAAA,2BAAA,KAAA,EAAA,EAAA,2CAAA,AAAAC,yDAAA,QAAA,AAAAA,/BAAYC,iEAAAA,lSAAOlF,sBAAAA,0FAAAA,oCAAAA,8FAAAA,iEAAAA;AAHzB,0FAGgC6D,mBAAU,kDAAA,qDAAA,AAAAsB,vGAACN,8CAAMJ,yEAAWzE;;AAH5D,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,kEAAA,uBAAA,mFAIkDmB,cAAKsD;;;;;;;AAEzD,uBAAA,vBAAMW,sDAAaC,KAAKnB;AAAxB,AACE,OAACT,6CAAK,iBAAA6B,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAA;;KAAcpB;;AAEtB,4BAAA,5BAAMqB,gEAAkBC,WAAWC;AAAnC,AACE,gBAAA,mFAAA,2CAAA,qDAAA,iCAAA,hOAAOC,oRAA2BF;IAC3BG,iBAAeF;;AADtB,AAEE,GAAI,AAACG,cAAIF;AACP,IAAAG,aAAuBH;IAAvBI,aAAA,AAAAF,cAAAC;IAAAE,eAAA,AAAAC,gBAAAF;IAAAA,iBAAA,AAAAG,eAAAH;cAAAC,VAAOG;WAAPJ,PAAiBK;IACXC,eAAa,EAAI,iBAAAC,WAAmB,AAAA,kFAAOH;AAA1B,AAAA,GAAA,GAAA,CAAAG,YAAA;AAAA,GAAA,EAAA,CAAA,AAAAA,+CAAA,cAAA,CAAArB,gCAAA,AAAAqB;AAAA;;AAAA,GAAA,EAAA,AAAAA;AAAA,OAAApB,mDAAAoB,jBAAYnB;;AAAZ;;;;AAAA,OAAAD,mDAAAoB,jBAAYnB;;MAAhB,AAAAC,gBAAyC,AAAA,kFAAOe,UAAS,AAAA,kFAAOA;AADnF,AAEE,GAAM,AAACzD,qBAAK2D;AACN,eACC,AAACE,+CAAOH,KAAK,AAACrH,4CAAI;kBAAAyH;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAlD,4CAAAmD,WAAA,IAAA,/DAAMjD;QAAN,AAAAF,4CAAAmD,WAAA,IAAA,/DAAQhE;AAAR,AAAA,kDAAA,iMAAA,5IAAmB,AAACiB,6CAAK,AAAA,mFAAOyC,SAAS3C,uDACtBf;;CACnB4D;eAClB,kCAAA,+KAAA,uEAAA,xRAACK,mBAASd,kGAAgB,AAAA,mFAAOO;;;;;AALxC,GAOM,0CAAA,xCAAI,AAACxD,qBAAK0D,qBACN,AAACnD,wBAAQmD,mBACT,AAACrD,qBAAKqD;AACV,eACC,AAACE,+CAAOH,KAAK,AAACtF,oDAAY;kBAAKC,EAAE4F;AAAP,AAAA,kDAAA,iMAAA,5IAAoB,AAACjD,6CAAK,AAAA,mFAAOyC,SAASpF,uDACtB4F;;CACpBN;eAC1B,kCAAA,+KAAA,uEAAA,xRAACK,mBAASd,kGAAgB,AAAA,mFAAOO;;;;;AAdxC,AAiBM,eACCC;eACA,EAAI,AAACxD,sBAAMyD,eACT,kCAAA,+KAAA,uEAAA,xRAACK,mBAASd,kGAAgB,AAAA,mFAAOO,sFACjCP;;;;;;;;AACXA;;;;;AAEN,6BAAA,7BAAMgB,kEAAmB3G;AAAzB,AACE,IAAM4G,SAAO,iBAAAC,mBAAA,KAAAC;AAAA,AAAA,IAAAC,kDAAAC;IAAAC,6CAAAC;IAAAC,kDAAA;IAAAC,6CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AAAc,AAACE,iDAAOtH;UAAtB,AAAA,CAAAkH,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;IACPU,WAAS,uBAAA,vBAAgBC;AAD/B,AAEE,IAAAC,iBAAMF;AAAN,AAAA,CAAAE,eAAA,SAAA,cAAA;;AAAA,CAAAA,eAAA,SAAA,SAAA;;AAAA,CAAAA,eAAA,SAAA,UAAA;;AAAA,CAAAA,eAAA,SAAA,WAAA;;AAAA,CAAAA,eAAA,SAAA,YAAA;;AAAA,CAAAA,eAAA,SAAA,aAAA;;AAAA,CAAAA,eAAA,SAAA,YAAA;;AAAA,CAAAA,eAAA,SAAA,aAAA;;AAAA,CAAAA,eAAA,SAAA,eAAA;;AAAA,CAAAA,eAAA,SAAA,gBAAA;;AAAA,CAAAA,eAAA,WAcgBb;;AAdhBa;AAgBA,AAAc,AAAQD,0BAAaD;;AACnC,AAASA;;AAET,qBAAA,rBAAcC;;AACd,OAAc,AAAQA,0BAAaD;;AAEvC,wBAAA,xBAAMG,wDAAcrG;AAApB,AACE,yBAAA,WAAAsG,7BAAClJ;AAAD,AAAW,qDAAAkJ,iBAAA,+DAAA,9HAAC9C;GAA0BxD;;AAExC,2BAAA,3BAAMuG,8DAAiBC,WAAWC,GAAG1G;AAArC,AACE;mCAAK2G,MAAQC;AAAb,AACE,IAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAlH,oBAAA,AAAAkH,aAAA;AAAA,AAAA,QAAAA;KAAA;AACU,wFAAA,mFAAA,oEAAA,gGAAA,uEAAA,/YAACE,mDAAMN,WAAWpB,uKAAsBqB,6EAAmB,AAAC9B,gBAAMgC;;;KAD5E;AAEc,yFAAA,mFAAA,oEAAA,zOAACG,mDAAMN,WAAWO,wKAAuBN,qFAAoB,AAACO,gDAAQ9C,0BAAiB,AAACS,gBAAMgC;;;KAF5G;AAGY,wFAAA,mFAAA,oEAAA,gGAAA,uEAAA,/YAACG,mDAAMN,WAAWpB,uKAAsBqB,6EAAmB,AAAC9B,gBAAMgC;;;KAH9E;AAIgB,yFAAA,mFAAA,oEAAA,zOAACG,mDAAMN,WAAWO,wKAAuBN,qFAAoBJ;;;KAJ7E;AAKQ,OAACf,2BAAkB,AAACX,gBAAMgC;;;KALlC;AAMW,IAAAM,aAAmBN;WAAnB,AAAA3E,4CAAAiF,WAAA,IAAA,lEAAO5I;YAAP,AAAA2D,4CAAAiF,WAAA,IAAA,nEAAYC;AAAZ,AACE,GAAI,AAAC3C,cAAIlG;AACP,OAACyI,mDAAM/G,UAAUqF,mBAAS/G,KAAK6I;;AAC/B,OAACC,sBAAOpH,UAAUmH;;;;;AATjC,MAAA,KAAAL,MAAA,CAAA,mEAAAD;;;;yBADGF;IAAQC;;;;EAAAA;;oCAARD,MAAQC;;;IAARD;IAAQC;0BAARD,MAAQC;;;;;;;AAYf,gBAAA,hBAAMS,wCAAMzI,KAAK8H,GAAGD;AAApB,AACE,IAAMa,aAAW,AAAA,+FAAA,AAAAvD,gBAAc0C;IACzBzG,YAAU,gUAAA,KAAA,nUAAM,EAAA,GAAA,SAAA,SAAA,EAAA,EAAA,CAAA,2CAAA,cAAA,CAAA4D,gCAAA,0BAAA,KAAA,EAAA,EAAA,2CAAA,AAAAC,wDAAA,QAAA,AAAAA,9BAAY0D,gEAAAA,hSAAM3I,sBAAAA,0FAAAA,mCAAAA,6FAAAA,gEAAAA,QACtBA;IACZL,UAAQ,AAACiI,yBAAgBC,WAAWC,GAAG1G;IACvCC,iBAAe,0DAAA,sFAAA,hJAACuH,+CAAOF,8FAAYZ;AAJzC,AAAA,0FAAA,mDAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,2DAAA,0BAAA,iIAAA,8HAAA,oIAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,sDAAA,2BAAA,sGAAA,2CAAA,0DAAA,0EAAA,qDAAA,iCAAA,yFAAA,xlCAOK/H,yBAAgBJ,QAAQK,gGACxBE,2BAAkBP,mGAClBQ,oBAAWR,QAAQK,4cAEnB6D,mHAAiB7D,qEACKoB,0KAEKC,yEACP1B;;AAE3B,4BAAA,5BAAMkJ,gEACHC,eAASC;AADZ,AAAA,0FAAA,yDAAA,2CAAA,uDAAA,2CAAA,yDAAA,IAAA,2EAAA,cAAA,uDAAA,OAAA,yDAAA,eAAA,8EAAA,mFAAA,kDAAA,2CAAA,2DAAA,cAAA,uDAAA,OAAA,yDAAA,OAAA,uDAAA,2CAAA,gEAAA,gBAAA,uIAAA,mFAAA,0DAAA,2CAAA,0DAAA,mBAAA,yDAAA,hgCAIqBA,0nBAIQ,kCAAA,AAAA,gBAAA,hCAAMD;;AAGnC,yBAAA,zBACEE,0DAAehJ;AADjB,AAEE,IAAMiJ,oBAAkB,+CAAA,WAAAC,iBAAAC,3EAACC;AAAD,AAAS,0BAAAF,iBAAA,mFAAA,iEAAAC,iBAAA,0EAAA,iCAAA,uEAAA,3XAAC1C;GAAV,mCAA8E,AAAC4C,8CAAM,AAACrG,gBAAMhD;IAC9G6H,aAAW,AAACyB,gDAAOL;AADzB,AAEE;mCAAOjJ;AAAP,AACE,IAAM0I,aAAW,AAAA,+FAAA,AAAAvD,gBAAc0C;IACzBiB,iBAAS,AAAA,2FAAWJ;AAD1B,AAAA,0FAAA,mDAAA,2CAAA,85BAAA,v2BAEgB,uGAAA,2CAAA,8DAAA,aAAA,gEAAA,oBAAA,2DAAA,5WAACzI,wXAGM,kCAAA,KAAA,AAAA,2CAAA,gEAAA,OAAA,kEAAA,OAAA,iEAAA,OAAA,gEAAA,xVAAU6I,yWAKV,AAAA,qFAAQ9J,kHAC3B6J,0BAAiBC,eAAS,WAAKlE;AAAL,AAAQ,wFAAA,mFAAA,iEAAA,rOAACuD,mDAAMN,WAAWpB,4OAAiC,AAAC8C,cAAIT;WAX9F,mFAAA,qDAAA,qBAaG,kCAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,2DAAA,OAAA,wDAAA,OAAA,kEAAA,aAAA,gEAAA,OAAA,kEAAA,5nBAAMA,mpBASH,AAACjI,oDAAY,WAAKiH,GAAG5D;AAAR,AAAA,2BAAA,yHAAA,2CAAA,oDACS4D,rIAAKW,cAAKvE,EAAE4D,GAAGD;qBAVxC,lBAUqD7H;;;IAxBnDA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AA0BX,iBAAA,jBAAMwJ,0CAAOxJ;AAAb,AAAA,0FACGgJ,uBAAchJ","names":["ui.frisk/map-vals","f","m","cljs.core/zipmap","cljs.core/keys","cljs.core.map","cljs.core/vals","ui.frisk/styles","ui.frisk/ErrorIcon","ui.frisk/ErrorText","text","p__54623","map__54624","cljs.core/--destructure-map","cljs.core.get","ui.frisk/ExpandButton","expanded?","path","emit-fn","G__54630","G__54631","ui.frisk/button-style","ui.frisk/ExpandAllButton","data","cljs.core.merge","ui.frisk/CollapseAllButton","ui.frisk/CopyButton","ui.frisk/NilText","cljs.core.pr_str","ui.frisk/StringText","ui.frisk/KeywordText","ui.frisk/NumberText","ui.frisk/KeySet","keyset","cljs.core.sort_by","cljs.core/str","cljs.core.map_indexed","i","cljs.core/Keyword","cljs.core.interpose","p__54693","map__54694","ui.frisk/Node","swappable","metadata-paths","e","G__54696","G__54697","G__54698","cljs.core/name","G__54700","G__54701","G__54702","cljs.core.keyword","cljs.core/object?","js/JSON","G__54703","G__54704","G__54705","js/Number","temp__5804__auto__","errors","ui.frisk/expandable?","v","cljs.core/map?","cljs.core/seq?","cljs.core/coll?","p__54713","map__54714","ui.frisk/CollectionSummary","cljs.core/set?","cljs.core/count","cljs.core/vector?","p__54720","map__54721","vec__54722","cljs.core.nth","ui.frisk/KeyValNode","k","path-to-here","cljs.core.conj","expandable-node?","cljs.core/empty?","metadata","ui.frisk/DataFrisk","p__54726","map__54727","ui.frisk/ListVecNode","hide-header?","x","p__54729","map__54730","ui.frisk/SetNode","p__54744","map__54745","ui.frisk/MapNode","all","p__54753","vec__54754","_","cljs.core.assoc","p__54766","map__54767","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core/deref","ui.frisk/conj-to-set","coll","or__5045__auto__","ui.frisk/expand-all-paths","root-value","current-expanded-paths","remaining","expanded-paths","cljs.core/seq","vec__54808","seq__54809","first__54810","cljs.core/first","cljs.core/next","current","rest","current-node","G__54811","cljs.core.concat","p__54812","vec__54813","cljs.core/assoc-in","node","ui.frisk/copy-to-clipboard","pretty","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__54817","cljs.core/*print-newline*","*print-fn*-orig-val__54818","cljs.core/*print-fn*","*print-newline*-temp-val__54819","*print-fn*-temp-val__54820","x__5691__auto__","cljs.pprint.pprint","textArea","js/document","G__54822","ui.frisk/collapse-all","p1__54823#","ui.frisk/emit-fn-factory","state-atom","id","event","args","G__54826","js/Error","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.partial","vec__54827","value","cljs.core/reset!","ui.frisk/Root","data-frisk","cljs.core/IAtom","cljs.core.get_in","ui.frisk/VisibilityButton","visible?","update-fn","ui.frisk/DataFriskView","expand-by-default","p1__54834#","p2__54835#","cljs.core.reduce","cljs.core.range","reagent.core.atom","cljs.core/not","ui.frisk/frisk"],"sourcesContent":["(ns ui.frisk\n  (:require\n   [cljs.pprint :refer [pprint]]\n   [reagent.core :as r]))\n\n;; stolen from: https://github.com/Odinodin/data-frisk-reagent\n\n(defn map-vals [f m]\n  (zipmap (keys m)\n          (map f (vals m))))\n\n(declare DataFrisk)\n\n(def styles\n  {:shell {:backgroundColor \"#FAFAFA\"\n           :fontFamily \"Consolas,Monaco,Courier New,monospace\"\n           :fontSize \"12px\"\n           :z-index 9999}\n   :strings {:color \"#4Ebb4E\"}\n   :keywords {:color \"purple\"}\n   :numbers {:color \"blue\"}\n   :nil {:color \"red\"}\n   :shell-visible-button {:backgroundColor \"#4EE24E\"}})\n\n(defn ErrorIcon []\n  [:svg {:viewBox \"0 0 30 42\" :width \"100%\" :height \"100%\"}\n   [:path {:fill \"darkorange\"\n           :stroke \"red\"\n           :stroke-width \"2\"\n           :d \"M15 3\n           Q16.5 6.8 25 18\n           A12.8 12.8 0 1 1 5 18\n           Q13.5 6.8 15 3z\"}]\n   [:circle {:cx 15 :cy 32 :r 7 :fill \"yellow\"}]])\n\n(defn ErrorText [text]\n  [:div {:style {:fontSize \"0.7em\"\n                 :display \"flex\"\n                 :align-items \"center\"\n                 :color \"red\"}} text])\n\n(defn ExpandButton [{:keys [expanded? path emit-fn]}]\n  [:button {:style {:border 0\n                    :padding \"5px 4px 5px 2px\"\n                    :textAlign \"center\"\n                    :backgroundColor \"transparent\"\n                    :width \"20px\"\n                    :height \"20px\"\n                    :cursor \"pointer\"}\n            :onClick #(emit-fn (if expanded? :contract :expand) path)}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width \"100%\" :height \"100%\"\n          :style {:transition \"all 0.2s ease\"\n                  :transform (when expanded? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"black\"}]]])\n\n(def button-style {:padding \"1px 3px\"\n                   :cursor \"pointer\"\n                   :background-color \"white\"})\n\n(defn ExpandAllButton [emit-fn data]\n  [:button {:onClick #(emit-fn :expand-all data)\n            :style (merge button-style\n                          {:borderTopLeftRadius \"2px\"\n                           :borderBottomLeftRadius \"2px\"\n                           :border \"1px solid darkgray\"})}\n   \"Expand\"])\n\n(defn CollapseAllButton [emit-fn data]\n  [:button {:onClick #(emit-fn :collapse-all)\n            :style\n            (merge button-style\n                   {:borderTop \"1px solid darkgray\"\n                    :borderBottom \"1px solid darkgray\"\n                    :borderRight \"1px solid darkgray\"\n                    :borderLeft \"0\"})}\n   \"Collapse\"])\n\n(defn CopyButton [emit-fn data]\n  [:button {:onClick #(emit-fn :copy data)\n            :style (merge button-style\n                          {:borderTopRightRadius \"2px\"\n                           :borderBottomRightRadius \"2px\"\n                           :borderTop \"1px solid darkgray\"\n                           :borderBottom \"1px solid darkgray\"\n                           :borderRight \"1px solid darkgray\"\n                           :borderLeft \"0\"})}\n   \"Copy\"])\n\n(defn NilText []\n  [:span {:style (:nil styles)} (pr-str nil)])\n\n(defn StringText [data]\n  [:span {:style (:strings styles)} (pr-str data)])\n\n(defn KeywordText [data]\n  [:span {:style (:keywords styles)} (str data)])\n\n(defn NumberText [data]\n  [:span {:style (:numbers styles)} data])\n\n(defn KeySet [keyset]\n  [:span\n   (->> keyset\n        (sort-by str)\n        (map-indexed\n         (fn [i data] ^{:key i} [:span\n                                 (cond (nil? data) [NilText]\n                                       (string? data) [StringText data]\n                                       (keyword? data) [KeywordText data]\n                                       (number? data) [NumberText data]\n                                       :else (str data))]))\n        (interpose \" \"))])\n\n(defn Node [{:keys [data path emit-fn swappable metadata-paths]}]\n  [:div {:style {:display \"flex\"}} (cond\n                                     (nil? data)\n                                     [NilText]\n\n                                     (string? data)\n                                     (if swappable\n                                       [:input {:type \"text\"\n                                                :default-value (str data)\n                                                :on-change\n                                                (fn string-changed [e]\n                                                  (emit-fn :changed path (.. e -target -value)))}]\n                                       [StringText data])\n\n                                     (keyword? data)\n                                     (if swappable\n                                       [:input {:type \"text\"\n                                                :default-value (name data)\n                                                :on-change\n                                                (fn keyword-changed [e]\n                                                  (emit-fn :changed path (keyword (.. e -target -value))))}]\n                                       [KeywordText data])\n\n                                     (object? data)\n                                     (str data \" \" (.stringify js/JSON data))\n\n                                     (number? data)\n                                     (if swappable\n                                       [:input {:type \"number\"\n                                                :default-value data\n                                                :on-change\n                                                (fn number-changed [e]\n                                                  (emit-fn :changed path (js/Number (.. e -target -value))))}]\n                                       [NumberText data])\n                                     :else\n                                     (str data))\n   (when-let [errors (:error (get metadata-paths path))]\n     [ErrorText (str \"\\u00A0 \" errors)])])\n\n(defn expandable? [v]\n  (or (map? v) (seq? v) (coll? v)))\n\n(defn CollectionSummary [{:keys [data]}]\n  (cond (map? data) [:div {:style {:flex \"0 1 auto\"}}\n                     [:span \"{\"]\n                     [KeySet (keys data)]\n                     [:span \"}\"]]\n        (set? data) [:div {:style {:flex \"0 1 auto\"}} [:span \"#{\"]\n                     (str (count data) \" items\")\n                     [:span \"}\"]]\n        (or (seq? data)\n            (vector? data)) [:div {:style {:flex 1}}\n                             [:span (if (vector? data) \"[\" \"(\")]\n                             (str (count data) \" items\")\n                             [:span (if (vector? data) \"]\" \")\")]]))\n\n(defn KeyValNode [{[k v] :data :keys [path metadata-paths emit-fn swappable]}]\n  (let [path-to-here (conj path k)\n        expandable-node? (and (expandable? v)\n                              (not (empty? v)))\n        metadata (get metadata-paths path-to-here)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     [:div {:style {:display \"flex\"}}\n      [:div {:style {:flex \"0 0 20px\"}}\n       (when expandable-node?\n         [ExpandButton {:expanded? expanded?\n                        :path path-to-here\n                        :emit-fn emit-fn}])]\n      [:div {:style {:flex \"0 1 auto\"}}\n       [:div {:style {:display \"flex\"\n                      :flex-flow \"row\"}}\n        [:div {:style {:flex \"0 1 auto\"}}\n         [Node {:data k}]]\n        [:div {:style {:flex \"0 1 auto\" :paddingLeft \"4px\"}}\n         (if (expandable? v)\n           [CollectionSummary {:data v}]\n           [Node {:data v\n                  :swappable swappable\n                  :path path-to-here\n                  :metadata-paths metadata-paths\n                  :emit-fn emit-fn}])]]]]\n     (when expanded?\n       [:div {:style {:flex \"1\"}}\n        [DataFrisk {:hide-header? true\n                    :data v\n                    :swappable swappable\n                    :path path-to-here\n                    :metadata-paths metadata-paths\n                    :emit-fn emit-fn}]])]))\n\n(defn ListVecNode [{:keys [data path metadata-paths emit-fn swappable hide-header?]}]\n  (let [metadata (get metadata-paths path)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     (when-not hide-header?\n       [:div {:style {:display \"flex\"}}\n        (when (:error metadata)\n          [:div {:style {:margin-left \"-1em\"\n                         :width \"1em\"\n                         :height \"1.2em\"}}\n           [ErrorIcon]])\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}]\n        [:div {:style {:flex \"0 1 auto\"}}\n         [:span (if (vector? data) \"[\" \"(\")]\n         (str (count data) \" items\")\n         [:span (if (vector? data) \"]\" \")\")]]])\n     (when expanded?\n       [:div {:style {:flex \"0 1 auto\" :padding \"0 0 0 20px\"}}\n        (when (:error metadata)\n          [:div {:style {:paddingBottom \"4px\"}}\n           [ErrorText (:error metadata)]])\n        (map-indexed (fn [i x] ^{:key i} [DataFrisk {:data x\n                                                     :swappable swappable\n                                                     :path (conj path i)\n                                                     :metadata-paths metadata-paths\n                                                     :emit-fn emit-fn}]) data)])]))\n\n(defn SetNode [{:keys [data path metadata-paths emit-fn swappable hide-header?]}]\n  (let [metadata (get metadata-paths path)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     (when-not hide-header?\n       [:div {:style {:display \"flex\"}}\n        (when (:error metadata)\n          [:div {:style {:margin-left \"-1em\"\n                         :width \"1em\"\n                         :height \"1.2em\"}}\n           [ErrorIcon]])\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}]\n        [:div {:style {:flex \"0 1 auto\"}}\n         [:span \"#{\"]\n         (str (count data) \" items\")\n         [:span \"}\"]]])\n     (when expanded?\n       [:div {:style {:flex \"0 1 auto\" :paddingLeft \"20px\"}}\n        (when (:error metadata)\n          [:div {:style {:paddingBottom \"4px\"}}\n           [ErrorText (:error metadata)]])\n        (map-indexed (fn [i x] ^{:key i} [DataFrisk {:data x\n                                                     :swappable swappable\n                                                     :path (conj path i)\n                                                     :metadata-paths metadata-paths\n                                                     :emit-fn emit-fn}]) data)])]))\n\n(defn MapNode [{:keys [data path metadata-paths emit-fn hide-header?] :as all}]\n  (let [metadata (get metadata-paths path)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     (when-not hide-header?\n       [:div {:style {:display \"flex\"}}\n        (when (:error metadata)\n          [:div {:style {:margin-left \"-1em\"\n                         :width \"1em\"\n                         :height \"1.2em\"}}\n           [ErrorIcon]])\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}]\n        [:div {:style {:flex \"0 1 auto\"}}\n         [:span (str \"{\")]\n         [KeySet (keys data)]\n         [:span \"}\"]]])\n     (when expanded?\n       [:div {:style {:flex \"0 1 auto\" :paddingLeft \"20px\"}}\n        (when (:error metadata)\n          [:div {:style {:paddingBottom \"4px\"}}\n           [ErrorText (:error metadata)]])\n        (->> data\n             (sort-by (fn [[k _]] (str k)))\n             (map-indexed (fn [i x] ^{:key i} [KeyValNode (assoc all :data x)])))])]))\n\n(defn DataFrisk [{:keys [data] :as all}]\n  (cond (map? data) [MapNode all]\n        (set? data) [SetNode all]\n        (or (seq? data) (vector? data)) [ListVecNode all]\n        (satisfies? IDeref data) [DataFrisk (assoc all :data @data)]\n        :else [:div {:style {:paddingLeft \"20px\"}} [Node all]]))\n\n(defn conj-to-set [coll x]\n  (conj (or coll #{}) x))\n\n(defn expand-all-paths [root-value current-expanded-paths]\n  (loop [remaining [{:path [] :node root-value}]\n         expanded-paths current-expanded-paths]\n    (if (seq remaining)\n      (let [[current & rest] remaining\n            current-node (if (satisfies? IDeref (:node current)) @(:node current) (:node current))]\n        (cond (map? current-node)\n              (recur\n               (concat rest (map (fn [[k v]] {:path (conj (:path current) k)\n                                              :node v})\n                                 current-node))\n               (assoc-in expanded-paths [(:path current) :expanded?] true))\n\n              (or (seq? current-node)\n                  (vector? current-node)\n                  (set? current-node))\n              (recur\n               (concat rest (map-indexed (fn [i node] {:path (conj (:path current) i)\n                                                       :node node})\n                                         current-node))\n               (assoc-in expanded-paths [(:path current) :expanded?] true))\n\n              :else\n              (recur\n               rest\n               (if (coll? current-node)\n                 (assoc-in expanded-paths [(:path current) :expanded?] true)\n                 expanded-paths))))\n      expanded-paths)))\n\n(defn copy-to-clipboard [data]\n  (let [pretty (with-out-str (pprint data))\n        textArea (.createElement js/document \"textarea\")]\n    (doto textArea\n      ;; Put in top left corner of screen\n      (aset \"style\" \"position\" \"fixed\")\n      (aset \"style\" \"top\" 0)\n      (aset \"style\" \"left\" 0)\n      ;; Make it small\n      (aset \"style\" \"width\" \"2em\")\n      (aset \"style\" \"height\" \"2em\")\n      (aset \"style\" \"padding\" 0)\n      (aset \"style\" \"border\" \"none\")\n      (aset \"style\" \"outline\" \"none\")\n      (aset \"style\" \"boxShadow\" \"none\")\n      ;; Avoid flash of white box\n      (aset \"style\" \"background\" \"transparent\")\n      (aset \"value\" pretty))\n\n    (.appendChild (.-body js/document) textArea)\n    (.select textArea)\n\n    (.execCommand js/document \"copy\")\n    (.removeChild (.-body js/document) textArea)))\n\n(defn collapse-all [metadata-paths]\n  (map-vals #(assoc % :expanded? false) metadata-paths))\n\n(defn emit-fn-factory [state-atom id swappable]\n  (fn [event & args]\n    (case event\n      :expand (swap! state-atom assoc-in [:data-frisk id :metadata-paths (first args) :expanded?] true)\n      :expand-all (swap! state-atom update-in [:data-frisk id :metadata-paths] (partial expand-all-paths (first args)))\n      :contract (swap! state-atom assoc-in [:data-frisk id :metadata-paths (first args) :expanded?] false)\n      :collapse-all (swap! state-atom update-in [:data-frisk id :metadata-paths] collapse-all)\n      :copy (copy-to-clipboard (first args))\n      :changed (let [[path value] args]\n                 (if (seq path)\n                   (swap! swappable assoc-in path value)\n                   (reset! swappable value))))))\n\n(defn Root [data id state-atom]\n  (let [data-frisk (:data-frisk @state-atom)\n        swappable (when (satisfies? IAtom data)\n                    data)\n        emit-fn (emit-fn-factory state-atom id swappable)\n        metadata-paths (get-in data-frisk [id :metadata-paths])]\n    [:div\n     [:div {:style {:padding \"4px 2px\"}}\n      [ExpandAllButton emit-fn data]\n      [CollapseAllButton emit-fn]\n      [CopyButton emit-fn data]]\n     [:div {:style {:flex \"0 1 auto\"}}\n      [DataFrisk {:data data\n                  :swappable swappable\n                  :path []\n                  :metadata-paths metadata-paths\n                  :emit-fn emit-fn}]]]))\n\n(defn VisibilityButton\n  [visible? update-fn]\n  [:button {:style {:border 0\n                    :backgroundColor \"transparent\" :width \"20px\" :height \"20px\"}\n            :onClick update-fn}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width \"100%\" :height \"100%\"\n          :style {:transition \"all 0.2s ease\"\n                  :transform (when visible? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"black\"}]]])\n\n(defn ^{:category :pinkie}\n  DataFriskView [data]\n  (let [expand-by-default (reduce #(assoc-in %1 [:data-frisk %2 :metadata-paths [] :expanded?] true) {} (range (count data)))\n        state-atom (r/atom expand-by-default)]\n    (fn [& data]\n      (let [data-frisk (:data-frisk @state-atom)\n            visible? (:visible? data-frisk)]\n        [:div {:style (merge {:flex-flow \"row nowrap\"\n                              :transition \"all 0.3s ease-out\"\n                              :z-index \"5\"}\n                             (when-not visible?\n                               {:overflow-x \"hide\"\n                                :overflow-y \"hide\"\n                                :max-height \"30px\"\n                                :max-width \"100px\"})\n                             (:shell styles))}\n         [VisibilityButton visible? (fn [_] (swap! state-atom assoc-in [:data-frisk :visible?] (not visible?)))]\n         [:span \"Data frisk\"]\n         (when visible?\n           [:div {:style {:padding \"10px\"\n                          ;; TODO Make the max height and width adjustable\n                          ;:max-height \"400px\"\n                          ;:max-width \"800px\"\n                          :resize \"both\"\n                          :box-sizing \"border-box\"\n                          :overflow-x \"auto\"\n                          :overflow-y \"auto\"}}\n            (map-indexed (fn [id x]\n                           ^{:key id} [Root x id state-atom]) data)])]))))\n\n(defn frisk [data]\n  [DataFriskView data])"],"x_google_ignoreList":[0]}