{"version":3,"sources":["pinkie/pinkie.cljc"],"mappings":"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","names":["pinkie.pinkie/component-registry","reagent.core.atom","pinkie.pinkie/register-tag","pinkie-tag","func","cljs.core.swap_BANG_","cljs.core/assoc","pinkie.pinkie/get-component","tag","G__49191","cljs.core/deref","pinkie.pinkie/get-renderer","pinkie.pinkie/component-list","cljs.core/vals","pinkie.pinkie/tags","cljs.core/keys","pinkie.pinkie/clj->json","ds","js/JSON","cljs.core/clj->js","pinkie.pinkie/pinkie-namespace","cljs.core/namespace","pinkie.pinkie/pinkie-tag?","kw-namespace","cljs.core._EQ_","pinkie.pinkie/pinkie-exclude?","hiccup-vector","cljs.core/contains?","cljs.core/meta","pinkie.pinkie/hiccup-vector?","cljs.core/vector?","cljs.core/map-entry?","cljs.core/Keyword","cljs.core/first","pinkie.pinkie/should-replace?","pinkie.pinkie/unknown-tag","pinkie.pinkie/replace-tag-in-hiccup-vector","render-function","cljs.core.println","cljs.core/name","cljs.core.into","cljs.core.assoc","pinkie.pinkie/tag-inject","clojure.walk/prewalk","x","pinkie.pinkie/to-map-style","s","style-vec","p1__49236#","cljs.core.map","clojure.string.split","iter__5523__auto__","s__49258","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__49261","cljs.core/chunk-buffer","i__49260","vec__49274","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49257","cljs.core/chunk-rest","vec__49283","cljs.core/cons","cljs.core/rest","k","v","cljs.core.keyword","clojure.string/trim","pinkie.pinkie/is-style?","cljs.core/second","pinkie.pinkie/replace-style","cljs.core/last","pinkie.pinkie/convert-style-as-strings-to-map","pinkie.pinkie/render-as?","pinkie.pinkie/wrap-renderer","renderer","pinkie.pinkie/convert-render-as","clojure.walk/postwalk","cljs.core/chunk-first"],"sourcesContent":["(ns pinkie.pinkie\n  (:require\n   [clojure.string :as str]\n   [clojure.walk :refer [prewalk postwalk]] ; cljs 1.10 still does not have walk fixed\n   ; [pinkie.walk :refer [prewalk]] ; TODO: replace this as soon as 1.11 cljs is out.\n   #?(:cljs [reagent.core :as r :refer [atom]])\n  ; #?(:cljs [reagent.impl.template :refer [HiccupTag cached-parse]])\n ;  [taoensso.timbre :refer-macros (info)]\n   ))\n\n; notes\n; has to be cljc file, because register-tag is a macro\n\n(def component-registry (atom {}))\n\n(defn register-tag\n  \"registers a reagent component in the pinkie registry.\n   does not capture meta data\"\n  [pinkie-tag func]\n  (swap! component-registry assoc pinkie-tag {:meta {}\n                                              :tag pinkie-tag\n                                              :fun func}))\n\n(defmacro register-component\n  \"registers a reagent component in the pinkie registry.\n   Captures meta-data of the function symbol.\"\n  [pinkie-tag func]\n  `(swap! component-registry assoc ~pinkie-tag {:meta (meta (var ~func))\n                                                :tag ~pinkie-tag\n                                                :fun ~func}))\n\n(defn get-component [tag]\n  (tag @component-registry))\n\n(defn get-renderer [tag]\n  (:fun (get-component tag)))\n\n(defn component-list []\n  (vals @component-registry))\n\n(defn tags []\n  (keys @component-registry))\n\n  ; it would be ideal to let reagent deal with this, but the below line did not work.\n  ;(gobj/set reagent.impl.template/tag-name-cache (name k) v)\n\n; mfikes approach would be great, but does not work\n; https://github.com/reagent-project/reagent/issues/362\n\n#_(defn register-tag2 [k v]\n    (gobj/set reagent.impl.template/tag-name-cache k v))\n\n#_(defn register-tag3 [kw c]\n    (register-tag2 (name kw) (r/as-element c)))\n\n#?(:cljs (defn clj->json\n           [ds]\n           (.stringify js/JSON (clj->js ds))))\n\n(def pinkie-namespace (namespace :p/test))\n\n(defn pinkie-tag? [tag]\n  (let [kw-namespace (namespace tag)]\n    (= pinkie-namespace kw-namespace)))\n\n(defn pinkie-exclude? [hiccup-vector]\n  (contains? (meta hiccup-vector) :r))\n\n(defn- hiccup-vector? [hiccup-vector]\n  (and\n   (vector? hiccup-vector)\n   (not (map-entry? hiccup-vector)); ignore maps\n   (keyword? (first hiccup-vector)); reagent syntax requires first element  to be a keyword\n   ))\n\n(defn should-replace? [hiccup-vector]\n  (if (hiccup-vector? hiccup-vector)\n    (let [tag (first hiccup-vector)]\n      (and (not (pinkie-exclude? hiccup-vector))\n           (pinkie-tag? tag)\n           #_(not (html5-tag? tag))))\n    false))\n\n(defn unknown-tag\n  \"ui component for unknown tags - so that we don't need to catch react errors\n   Currently not yet used (see resolve function)\"\n  [tag]\n  [:span.unknown-tag {:style {:background-color \"red\"}}\n   (str \"Unknown Tag: \" tag)])\n\n(defn replace-tag-in-hiccup-vector\n  \"input: hiccup vector\n   if keyword (first position in vector) has been registered via register-tag,\n   then it gets replaced with the react function,\n   otherwise keyword remains\"\n  [hiccup-vector]\n  (let [;_ (.log js/console \"pinkie replacing: \" (pr-str hiccup-vector))\n        tag (first hiccup-vector)\n        render-function (get-renderer tag)]\n    (if (nil? render-function)\n      (do (println \"pinkie unknown tag: \" (name tag))\n          (unknown-tag tag))\n      (into [] (assoc hiccup-vector 0 render-function)))))\n\n(defn  tag-inject\n  \"resolve function-as symbol to function references in the reagent-hickup-map.\n   Leaves regular hiccup data unchanged.\"\n  [hiccup-vector]\n  (prewalk\n   (fn [x]\n     (if (should-replace? x)\n       (replace-tag-in-hiccup-vector x)\n       x))\n   hiccup-vector))\n\n;; Hiccup accepts Style as string, but Reagent does not.\n;; Example: [:rect {:width \"100%\", :height \"100%\", :style \"stroke: none; fill: #FFFFFF;\"}]  \n\n(defn to-map-style [s]\n  (let [style-vec (map #(str/split % #\":\") (str/split s #\";\"))]\n    (into {}\n          (for [[k v] style-vec]\n            [(keyword (str/trim k)) (str/trim v)]))))\n\n(defn is-style? [x]\n  ;(println \"is-style? \" x)\n  (if (and (vector? x)\n           (= 2 (count x))\n           (= (first x) :style)\n           (string? (second x)))\n    true\n    false))\n\n(defn replace-style [x]\n  (println \"pinkie replacing string style: \" x)\n  (into [] (assoc x 1 (to-map-style (last x)))))\n\n(defn convert-style-as-strings-to-map\n  \"resolve function-as symbol to function references in the reagent-hickup-map.\n   Leaves regular hiccup data unchanged.\"\n  [hiccup-vector]\n  (prewalk\n   (fn [x]\n     (if (is-style? x)\n       (replace-style x)\n       x))\n   hiccup-vector))\n\n(comment\n  (to-map-style \"background-color: blue; font-size: 14px\")\n;=> {:background-color \"blue\" :font-size \"14px\"}  \n  )\n;; RENDER-AS\n\n(defn render-as? [hiccup-vector]\n  (contains? (meta hiccup-vector) :p/render-as))\n\n(defn wrap-renderer [x]\n  (let [renderer (:p/render-as (meta x))]\n    (println \"pinkie wrapping renderer \" renderer \" to: \" x)\n    ^:R [renderer x]))\n\n(defn convert-render-as\n  \"resolve function-as symbol to function references in the reagent-hickup-map.\n   Leaves regular hiccup data unchanged.\"\n  [hiccup-vector]\n  (postwalk\n   (fn [x]\n     (if (render-as? x)\n       (wrap-renderer x)\n       x))\n   hiccup-vector))\n\n"],"x_google_ignoreList":[0]}