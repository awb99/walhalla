{"version":3,"sources":["ui/codemirror/api/position.cljs"],"mappings":";AAEA,6CAAA,7CAAMA,kGAAiBC;AAAvB,AACE,IAAMC,MAAI,AAAYD;IAChBE,OAAK,AAAQD;IACbE,KAAG,AAAMF;AAFf,AAAA,kDAAA,yDAAA,LAGSC,yDACDC;;AAEV,+CAAA,/CAAMC,sGAAmBJ;AAAzB,AACE,IAAMK,YAAU,AAAWL;IACrBM,UAAQ,AAACC,gBAAM,AAAUP,WAAGK;AADlC,AAEE,OAAYL,aAAGK,UAAUC;;AAI7B,+CAAA,/CAAME,sGAAmBR;AAAzB,AACE,OAAYA;;AAEd,8CAAA,9CAAMS,oGAAkBT;AAAxB,AACE,OAAWA;;AAEb,iDAAA,jDAAMU,0GAAqBV;AAA3B,AACE,IAAMC,MAAI,AAAYD;AAAtB,AACE,OAAQC;;AAEZ,+CAAA,/CAAMU,sGAAaX;AAAnB,AACE,IAAMY,IAAE,AAACJ,6CAAkBR;IACrBa,IAAE,AAACH,+CAAoBV;AAD7B,AAEE,OAACc,6CAAEF,EAAEC;;AAET,8CAAA,9CAAME,oGAAYf;AAAlB,AACE,IAAMgB,IAAE,AAACP,4CAAiBT;IACpBa,IAAE,AAACH,+CAAoBV;AAD7B,AAEE,OAACc,6CAAEE,EAAEH;;AAET,2CAAA,3CAAMI,8FAAejB;AAArB,AACE,IAAMC,MAAI,AAAYD;AAAtB,0DACM,AAAeA,1DACf,OAACkB","names":["ui.codemirror.api.position/cursor-position","cm","pos","line","ch","ui.codemirror.api.position/move-to-last-line","last-line","last-ch","cljs.core/count","ui.codemirror.api.position/first-line-number","ui.codemirror.api.position/last-line-number","ui.codemirror.api.position/current-line-number","ui.codemirror.api.position/first-line?","f","c","cljs.core._EQ_","ui.codemirror.api.position/last-line?","l","ui.codemirror.api.position/cursor-coords","cljs.core.js__GT_clj"],"sourcesContent":["(ns ui.codemirror.api.position)\n\n(defn cursor-position [cm]\n  (let [pos (.getCursor cm)\n        line (.-line pos)\n        ch (.-ch pos)]\n    {:line line\n     :col ch}))\n\n(defn move-to-last-line [cm]\n  (let [last-line (.lastLine cm)\n        last-ch (count (.getLine cm last-line))]\n    (.setCursor cm last-line last-ch)))\n\n; navigate buffer up/down\n\n(defn first-line-number [cm]\n  (.firstLine cm))\n\n(defn last-line-number [cm]\n  (.lastLine cm))\n\n(defn current-line-number [cm]\n  (let [pos (.getCursor cm)]\n    (.-line pos)))\n\n(defn first-line? [cm]\n  (let [f (first-line-number cm)\n        c (current-line-number cm)]\n    (= f c)))\n\n(defn last-line? [cm]\n  (let [l (last-line-number cm)\n        c (current-line-number cm)]\n    (= l c)))\n\n(defn cursor-coords [cm]\n  (let [pos (.getCursor cm)]\n    (-> (.cursorCoords cm)\n        (js->clj))))\n\n; cm.cursorCoords(where: boolean|{line, ch}, mode: string) \u2192 {left, top, bottom}\n; Returns an {left, top, bottom} object containing the coordinates of the cursor \n; position. If mode is \"local\", they will be relative to the top-left corner of\n; the editable document. If it is \"page\" or not given, they are relative to the \n; top-left corner of the page. If mode is \"window\", the coordinates are relative \n; to the top-left corner of the currently visible (scrolled) window. where can be\n; a boolean indicating whether you want the start (true) or the end (false) of the\n; selection, or, if a {line, ch} object is given, it specifies the precise position\n; at which you want to measure.\n\n; cm.cursorCoords (Pos (1, 1))\n; cm.cursorCoords (null, \"window\") .bottom;"],"x_google_ignoreList":[0]}