{"version":3,"sources":["goldly/sci/loader/shadow_module.cljs"],"mappings":"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","names":["goldly.sci.loader.shadow-module/patch-url","uris","uri-name","base","goldly.sci.loader.static/dynamic-base","uri","l","iter__5523__auto__","s__54555","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__54557","cljs.core/chunk-buffer","i__54556","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__54554","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","el","goldly.sci.loader.shadow-module/set-shadow-load-dir","url","js/window","shadow-modules","uri-names","js/Object","cljs.core.doall","cljs.core.map","cljs.core.partial","goldly.sci.loader.shadow-module/dynamic-cljs-runtime-dir","goldly.sci.loader.shadow-module/set-github-load-mode","dir","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","goldly.sci.loader.shadow-module/sci-ns-lookup","libname","temp__5802__auto__","module-name","cljs.core.get","goldly-bindings-generated/sci-lazy-ns-dict","goldly-bindings-generated/lazy-modules","goldly.sci.loader.shadow-module/add-sci-ns","ctx","ns","opts","sci-ns","sci-defs","ns-vars","mlns","sci.core.create_ns","sci-ns-def","sci-def","ns-var","cljs.core._EQ_","sci.core.new_var","cljs.core.into","sci.core/add-namespace!","goldly.sci.loader.shadow-module/load-module-ns","loadable","goldly.sci.loader.load-shadow/load-ext-shadow","goldly.sci.loader.shadow-module/load-module","sci-mod","promises","p__54558","vec__54559","cljs.core.nth","map__54562","cljs.core/--destructure-map","p-all","promesa.core/all","_d","cljs.core/chunk-first"],"sourcesContent":["(ns goldly.sci.loader.shadow-module\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info warn error]]\n   [promesa.core]\n   [sci.core :as sci]\n   [sci.async :as scia]\n   [goldly.sci.loader.load-shadow :refer [load-ext-shadow]]\n   [goldly-bindings-generated :refer [sci-lazy-ns-dict lazy-modules]]\n   [goldly.sci.loader.static :refer [dynamic-base]]))\n\n(defn patch-url [uris uri-name]\n  (let [base (dynamic-base)\n        uri (aget uris uri-name)\n        l (.length uri)]\n    (for [i (range 0 l)]\n      (let [el (aget uri i)] ; \"/r/tick.js\"\n      (aset uri i (str base el))))))\n\n(defn set-shadow-load-dir [url]\n  ; goog.global.SHADOW_ENV.scriptBase\n  ; \"http://localhost:8080/r/cljs-runtime/\"\n  (set! (.. js/window -goog -global -SHADOW_ENV -scriptBase)\n        url)\n  (let [;Object.keys (goog.global.shadow$modules[\"uris\"])\n        shadow-modules (.. js/window -goog -global -shadow$modules)\n        uris (aget shadow-modules \"uris\")\n        uri-names (.keys js/Object uris)]\n    ; ['tick', 'ui-binaryclock', 'ui-container',\n    ; 'ui-video', 'ui-spark', 'ui-codemirror', 'ui-repl']\n    (doall (map (partial patch-url uris) uri-names))\n  ))\n\n(defn dynamic-cljs-runtime-dir []\n  (let [base (dynamic-base)]\n    (str base \"/r/cljs-runtime/\")))\n\n(defn set-github-load-mode []\n   ;  https://awb99.github.io/walhalla/r/cljs-runtime/\n  (let [dir (dynamic-cljs-runtime-dir)]\n  (info \"github shadow base: \" dir)\n  (set-shadow-load-dir dir)))\n\n\n(defn sci-ns-lookup [libname]\n  ; (str libname)\n  ;(debug \"available lazy namespaces:\" (pr-str sci-lazy-ns-dict))\n  (debug \"looking up module for sci-ns:\" libname)\n  (if-let [module-name (get sci-lazy-ns-dict libname)]\n    (do (info \"module for \" libname \": \" module-name)\n        (get lazy-modules module-name))\n    (do (info \"no lazy-module found for: \" libname)\n        nil)))\n\n(defn add-sci-ns [ctx libname ns opts sci-ns sci-defs ns-vars]\n  (info \"creating sci ns: \" sci-ns \"ns-vars:\" ns-vars \"sci-defs\" sci-defs)\n  (let [mlns (sci/create-ns sci-ns)\n        sci-ns-def (->> (map (fn [sci-def ns-var]\n                               ;(info \"ci-def:\" sci-def \"ns-var:\" ns-var)\n                               ;(when-let [joke (:joke mod)]\n                               ;  (info \"joke: \" (joke)))\n                               (when (= sci-def :add)\n                                 (info \"TEST: adding: \" (ns-var 7 7)))\n\n                               [sci-def (sci/new-var sci-def ns-var {:ns mlns})])\n                             sci-defs ns-vars)\n                        (into {}))]\n    (info \"sci/add-namespace! sci-ns: \" libname \" sci ns :\" sci-ns \"def: \" sci-ns-def)\n    (sci/add-namespace! ctx libname sci-ns-def)))\n\n(defn load-module-ns [ctx libname ns opts sci-ns sci-def loadable]\n  (-> (load-ext-shadow loadable)\n      (.then\n       (fn [ns-vars]\n         (info \"received ns-vars for sci-ns: \" sci-ns \"libname: \" libname \"ns: \" ns)\n         (add-sci-ns ctx libname ns opts sci-ns sci-def ns-vars)))))\n\n(defn load-module [ctx libname ns opts sci-mod]\n  (info \"load-module: \" libname)\n  (let [promises (map (fn [[sci-ns {:keys [sci-def loadable]}]]\n                        (load-module-ns ctx libname ns opts sci-ns sci-def loadable))\n                      sci-mod)\n        p-all (promesa.core/all promises) ; Given an array of promises, return a promise that is fulfilled when all the items in the array are fulfilled.\n        ]\n    (.then p-all\n           (fn [_d]\n             (info \"load-module: \" libname \" - finished loading all namespaces\")\n             ;(info \"all data: \" d)\n             ;; empty map return value, SCI will still process `:as` and `:refer`\n             {}))))\n\n"]}