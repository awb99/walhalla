{"version":3,"sources":["goldly/sci/loader/shadow_module.cljs"],"mappings":"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","names":["goldly.sci.loader.shadow-module/set-shadow-load-dir","url","goog","js/window","global","shadow-env","scriptbase","goldly.sci.loader.shadow-module/application-url","goldly.sci.loader.shadow-module/github-base","url-base","cljs.core.subs","goldly.sci.loader.shadow-module/last-index-of","shadow-base","goldly.sci.loader.shadow-module/set-github-load-mode","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","goldly.sci.loader.shadow-module/sci-ns-lookup","libname","temp__5802__auto__","module-name","cljs.core.get","goldly-bindings-generated/sci-lazy-ns-dict","goldly-bindings-generated/lazy-modules","goldly.sci.loader.shadow-module/add-sci-ns","ctx","ns","opts","sci-ns","sci-defs","ns-vars","mlns","sci.core.create_ns","sci-ns-def","cljs.core.map","sci-def","ns-var","cljs.core._EQ_","sci.core.new_var","cljs.core.into","sci.core/add-namespace!","goldly.sci.loader.shadow-module/load-module-ns","loadable","goldly.sci.loader.load-shadow/load-ext-shadow","goldly.sci.loader.shadow-module/load-module","sci-mod","promises","p__54554","vec__54555","cljs.core.nth","map__54558","cljs.core/--destructure-map","p-all","promesa.core/all","_d"],"sourcesContent":["(ns goldly.sci.loader.shadow-module\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info warn error]]\n   [promesa.core]\n   [sci.core :as sci]\n   [sci.async :as scia]\n   [goldly.sci.loader.load-shadow :refer [load-ext-shadow]]\n   [goldly-bindings-generated :refer [sci-lazy-ns-dict lazy-modules]]))\n\n(defn set-shadow-load-dir [url]\n  (let [; goog.global.SHADOW_ENV.scriptBase\n        ; \"http://localhost:8080/r/cljs-runtime/\"\n        goog (.-goog js/window)\n        global (.-global goog)\n        shadow-env (.-SHADOW_ENV global)\n        scriptbase (.-scriptBase shadow-env)]\n    (set! (.. js/window -goog -global -SHADOW_ENV -scriptBase)\n          url\n          )\n    ;(set! scriptbase url)\n    ))\n\n(defn application-url []\n  (-> js/window .-location .-href))\n\n(defn github-base []\n  (let [url (application-url)\n        url-base (subs url 0 (last-index-of url \"/\"))\n        shadow-base (str url-base \"/r/cljs-runtime/\")]\n    shadow-base))\n\n(defn set-github-load-mode []\n  (info \"github shadow base: \" (github-base))\n  (set-shadow-load-dir \"https://awb99.github.io/walhalla/r/cljs-runtime/\"))\n\n\n(defn sci-ns-lookup [libname]\n  ; (str libname)\n  ;(debug \"available lazy namespaces:\" (pr-str sci-lazy-ns-dict))\n  (debug \"looking up module for sci-ns:\" libname)\n  (if-let [module-name (get sci-lazy-ns-dict libname)]\n    (do (info \"module for \" libname \": \" module-name)\n        (get lazy-modules module-name))\n    (do (info \"no lazy-module found for: \" libname)\n        nil)))\n\n(defn add-sci-ns [ctx libname ns opts sci-ns sci-defs ns-vars]\n  (info \"creating sci ns: \" sci-ns \"ns-vars:\" ns-vars \"sci-defs\" sci-defs)\n  (let [mlns (sci/create-ns sci-ns)\n        sci-ns-def (->> (map (fn [sci-def ns-var]\n                               ;(info \"ci-def:\" sci-def \"ns-var:\" ns-var)\n                               ;(when-let [joke (:joke mod)]\n                               ;  (info \"joke: \" (joke)))\n                               (when (= sci-def :add)\n                                 (info \"TEST: adding: \" (ns-var 7 7)))\n\n                               [sci-def (sci/new-var sci-def ns-var {:ns mlns})])\n                             sci-defs ns-vars)\n                        (into {}))]\n    (info \"sci/add-namespace! sci-ns: \" libname \" sci ns :\" sci-ns \"def: \" sci-ns-def)\n    (sci/add-namespace! ctx libname sci-ns-def)))\n\n(defn load-module-ns [ctx libname ns opts sci-ns sci-def loadable]\n  (-> (load-ext-shadow loadable)\n      (.then\n       (fn [ns-vars]\n         (info \"received ns-vars for sci-ns: \" sci-ns \"libname: \" libname \"ns: \" ns)\n         (add-sci-ns ctx libname ns opts sci-ns sci-def ns-vars)))))\n\n(defn load-module [ctx libname ns opts sci-mod]\n  (info \"load-module: \" libname)\n  (let [promises (map (fn [[sci-ns {:keys [sci-def loadable]}]]\n                        (load-module-ns ctx libname ns opts sci-ns sci-def loadable))\n                      sci-mod)\n        p-all (promesa.core/all promises) ; Given an array of promises, return a promise that is fulfilled when all the items in the array are fulfilled.\n        ]\n    (.then p-all\n           (fn [_d]\n             (info \"load-module: \" libname \" - finished loading all namespaces\")\n             ;(info \"all data: \" d)\n             ;; empty map return value, SCI will still process `:as` and `:refer`\n             {}))))\n\n"]}