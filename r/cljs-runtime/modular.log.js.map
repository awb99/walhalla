{"version":3,"sources":["modular/log.cljc"],"mappings":";AAKA,8BAAA,sCAAAA,pEAAOI;AAAP,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAA0CK;WAA1C,AAAAH,4CAAAF,eAAA,lEAAgCI;AAAhC,AACE,IAAMC,WAAK,oDAAA,pDAACC,+CAAOD;IACbE,WAAS,AAACL,4CAAIM,oCAAcJ;AADlC,AAEE,oBAAIG;AACF,QAACA,yCAAAA,mDAAAA,ZAASF,+BAAAA;;AACV,AAAI,yGAAA,zGAACI,gIAA+BL;;AAApC;;;AAGN,+BAAA,/BAAOM,sEAAkBC;AAAzB,AAAA,kDAAA,mNAEQ,AAACC,4CAAI,WAAAC,3HAKL,AAACK,+CAAOC,/HACR,6CAAA,7CAACC;AANI,AAAA,IAAAN,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAME;WAAN,AAAAD,4CAAAD,WAAA,IAAA,lEAAWT;AAAX,AACE,IAAMY,IAAE,AAACd,4BAAgBE;AAAzB,AACE,oBAAIY;AAAJ,0FACGD,KAAKC;;AADR;;GAESN;;AAI1B,kCAAA,0CAAAU,5EAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAArB,4BAAAqB;aAAAA,TAG2BI;gBAH3B,AAAAxB,4CAAAoB,eAAA,+DAAA,tIAA8BE;gBAA9B,AAAAtB,4CAAAoB,eAAA,vEAAwCX,sIAEFc;AAFtC,AAME,yGAAA,sCAAA,/IAAChB,qIAAoCe,wBAAyBb;;AAE9D,OAACgB,iCACA,8KAAA,2CAAA,zNAACC,uGAAMC,+BACA,AAACnB,6BAAiBC,qHAQNa","names":["p__57065","map__57067","cljs.core/--destructure-map","cljs.core.get","modular.log/create-appender","type","opts","cljs.core.dissoc","appender","modular.log.appenders/appender-list","cljs.core.println","modular.log/create-appenders","appenders","cljs.core.map","p__57079","vec__57081","cljs.core.nth","name","a","cljs.core.remove","cljs.core/nil?","cljs.core.into","p__57088","map__57089","modular.log/timbre-config!","min-level","modular.log.appenders/default-appenders","config","taoensso.timbre/set-config!","cljs.core.merge","taoensso.timbre/default-config"],"sourcesContent":["(ns modular.log\n  (:require\n   [taoensso.timbre :as timbre]\n   [modular.log.appenders :refer [appender-list default-appenders]]))\n\n(defn- create-appender [{:keys [type] :as opts}]\n  (let [opts (dissoc opts :type)\n        appender (get appender-list type)]\n    (if appender\n      (appender opts)\n      (do (println \"appender not found: \" type)\n          nil))))\n\n(defn- create-appenders [appenders]\n  {:appenders\n   (->> (map (fn [[name opts]]\n               (let [a (create-appender opts)]\n                 (if a\n                   [name a]\n                   nil))) appenders)\n        (remove nil?)\n        (into {}))})\n\n(defn timbre-config! [{:keys [min-level appenders]\n                       :or {min-level :info\n                            appenders default-appenders}\n                       :as config}]\n    ; use println, because at timbre configuration it is not sure where logging\n    ; output would be written to.\n  (println \"timbre config min-level: \" min-level \"appenders: \"  appenders)\n    ;(println \"appender setup: \" (create-appenders appenders))\n  (timbre/set-config!\n   (merge timbre/default-config\n          (create-appenders appenders)\n          {;:output-fn default-output-fn\n              ; :middleware [(fn [data] \n              ;                (println \"context: \" (:context data))\n              ;                ;(println \"middleware: \" data)\n              ;                ;(assoc data :vargs [\"qux\"])\n              ;                data\n              ;                )]\n           :min-level min-level})))\n\n\n"],"x_google_ignoreList":[0]}