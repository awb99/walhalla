{"version":3,"sources":["goldly/offline/app.cljs"],"mappings":";;;;AAYA,+BAAA,/BAAMA,sEAAWC;AAAjB,AACE,wDAAA,jDAACC,oIACCD,gBACD,wBAAA,xBAAiBE;;AAEpB,gCAAA,hCAAMC;AAAN,AACE,AAACC;;AACD,OAACC,kDAAO,AAACC;;AAIX,AAAA,2BAAA,mCAAAC,9DAAeE;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,yDAAA,zDAAeD,oEACXE;AADJ,AAEG,oFAAA,7EAACC,uDAAMD;;;AAFV,CAAA,yDAAA,zDAAeF,oEAGXE,sBAAsBE;AAH1B,AAIG,AAACC;;AACD,AAACX;;AACD,oBAAMU;AAAN,AACE,AAAAE,0DAAAC,mCAAA,qDAAA,qBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,0BAAgCJ;GAAhC,OAAA,KAAA,MAAA;;AACA,IAAMK,oBAAY,AAACC,+CAAON;IACpBO,gBAAQ,+CAAA,oBAAIF,pBAAYG,/CAAUF;IAClCG,kBAAU,AAACC,4HAAcH;AAF/B,AAGE,AAAOE,qBAAU,WAAKE;AAAL,AACE,IAAMC,UAAQ,AAACC,sCAAeR;AAA9B,AACE,oBAAIO;AACF,QAACA,wCAAAA,0CAAAA;;AACD,wHAAA,sFAAA,tMAACE,yDAAAA,0GAAAA,rBAAoCT,sFAAAA;;;;AAC5D,AAAQI,sBAAU,WAAKM;AAAL,AACE,wHAAA,mEAAA,nLAACD,yDAAAA,uFAAAA,PAA+BC,mEAAAA;;;AAXxD;;AAYA,yGAAA,zGAACC,mJAAkDlB;;AACnD,IAAMmB,cAAY,AAACX,+CAAOR;IACpBS,UAAQ,+CAAA,oBAAIU,pBAAYT,/CAAUF;IAClCG,YAAU,AAACC,4HAAcH;AAF/B,AAGE,AAAOE,eAAU,WAAKE;AAAL,AACE,IAAMxB,UAAQ,AAAC0B,sCAAeI;AAA9B,AACE,oBAAI9B;AACF,OAACD,6BAAUC;;AACX,gHAAA,zGAAC6B,oIAAmCC;;;;AAC3D,OAAQR,gBAAU,WAAKM;AAAL,AACE,gHAAA,zGAACC,sIAAqCT;;;;AA5B/D,CAAA,mDAAA,nDAAeX;;AAAf","names":["goldly.offline.app/mount-app","page-fn","reagent.dom.render","js/document","goldly.offline.app/patch-path","goldly.sci.loader.cljs-source-http/set-github-load-mode","goldly.offline.app.goog$module$shadow$loader.init","goldly.sci.loader.static/dynamic-base","var_args","G__54658","goldly.offline.app/start","js/Error","symbol-page-as-string","goldly.offline.app.start","symbol-init-as-string","cljs.core/enable-console-print!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","init-symbol","cljs.core.symbol","libspec","cljs.core/namespace","require-p","goldly.sci.kernel_cljs.require_async","res","init-fn","goldly.sci.kernel-cljs/resolve-symbol","goldly.offline.app/error","err","cljs.core.println","page-symbol"],"sourcesContent":["(ns goldly.offline.app\n  (:require\n   [reagent.dom]\n   [taoensso.timbre :refer-macros [info warn]]\n   [shadow.loader :as l]\n   [goldly.sci.loader.static :refer [dynamic-base]]\n   [goldly.sci.loader.cljs-source-http :as cljs-source]\n   [goldly.sci.loader.shadow-module :as shadow-module]\n   [goldly.sci.kernel-cljs :refer [require-async resolve-symbol]]))\n\n; required in goldly.app.build\n\n(defn mount-app [page-fn]\n  (reagent.dom/render\n   [page-fn]\n   (.getElementById js/document \"app\")))\n\n(defn patch-path []\n  (cljs-source/set-github-load-mode)\n  (l/init (dynamic-base)) ; prefix to the path loader\n  ;(shadow-module/set-github-load-mode)\n  )\n\n(defn ^:export start\n  ([symbol-page-as-string]\n   (start symbol-page-as-string nil))\n  ([symbol-page-as-string symbol-init-as-string]\n   (enable-console-print!)\n   (patch-path)\n   (when symbol-init-as-string\n     (info \"starting with init-fn: \" symbol-init-as-string)\n     (let [init-symbol (symbol symbol-init-as-string)\n           libspec (-> init-symbol namespace symbol)\n           require-p (require-async libspec)]\n       (.then require-p (fn [res]\n                          (let [init-fn (resolve-symbol init-symbol)]\n                            (if init-fn\n                              (init-fn)\n                              (error \"could not resolve init-fn: \" init-symbol)))))\n       (.catch require-p (fn [err]\n                           (error \"exception in init-fn: \" err)))))\n   (println \"starting goldly static app page symbol:\" symbol-page-as-string)\n   (let [page-symbol (symbol symbol-page-as-string)\n         libspec (-> page-symbol namespace symbol)\n         require-p (require-async libspec)]\n     (.then require-p (fn [res]\n                        (let [page-fn (resolve-symbol page-symbol)]\n                          (if page-fn\n                            (mount-app page-fn)\n                            (println \"could not resolve page: \" page-symbol)))))\n     (.catch require-p (fn [err]\n                         (println \"could not sci-require ns: \" libspec))))))\n\n"]}