{"version":3,"sources":["ui/codemirror/bound/core.cljs"],"mappings":"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","names":["ui.codemirror.bound.core/focus-cm!","cm","ui.codemirror.bound.core/blur-cm!","input","p__54650","map__54651","cljs.core/--destructure-map","cljs.core.get","ui.codemirror.bound.core/focus-active","id","active?","view-only","cm-opts","and__5043__auto__","cljs.core/not","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","p__54654","map__54655","ui.codemirror.bound.core/blur-inactive","or__5045__auto__","ui.codemirror.bound.core/create-editor","el","opts-js","ui.codemirror.unbound.options/ensure-initialized","js/module$node_modules$codemirror$lib$codemirror","cljs.core.swap_BANG_","ui.codemirror.registry/active-editor-atom","cljs.core/assoc","ui.codemirror.bound.core/destroy-editor","temp__5802__auto__","ui.codemirror.registry/get-editor","cljs.core/dissoc","p__54668","map__54669","ui.codemirror.bound.core/codemirror-reagent","get-data","fun","opts","cljs.core.merge","ui.codemirror.unbound.options/cm-default-opts","make-event-handler","f","s","evt","G__54672","G__54673","G__54674","reagent.core.create_class","this","reagent.dom/dom-node","cljs.core/clj->js","cm_","code","ui.codemirror.cm-events.change/on-change","ui.codemirror.cm-events.key/on-key-down","ui.codemirror.cm-events.key/on-key-up","ui.codemirror.cm-events.mouse/on-mousedown","old-argv","vec__54677","cljs.core.nth","_","reagent.core/argv","temp__5804__auto__","ui.codemirror.cm-events.change/editor-load-content","map__54683","readOnly"],"sourcesContent":["(ns ui.codemirror.bound.core\n  (:require\n   [taoensso.timbre :refer-macros [debug debugf info infof warn error]]\n   [reagent.core :as r]\n   [reagent.dom :as rd]\n   [\"codemirror\" :as CodeMirror]\n   [\"codemirror/addon/edit/closebrackets\"]\n   [\"codemirror/addon/edit/matchbrackets\"]\n   [\"codemirror/addon/hint/show-hint\"]\n   [\"codemirror/addon/runmode/runmode\"]\n   [\"codemirror/addon/runmode/colorize\"]\n   [\"codemirror/mode/clojure/clojure\"]\n   [\"codemirror/mode/markdown/markdown\"]\n   ; [cljsjs.codemirror.mode.xml]\n   ; [cljsjs.codemirror.mode.javascript]\n   ; [\"parinfer-codemirror\"]\n   ; [cljsjs.codemirror.mode.clojure-parinfer]\n   ;[\"codemirror/keymap/vim\"]\n   [ui.codemirror.registry :refer [active-editor-atom get-editor]]\n   [ui.codemirror.unbound.theme]\n   [ui.codemirror.unbound.options :refer [cm-default-opts ensure-initialized]]\n   [ui.codemirror.highlight]\n   [ui.codemirror.cm-events.change :refer [editor-load-content on-change]]\n   [ui.codemirror.cm-events.key :refer [on-key-down on-key-up]]\n   [ui.codemirror.cm-events.mouse :refer [on-mousedown]]))\n\n(defn focus-cm!\n  [cm]\n  (when cm\n    (.focus cm)))\n\n(defn blur-cm!\n  [cm]\n  (when cm\n    (let [input (.getInputField cm)]\n      (.blur input))))\n\n(defn focus-active [id {:keys [active? view-only] :as cm-opts} cm]\n  (when (and active? (not view-only))\n    (debugf \"focusing cm %s ..\" id  \"active:\" active? \"view-only: \" view-only)\n    (focus-cm! cm)))\n\n(defn blur-inactive [id {:keys [active? view-only] :as cm-opts} cm]\n  (when (or (not active?) view-only)\n    (debugf \"blurring cm %s\" id  \"active:\" active? \"view-only: \" view-only)\n    (blur-cm! cm)))\n\n(defn create-editor [id el opts-js]\n  (info \"creating codemirror-js id: \" id)\n  (ensure-initialized)\n  ;cm_ (CodeMirror. el opts-js)\n  (let [cm (.fromTextArea CodeMirror el opts-js)]\n    (swap! active-editor-atom assoc id cm)\n    cm))\n\n(defn destroy-editor [id]\n  (info \"destroying codemirror-js id: \" id)\n  (if-let [cm (get-editor id)]\n    (do (.toTextArea cm)\n        (swap! active-editor-atom dissoc id))\n    (warn \"Could not kill CodeMirror instance id: \" id)))\n\n(defn codemirror-reagent\n  \"code-mirror editor\"\n  [id {:keys [get-data] :as fun} cm-opts]\n  (let [opts  (merge\n               cm-default-opts\n               cm-opts\n               {:readOnly (:view-only cm-opts)})\n        ;_ (warn \"opts: \" opts)\n        make-event-handler (fn [f]\n                             (fn [s evt]\n                               ;(info \"cm event - evt: \" evt \" cm:\" s)\n                               (f {:id id\n                                   :cm-opts opts\n                                   :fun fun\n                                   :cm (get-editor id)} s evt)))]\n    (r/create-class\n     {:component-did-mount\n      (fn [this]\n        (let [el (rd/dom-node this)\n              opts-js (clj->js opts)\n              ;_ (info \"component-did-mount: cm\")\n              cm_ (create-editor id el opts-js)\n              code (get-data id)]\n          (.setValue cm_ code)\n\n          ; theme - already set in cm constructor\n          ;(.setOption inst \"theme\" (:theme opts))\n\n          (.on cm_ \"change\" (make-event-handler on-change))\n          (.on cm_ \"keydown\"  (make-event-handler on-key-down))\n          (.on cm_ \"keyup\"   (make-event-handler on-key-up))\n          (.on cm_ \"mousedown\" (make-event-handler on-mousedown))\n\n          (blur-inactive id opts cm_)\n          (focus-active id opts cm_)\n\n          ;(when on-cm-init (on-cm-init inst))\n          ))\n\n      :component-will-unmount\n      (fn [this]\n        (debug \"cm component-will-unmount\")\n        (destroy-editor id))\n\n      :component-did-update\n      (fn [this old-argv]\n        (let [[_ id fun opts] (r/argv this)]\n          ;(info \"component-did-update: current buffer: \" eval-result9         \n          (when-let [cm (get-editor id)]\n            (editor-load-content cm (get-data id))\n            (blur-inactive id opts cm)\n            (focus-active id opts cm))\n          ;\n          ))\n\n      :reagent-render\n      (fn []\n        (let [{:keys [readOnly]} opts]\n          (if readOnly\n            [:textarea {:read-only true}]\n            [:textarea])))})))\n\n\n\n"],"x_google_ignoreList":[0]}