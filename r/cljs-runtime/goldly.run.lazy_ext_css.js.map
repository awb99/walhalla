{"version":3,"sources":["goldly/run/lazy_ext_css.cljs"],"mappings":"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","names":["goldly.run.lazy-ext-css/mapping-table","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.pr_str","p__54570","map__54571","cljs.core/--destructure-map","cljs.core.get","goldly.run.lazy-ext-css/lazy?","name","lazy","ext","js/goldly","js/goldly.run","js/goldly.run.lazy-ext-css","js/goldly.run.lazy-ext-css.lazy-loaded-atom","goldly.run.lazy-ext-css/lazy-loaded-atom","cljs.core.atom","p__54572","map__54573","goldly.run.lazy-ext-css/loaded?","cljs.core/not","cljs.core/deref","cljs.core/contains?","goldly.run.lazy-ext-css/lookup-module","symbol-fn","fn-name","cljs.core/name","goldly.run.lazy-ext-css/themes","goldly.run.lazy-ext-css/load-css","ext-name","ext-theme","or__5045__auto__","evt","re-frame.core/dispatch","goldly.run.lazy-ext-css/goldly-on-load","temp__5802__auto__","cljs.core.swap_BANG_","cljs.core/conj","goldly.run.lazy-ext-css/add-load-status","ext-seq","add-load","x","cljs.core.assoc","cljs.core.into","cljs.core.map"],"sourcesContent":["(ns goldly.run.lazy-ext-css\n  (:require-macros\n   [goldly.app.build :refer [compiled-ext-fns theme-registry]])\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [trace debug debugf info infof warn error errorf]]\n   [clojure.set]\n   [re-frame.core :as rf]\n   [goldly.offline.old :refer [static? get-ext-static]]))\n\n(def mapping-table (compiled-ext-fns))\n\n(warn \"compiled extension mappings:\" (pr-str mapping-table))\n\n(defn lazy? [{:keys [name lazy] :as ext}]\n  lazy)\n\n(defonce lazy-loaded-atom (atom #{}))\n\n(defn loaded? [{:keys [name lazy] :as ext}]\n  (or (not (lazy? ext))\n      (contains? @lazy-loaded-atom name)))\n\n(defn lookup-module [symbol-fn]\n  (let [fn-name (name symbol-fn)]\n    (get mapping-table fn-name)))\n\n;; theme registry\n\n(def themes (theme-registry))\n\n(warn \"lazy themes :\" themes)\n\n(defn load-css [ext-name]\n  (info \"layz-loading css for: \" ext-name)\n  (let [ext-theme (or (get themes ext-name)\n                      {:available {}\n                       :current {}})\n        evt [:css/add-components (:available ext-theme) (:current ext-theme)]]\n    (warn \"theme for \" ext-name \": \" evt)\n    (rf/dispatch evt)))\n\n(defn goldly-on-load [symbol-fn]\n  (infof \"goldly lazy loading %s\" symbol-fn)\n  (if-let [ext-name (lookup-module symbol-fn)]\n    (when-not (contains? @lazy-loaded-atom ext-name)\n      (swap! lazy-loaded-atom conj ext-name)\n      (load-css ext-name))\n    (error \"module not found in lookup table: \" symbol-fn)))\n\n(defn add-load-status\n  \"adds :loaded key to each ext in the seq\n   used to display loading status\"\n  [ext-seq]\n  (let [add-load (fn [x]\n                   (assoc x :loaded (loaded? x)))]\n    (into []\n          (map add-load ext-seq))))\n"]}