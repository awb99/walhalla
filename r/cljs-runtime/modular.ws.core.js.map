{"version":3,"sources":["modular/ws/core.cljs"],"mappings":";AAOA,GAAA,QAAAA,oCAAAC,uCAAAC,4CAAAC;AAAA;AAAA,AAAA,AAASC,oBAAE,6CAAA,7CAACC;;AAEZ,gCAAA,hCAAMC,wEAAUC,KAAKC;AAArB,AACE,IAAMC,OAAK,AAACC,iCAASH,KAAKC;AAA1B,AACE,AAACG,sBAAOP,kBAAEK;;AACV,OAACG,sCAAcH;;AAEnB,AAAA,6BAAA,qCAAAI,lEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAMD,sEACFE;AADJ,AAEG,oBAAMA;AAAN,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,kBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,oBAA0BH;GAA1B,OAAA,KAAA,MAAA;;AACA,IAAA,AACE,wDAAA,AAAAK,jDAACC,iEAASnB,mBAAEa;gBADd,QAAAI,JAEkBG;AAFlB,AAGI,OAAAN,0DAAAC,mCAAA,uDAAA,kBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,4BAAmCI;GAAnC,OAAA,KAAA,MAAA;;AALN;;;;AAFH,CAAA,2DAAA,3DAAMT,sEAQFE,KAAKQ,GAAGC;AARZ,AASG,oBAAMT;AAAN,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,kBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,iBAAuBH;GAAvB,OAAA,KAAA,MAAA;;AACA,IAAA,AACE,wDAAA,AAAAK,jDAACC,iEAASnB,mBAAEa,KAAKQ,GAAGC;gBADtB,QAAAC,JAEkBH;AAFlB,AAGI,OAAAN,0DAAAC,mCAAA,uDAAA,kBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,4BAAmCI;GAAnC,OAAA,KAAA,MAAA;;AALN;;;;AATH,CAAA,qDAAA,rDAAMT;;AAAN,AAgBA,yDAAA,zDAACa,iHAEA,WAAKC,GAAGC;AAAR,AACE,IAAAC,iBAAM,AAACC,gBAAMF;AAAb,AAAA,QAAAC;KAAA;AACI,IAAAE,mBAAeH;cAAf,AAAAI,4CAAAD,iBAAA,IAAA,3EAAOE;iBAAP,AAAAD,4CAAAD,iBAAA,IAAA,9EAAShB;AAAT,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,kBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,oBAA0BH;GAA1B,OAAA,KAAA,MAAA;;AACA,AAACmB,yDAAMnB;;;KAHb;AAII,IAAAoB,mBAA0BP;cAA1B,AAAAI,4CAAAG,iBAAA,IAAA,3EAAOF;iBAAP,AAAAD,4CAAAG,iBAAA,IAAA,9EAASpB;eAAT,AAAAiB,4CAAAG,iBAAA,IAAA,5EAAcZ;oBAAd,AAAAS,4CAAAG,iBAAA,IAAA,jFAAiBX;AAAjB,AACE,AAAAR,0DAAAC,mCAAA,qDAAA,kBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,iBAAuBH;GAAvB,OAAA,KAAA,MAAA;;AACA,AAACmB,yDAAMnB,WAAKQ,SAAGC;;;;AACnB,AAAAR,0DAAAC,mCAAA,uDAAA,kBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,wBAA+BU;GAA/B,OAAA,KAAA,MAAA;;;;AACFD","names":["js/modular","js/modular.ws","js/modular.ws.core","js/modular.ws.core.c","modular.ws.core/c","cljs.core.atom","modular.ws.core/init-ws!","path","port","conn","modular.ws.adapter/ws-init!","cljs.core/reset!","modular.ws.adapter/start-router!","var_args","G__45048","modular.ws.core/send!","js/Error","data","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e45069","cljs.core/deref","modular.ws.ws.send","e","cb","timeout","e45072","re_frame.core.reg_event_db","db","v","G__45073","cljs.core/count","vec__45075","cljs.core.nth","_","modular.ws.core.send_BANG_","vec__45078"],"sourcesContent":["(ns modular.ws.core\n  (:require\n   [taoensso.timbre :refer-macros [debug info error]]\n   [re-frame.core :as rf]\n   [modular.ws.adapter :refer [ws-init! start-router!]]\n   [modular.ws.ws :as ws]))\n\n(defonce c (atom nil))\n\n(defn init-ws! [path port]\n  (let [conn (ws-init! path port)]\n    (reset! c conn)\n    (start-router! conn)))\n\n(defn send!\n  ([data]\n   (when data\n     (info \"sending (no cb): \" data)\n     (try\n       (ws/send @c data)\n       (catch :default e\n         (error \"exception sending to ws: \" e)))))\n  ([data cb timeout]\n   (when data\n     (info \"sending (cb): \" data)\n     (try\n       (ws/send @c data cb timeout)\n       (catch :default e\n         (error \"exception sending to ws: \" e))))))\n\n(rf/reg-event-db\n :ws/send\n (fn [db v]\n   (case (count v)\n     2 (let [[_ data] v]\n         (info \"ws send (no cb): \" data)\n         (send! data))\n     4 (let [[_ data cb timeout] v]\n         (info \"ws send (cb): \" data)\n         (send! data cb timeout))\n     (error \":ws/send bad format: \" v))\n   db))"],"x_google_ignoreList":[0]}