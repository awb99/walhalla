{"version":3,"sources":["ui/codemirror/bound/codemirror_atom.cljs"],"mappings":";AAKA,2DAAA,3DAAMA,8HAAsBC,OAAOC,GAAGC,EAAEC;AAAxC,AACE,IAAMC,WAAS,WAAKH;AAAL,AACE,AAAAI,0DAAAC,mCAAA,qDAAA,sCAAA,KAAA,EAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,kBAAwBN;GAAxB,OAAA,KAAA,MAAA;;AACA,oBAAIE;AACF,sDAAA,AAAAK,/CAACC,+DAAQP,GAAEC;;AADb,OAAAK,gBAEGN;;;IACdQ,YAAU,WAAKT,OAAGU;AAAR,AACE,AAAAN,0DAAAC,mCAAA,qDAAA,sCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,mBAAyBN;GAAzB,OAAA,KAAA,MAAA;;AACA,oBAAIE;AACF,OAACS,mDAAMV,EAAEW,mBAASV,KAAKQ;;AACvB,OAACG,sBAAOZ,EAAES;;;IACxBI,YAAU,WAAKC;AAAL,AACE,OAAAX,0DAAAC,mCAAA,qDAAA,sCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,iBAAuBS;GAAvB,OAAA,KAAA,MAAA;;UAXlB,2CAAA,qEAAA,0EAAA,hMAYMC,6GAAeb,yEACCM,wEACAK;AAdtB,AAAA,0FAgBGG,wDAAkBjB,GAAGgB,IAAIjB;;AAE9B,sDAAA,tDAAMmB,oHAAiBlB,GAAGC,EAAEC;AAA5B,AAAA,mJAAA,2CAAA,0DAAA,KAAA,+DAAA,lOACGJ,gPACwCE,GAAGC,EAAEC;;AAEhD,+DAAA,/DAAMiB,sIAA0BnB,GAAGC,EAAEC;AAArC,AAAA,mJAAA,2CAAA,0DAAA,MAAA,+DAAA,nOACGJ,gPACuCE,GAAGC,EAAEC","names":["ui.codemirror.bound.codemirror-atom/codemirror-atom-impl","cm-opt","id","a","path","get-data","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/deref","cljs.core.get_in","save-data","text","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core/reset!","cm-events","cm-evt","fun","ui.codemirror.bound.codemirror-themed/codemirror-themed","ui.codemirror.bound.codemirror-atom/codemirror-atom","ui.codemirror.bound.codemirror-atom/codemirror-atom-viewonly"],"sourcesContent":["(ns ui.codemirror.bound.codemirror-atom\n  (:require\n   [taoensso.timbre :refer-macros [debug debugf info infof error]]\n   [ui.codemirror.bound.codemirror-themed :refer [codemirror-themed]]))\n\n(defn codemirror-atom-impl [cm-opt id a path]\n  (let [get-data (fn [id]\n                   (info \"cm-text get id:\" id)\n                   (if path\n                     (get-in @a path)\n                     @a))\n        save-data (fn [id text]\n                    (info \"cm-text save id:\" id)\n                    (if path\n                      (swap! a assoc-in path text)\n                      (reset! a text)))\n        cm-events (fn [cm-evt]\n                    (info \"cm-text event \" cm-evt))\n        fun {:get-data get-data\n             :save-data save-data\n             :cm-events cm-events}]\n\n    [codemirror-themed id fun cm-opt]))\n\n(defn codemirror-atom [id a path]\n  [codemirror-atom-impl {:active? true\n                         :view-only false} id a path])\n\n(defn codemirror-atom-viewonly [id a path]\n  [codemirror-atom-impl {:active? false\n                         :view-only true} id a path])\n"],"x_google_ignoreList":[0]}