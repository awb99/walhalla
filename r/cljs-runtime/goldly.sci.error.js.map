{"version":3,"sources":["goldly/sci/error.cljs"],"mappings":";AAYA,6BAAA,7BAAMA,kEAAWC;AAAjB,AACE,IAAAC,aAA4BD;IAA5BC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAcI;cAAd,AAAAF,4CAAAF,eAAA,rEAAkBK;IAAlBF,aAC4CE;IAD5CF,iBAAA,AAAAF,4BAAAE;WAAA,AAAAD,4CAAAC,eAAA,lEACcG;WADd,AAAAJ,4CAAAC,eAAA,lEACmBI;aADnB,AAAAL,4CAAAC,eAAA,pEACwBK;WADxB,AAAAN,4CAAAC,eAAA,lEAC+BM;YAD/B,AAAAP,4CAAAC,eAAA,nEACoCO;AADpC,AAAA,0FAAA,6EAAA,mFAAA,6FAG8BN,YAC3B,2BAAA,AAAA,mFAAA,8CAAA,gBAAA,uBAAA,jLAAMC,oJACUK,gBAAgBJ,mBAChC,2BAAA,AAAA,mFAAA,8CAAA,cAAA,cAAA,2BAAA,jMAAMD,mJACSI,cAAcF,iBAAiBC;;AAEnD,8BAAA,9BAAMG,oEAAYC,SAASb;AAA3B,AAAA,0FAAA,6EAAA,mFAAA,8CAAA,oDAAA,jBAE0Ca,oGACtCd,2BAAUC;;AAEd,kCAAA,lCAAMc,4EAAgBD,SAASb;AAA/B,AACE,AAAAe,0DAAAC,mCAAA,uDAAA,mBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,uBAAqCJ,SAASb;GAA9C,OAAA,KAAA,MAAA;;AACA,kFAAA,mGAAA,9KAACkB,kIAAwB,AAACN,4BAAWC,SAASb;;AAEhD,uCAAA,vCAAMmB,sFAAkBC;AAAxB,AAME,IAAMC,OAAK,AAACC,kBAAQF;AAApB,AACE,IAAAG,qBAAmB,iBAAAE,mBAAI,AAAA,yFAAUJ;AAAd,AAAA,oBAAAI;AAAAA;;AAAoB,OAAWL;;;AAAlD,AAAA,oBAAAG;AAAA,AAAA,cAAAA,VAAWC;AAAX,AACE,IAAMH,WAAK,iBAAAI,mBAAI,AAAA,mFAAOJ;AAAX,AAAA,oBAAAI;AAAAA;;AAAiB,OAAQL;;;AAApC,AACE,AAAAL,0DAAAC,mCAAA,uDAAA,mBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,iBAAwBO;GAAxB,OAAA,KAAA,MAAA;;AACA,AAAAT,0DAAAC,mCAAA,uDAAA,mBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,cAAqBI;GAArB,OAAA,KAAA,MAAA;;AAFF,kDAAA,4DAAA,RAGQG,oEACIH;;AALd","names":["goldly.sci.error/sci-error","error","map__48762","cljs.core/--destructure-map","cljs.core.get","map__48763","err","root-ex","type","line","column","file","phase","goldly.sci.error/error-view","filename","goldly.sci.error/show-sci-error","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","frontend.notifications.core.add_notification","goldly.sci.error/exception->error","e","data","cljs.core/ex-data","temp__5804__auto__","message","or__5045__auto__"],"sourcesContent":["(ns goldly.sci.error\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debugf info error]]\n   [frontend.notifications.core :refer [add-notification]]))\n\n; {:error {:root-ex {:type :sci/error\n;                   :line 4\n;                   :column 1\n;                   :file nil\n;                   :phase \"analysis\"}\n;         :err \"Could not resolve symbol: bongotrott\"}}\n\n(defn sci-error [error]\n  (let [{:keys [err root-ex]} error\n        {:keys [type line column file phase]} root-ex]\n    [:div.inline-block\n     [:p.text-red-500.text-bold err]\n     (when root-ex\n       [:p \"phase: \" phase \" type: \" type])\n     (when root-ex\n       [:p \"file: \" file \"line: \" line \" column: \" column])]))\n\n(defn error-view [filename error]\n  [:div.inline-block\n   [:p \"sci cljs compile error in file: \" filename]\n   [sci-error error]])\n\n(defn show-sci-error [filename error]\n  (timbre/error \"compilation failed: \" filename error)\n  (add-notification :error (error-view filename error) 0))\n\n(defn exception->error [e]\n  ; #error {:message \"Could not resolve symbol: call-bad-fn\", \n  ;          :data {:type :sci/error, :line nil, :column nil, :file nil, :phase \"analysis\"}}\n  ; not working:\n  ; error-message (:error/message err)\n  ; error-data (:error/data err)\n  (let [data (ex-data e)]\n    (when-let [message (or (:message data) (.-message e))]\n      (let [data (or (:data data) (.-data e))]\n        (error \"error-message:\" message)\n        (error \"error-data:\" data)\n        {:err message\n         :root-ex data}))))"]}