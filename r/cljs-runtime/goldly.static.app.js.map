{"version":3,"sources":["goldly/static/app.cljs"],"mappings":";;;;AAYA,+BAAA,/BAAMA,qEAAWC;AAAjB,AACE,wDAAA,jDAACC,oIACCD,gBACD,wBAAA,xBAAiBE;;AAEpB,gCAAA,hCAAMC;AAAN,AACE,AAACC;;AACD,OAACC,kDAAO,AAACC;;AAIX,2BAAA,3BAAeC,6DAAOC;AAAtB,AACE,AAACC;;AAED,AAACN;;AACD,yGAAA,zGAACO,mJAAkDF;;AACnD,IAAMG,cAAY,AAACC,+CAAOJ;IACpBK,UAAQ,+CAAA,oBAAIF,pBAAYG,/CAAUF;IAClCG,YAAU,AAACC,4HAAcH;AAF/B,AAGE,AAAOE,eAAU,WAAKE;AAAL,AACE,IAAMjB,UAAQ,AAACkB,sCAAeP;AAA9B,AACE,oBAAIX;AACF,OAACD,6BAAUC;;AACX,gHAAA,zGAACU,oIAAmCC;;;;AAC3D,OAAQI,gBAAU,WAAKI;AAAL,AACE,gHAAA,zGAACT,sIAAqCG","names":["goldly.static.app/mount-app","page-fn","reagent.dom.render","js/document","goldly.static.app/patch-path","goldly.sci.loader.cljs-source-http/set-github-load-mode","goldly.static.app.goog$module$shadow$loader.init","goldly.sci.loader.static/dynamic-base","goldly.static.app/start","symbol-page-as-string","cljs.core/enable-console-print!","cljs.core.println","page-symbol","cljs.core.symbol","libspec","cljs.core/namespace","require-p","goldly.sci.kernel_cljs.require_async","res","goldly.sci.kernel-cljs/resolve-symbol","err"],"sourcesContent":["(ns goldly.static.app\n  (:require\n   [reagent.dom]\n   [taoensso.timbre :refer-macros [info warn]]\n   [shadow.loader :as l]\n   [goldly.sci.loader.static :refer [dynamic-base]]\n   [goldly.sci.loader.cljs-source-http :as cljs-source]\n   [goldly.sci.loader.shadow-module :as shadow-module]\n   [goldly.sci.kernel-cljs :refer [require-async resolve-symbol]]))\n\n; required in goldly.app.build\n\n(defn mount-app [page-fn]\n  (reagent.dom/render\n   [page-fn]\n   (.getElementById js/document \"app\")))\n\n(defn patch-path []\n  (cljs-source/set-github-load-mode)\n  (l/init (dynamic-base)) ; prefix to the path loader\n  ;(shadow-module/set-github-load-mode)\n  )\n\n(defn ^:export start [symbol-page-as-string]\n  (enable-console-print!)\n  \n  (patch-path)\n  (println \"starting goldly static app page symbol:\" symbol-page-as-string)\n  (let [page-symbol (symbol symbol-page-as-string)\n        libspec (-> page-symbol namespace symbol)\n        require-p (require-async libspec)]\n    (.then require-p (fn [res]\n                       (let [page-fn (resolve-symbol page-symbol)]\n                         (if page-fn\n                           (mount-app page-fn)\n                           (println \"could not resolve page: \" page-symbol)))))\n    (.catch require-p (fn [err]\n                        (println \"could not sci-require ns: \" libspec)))))\n\n"]}