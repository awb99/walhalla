{"version":3,"sources":["frontend/settings/subscriptions.cljs"],"mappings":";AAMA,2DAAA,3DAACA,0KAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,rIAACC,+CAAOF;;AAIX,2DAAA,3DAACD,sKAEA,WAAKC,GAAGC;AAAR,AACE,IAAME,SAAO,kDAAA,mFAAA,6DAAA,lMAACD,+CAAOF;AAArB,AACE,GAAI,AAACI,4BAAWD;AACd,AAAI,AAAAE,0DAAAC,mCAAA,uDAAA,kCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,MAAA;;AAAJ;;AAEAJ","names":["re_frame.core.reg_sub","db","_","cljs.core.get_in","prefix","clojure.string/blank?","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay"],"sourcesContent":["(ns frontend.settings.subscriptions\n  (:require\n   [clojure.string :as str]\n   [taoensso.timbre :refer-macros [info warn error]]\n   [re-frame.core :refer [reg-sub]]))\n\n(reg-sub\n :settings\n (fn [db _]\n   (get-in db [:settings])))\n\n\n\n(reg-sub\n :prefix\n (fn [db _]\n   (let [prefix (get-in db [:settings :prefix])]\n     (if (str/blank? prefix)\n       (do (error \"prefix is blank - returning /r/\")\n           \"/r/\")\n       prefix))))\n"],"x_google_ignoreList":[0]}