{"version":3,"sources":["modular/oauth2/provider.cljc"],"mappings":"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","names":["modular.oauth2.provider/provider-uri","provider","provider-name","cljs.core/name","modular.oauth2.provider/get-provider-config","p","c","modular.oauth2.protocol/provider-config","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","modular.oauth2.provider/full-provider-config","config","code","or__5045__auto__","app","cljs.core.get_in","cljs.core.merge","modular.oauth2.provider/ring-oauth2-config","provider-list","modular.oauth2.protocol/known-providers","list","cljs.core.map","cljs.core.apply","cljs.core/merge","modular.oauth2.provider/url-start","provider-kw","current-url","provider-path","cemerick.url.url","cljs.core.assoc","modular.oauth2.provider/scope->string","scope","clojure.string.join","modular.oauth2.provider/nonce","js/Math","modular.oauth2.provider/set-relative-path","path","modular.oauth2.provider/url-without-qp","url-str","url-no-qp-str","modular.oauth2.provider/url-redirect","modular.oauth2.provider/url-authorize","map__39906","cljs.core/--destructure-map","cljs.core.get","authorize-uri","client-id","authorize-query-params","authorize-nonce","authorize-redirect-uri-name","query","clojure.set/rename-keys","cljs.core.pr_str","modular.oauth2.provider/get-provider-auth-header","token","temp__5802__auto__","auth-header","modular.oauth2.provider/parse-userinfo","user-parse"],"sourcesContent":["(ns modular.oauth2.provider\n  (:require\n   [clojure.string]\n   [clojure.set :refer [rename-keys]]\n   [taoensso.timbre :as timbre :refer [debug info infof error]]\n   [cemerick.url :refer [url url-encode]]\n   [modular.oauth2.provider.google :as google]\n   [modular.oauth2.provider.github :as github]\n   [modular.oauth2.provider.xero :as xero]\n   [modular.oauth2.provider.woo :as woo]\n   [modular.oauth2.provider.wordpress :as wordpress]\n   [modular.oauth2.protocol :refer [provider-config known-providers]]))\n\n;; our page strucutre for different providers\n\n(defn provider-uri [provider]\n  (let [provider-name (name provider)]\n    {:start-uri       (str \"/api/oauth2/start/\" provider-name)\n     :redirect-uri     (str \"/oauth2/redirect/\" provider-name)\n     :landing-uri      (str \"/oauth2/landing/\" provider-name)}))\n\n;; PROVIDER LIST\n\n(defn get-provider-config [p]\n  (let [c (provider-config p)]\n    (debug \"provider \" p \"config: \" c)\n    c))\n\n;; RING CONFIG\n\n(defn full-provider-config [config provider]\n  (let [code (or (get-provider-config provider) {})\n        app (or (get-in config [:oauth2 provider]) {})]\n    (merge code app)))\n\n(defn ring-oauth2-config [config]\n  (let [provider-list (known-providers)\n        list (map (fn [p] {p (full-provider-config config p)}) provider-list)]\n    (apply merge list)))\n\n;; AUTHORIZE - START\n\n(defn url-start [provider-kw current-url]\n  (let [provider-path (-> provider-kw provider-uri :start-uri)]\n    (-> (url current-url)\n        (assoc :query {:current-url current-url}\n               :path provider-path)\n        (str))))\n\n(defn scope->string [scope]\n  (let [scope (if (nil? scope) \"\" scope)\n        scope (if (string? scope)\n                scope\n                (clojure.string/join \" \" scope))]\n    scope))\n\n#?(:cljs (defn nonce []\n           (.toString (.random js/Math)))\n   :clj  (defn nonce []\n           (str (rand-int Integer/MAX_VALUE))))\n\n(defn set-relative-path [current-url path]\n  (-> (url current-url)\n      (assoc :path path)\n      (.toString)))\n\n;(defn url-without-qp [url-str]\n;  (let [{:keys [proto host port path]} (url url-str)\n;        port-str (if (< 0 port)\n;                   (str \":\" port)\n;                   \"\")\n;        url-str-no-qp (str proto \":\" host port-str path)]\n;    (info \"url without qp: \" url-str-no-qp)\n;    url-str-no-qp))\n\n(defn url-without-qp [url-str]\n  (info \"url with qp: \" url-str)\n  (let [url-no-qp-str (-> (url url-str)\n                          (assoc :query nil :anchor nil)\n                          str)]\n    (info \"url without qp: \" url-no-qp-str)\n    url-no-qp-str))\n\n(defn url-redirect [provider-kw current-url]\n  (->> provider-kw\n       provider-uri\n       :redirect-uri\n       (set-relative-path current-url)\n       (url-without-qp)))\n\n(defn url-authorize [config provider current-url]\n  (let [{:keys [authorize-uri client-id scope\n                authorize-query-params\n                authorize-nonce authorize-redirect-uri-name]} (full-provider-config config provider)\n        query {:client_id client-id\n               :redirect_uri  (url-redirect provider current-url)\n               ; If the value is code, launches a Basic authorization code flow, requiring a POST to the token endpoint to obtain the tokens.\n               ;  If the value is token id_token or id_token token, launches an Implicit flow\n               ;:response_type authorize-response-type ; response_type=token\n               :scope (scope->string scope)\n               ; state: sessionid\n               }\n        query (if authorize-redirect-uri-name\n                (rename-keys query {:redirect_uri authorize-redirect-uri-name})\n                query)\n        query (if authorize-nonce\n                (assoc query :nonce (nonce))\n                query)\n        query (merge authorize-query-params query)]\n    (info \"authorize query params: \" authorize-query-params)\n    (infof \"oauth2 for: %s authorize-uri: %s params: %s\" provider authorize-uri (pr-str query))\n    (-> (url authorize-uri)\n        (assoc :query query)\n        str\n        ;url-encode\n        )))\n\n;; REQUESTS (use the api)\n\n(defn get-provider-auth-header [p token]\n  (if-let [config (get-provider-config p)]\n    (let [auth-header (:auth-header config)]\n      (auth-header token))\n    (do (error \"cannot get auth header for unknwon provider\")\n        {})))\n\n(defn parse-userinfo [p token]\n  (if-let [config (get-provider-config p)]\n    (let [user-parse (:user-parse config)]\n      (user-parse token))\n    (do (error \"cannot parse userinfo unknwon provider\")\n        {})))"],"x_google_ignoreList":[0]}