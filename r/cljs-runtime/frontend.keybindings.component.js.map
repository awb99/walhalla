{"version":3,"sources":["frontend/keybindings/component.cljs"],"mappings":";AAOA,4CAAA,5CAAMG,gGAAYC;AAAlB,AAAA,0FAAA,qMAAA,mFAAA,sDAAA,2CAAA,wDAAA,kCAAA,qDAAA,OAAA,4DAAA,+DAAA,WAAAJ,hFAIyBI;AAJzB,AAK0B,8BAAA,mFAAA,1GAACC,gMAAkC,AAAA,AAAAL;GAL7D,oEAAA,WAAAC;AAAA,AAM0B,mCAAA,mFAAA,/GAACK,oMAAuC,AAAAL;GANlE,mDAAA,WAAAC;AAAA,AAUmB,oBAAAA;AAAA,AAAQ,OAAAA;;AAAR;;mBAVnB,mFAAA,mDAAA,mFAAA,iGAAA,2CAAA,6DAAA;AAAA,AAciB,8BAAA,mFAAA,1GAACG;;;AAIlB,kDAAA,lDAAME,4GAAkBC;AAAxB,AACE,oBAAMA;AAAN,AACE,AAAAC,0DAAAC,mCAAA,wDAAA,iCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,MAAA;;AACA,oBAAI,AAA0BH;AAC5B,iCAAA,1BAAyBA;;AACzB,yBAAA,lBAAiBA;;;AAJrB;;;AAMF,8CAAA,9CAAMK,oGAAcC,KAAKC;AAAzB,AAAA,0FAAA,mDAAA,2CAAA,4GAAA,mDAAA,WAAAH,lHAEW,iCAAA,AAAA,aAAA,5BAAMG;AAFjB,AAGU,oBAAMA;AAAN,AAAc,uDAAAH,hDAACL;;AAAf;;WAHV,mFAAA,yGAAA,2CAAA,6DAAA;AAAA,AAKgB,mCAAA,mFAAA,/GAACD,oLAA+BQ;WALhD,mFAAA,mKAAA,mFAAA,qIAAA,2CAAA,wDAAA,5ZAMkB,AAAA,mFAAOA,yVAGpB,AAAA,+EAAKA;;AAEV,iDAAA,jDAAME,0GAAiBC,cAAcC;AAArC,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,YAAA,uDAAA,2CAAA,kEAAA,OAAA,iEAAA,QAAA,iEAAA,0BAKG,iCAAA,fAAMD,eACJ,6CAAA,mFAAA,hIAACE,0LACK,AAACC,oDAAY,WAAKC,EAAEC;AAAP,AAAA,0FACGT,4CAAaS,EAAE,AAACC,6CAAEF,EAAEH;mBAH5C,hBAIqBD;;AAIxB,oDAAA,pDAAMO;AAAN,AAEE,IAAMK,UAAQ,sDAAA,mFAAA,zIAACC;IAAfL,aAAA,AAAAC,gBAC+CG;IAD/CJ,iBAAA,AAAAE,4BAAAF;YAAA,AAAAG,4CAAAH,eAAA,nEACcrB;oBADd,AAAAwB,4CAAAH,eAAA,3EACoBR;gBADpB,AAAAW,4CAAAH,eAAA,vEACkCP;AADlC,AAAA,0FAAA,2EAAA,2IAAA,xDAGIf,0CAAWC,iGACXY,+CAAgBC,cAAcC","names":["p1__44893#","p1__44894#","p1__44895#","frontend.keybindings.component/search-box","query","re-frame.core/dispatch","re-frame.core/dispatch-sync","frontend.keybindings.component/scroll-into-view","el","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","p1__44900#","frontend.keybindings.component/palette-item","item","active?","frontend.keybindings.component/keybinding-list","visible-items","highlight","cljs.core.into","cljs.core.map_indexed","i","x","cljs.core._EQ_","frontend.keybindings.component/keybindings-dialog","map__44914","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","palette","re_frame.core.subscribe"],"sourcesContent":["(ns frontend.keybindings.component\n  (:require\n   [taoensso.timbre :refer-macros [debug]]\n   [re-frame.core :refer [subscribe dispatch dispatch-sync]]))\n\n;; search-box\n\n(defn search-box [query]\n  [:div.flex.flex-row.items-stretch.mb-0.border.border-solid.border-blue-800.p-0\n   [:input {:class \"w-full ml-2 bg-blue-200 text-lg\"\n            :type        \"text\"\n            :value       query\n            :on-change   #(dispatch [:palette/filter-changed (-> % .-target .-value)])\n            :on-key-down #(dispatch-sync [:palette/filter-keydown (.-which %)])\n              ;; TODO  : on-blur kicks in before menu gets the click, but we want\n              ;; :on-blur   #(dispatch [:palette-blur])\n              ;; :on-mouse-down #(dispatch [:palette-blur])\n            :ref  #(when % (.focus %)) ; make input focused\n            }]\n   [:div\n    [:i.fas.fa-times-circle.pr-2\n     {:on-click #(dispatch [:modal/close])}]]])\n\n;; keybinding-list\n\n(defn scroll-into-view [el]\n  (when el\n    (debug \"scroll-into-view\")\n    (if (.-scrollIntoViewIfNeeded el)\n      (.scrollIntoViewIfNeeded el false)\n      (.scrollIntoView el false))))\n\n(defn palette-item [item active?]\n  [:div\n   {:class (when active? \"bg-red-300\")\n    :ref #(when active? (scroll-into-view %))}\n   [:li.flex.flex-row.items-stretch\n    {:on-click #(dispatch-sync [:palette/action item])}\n    [:span.w-full (:desc item)]\n    [:span.m-2.border.border-round.border-blue-400\n     {:class \"w-1/4\"}\n     (:kb item)]]])\n\n(defn keybinding-list [visible-items highlight]\n  [:div {:class \"mt-0 pt-0\"\n         :style {:overflow-y \"auto\"\n                 :max-height \"300px\"\n                 :background \"#f5f5f5\"}}\n   (when visible-items\n     (into [:ul]\n           (map-indexed (fn [i x]\n                          [palette-item x (= i highlight)])\n                        visible-items)))])\n\n;; dialog\n\n(defn keybindings-dialog\n  []\n  (let [palette (subscribe [:palette])\n        {:keys [query visible-items highlight]} @palette]\n    [:div.bg-blue-200\n     [search-box query]\n     [keybinding-list visible-items highlight]]))"],"x_google_ignoreList":[0]}