{"version":3,"sources":["goldly/sci/load_shadow.cljs"],"mappings":";AAcA,yCAAA,zCAAMA,0FAAiBC;AAAvB,AACE,YAAAC,QACC,WAAKC,QAAQC;AAAb,AACE,IAAMC,cAAY,WAAKC;AAAL,AACE,AAAAC,0DAAAC,mCAAA,qDAAA,yBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,8BAAoCH;GAApC,OAAA,KAAA,MAAA;;AAEA,QAACH,wCAAAA,6CAAAA,PAAQG,yBAAAA;;AAH7B,AAIE,OAACI,+CAAUT,SAASI","names":["goldly.sci.load-shadow/load-ext-shadow","loadable","js/Promise","resolve","reject","handle-load","mod","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","shadow.lazy.load"],"sourcesContent":["(ns goldly.sci.load-shadow\n  (:require\n   [cljs.core.async :refer [>! <! chan close! put! take!] :refer-macros [go]]\n   [taoensso.timbre :refer [trace debug debugf info infof warn warnf error errorf]]\n   [shadow.lazy :as lazy]))\n\n; https://code.thheller.com/blog/shadow-cljs/2019/03/03/code-splitting-clojurescript.html\n; https://clojureverse.org/t/shadow-lazy-convenience-wrapper-for-shadow-loader-cljs-loader/3841\n\n; (def xy (lazy/loadable [demo.thing/x demo.other/y]))\n; (def xym (lazy/loadable {:x demo.thing/x\n;                         :y demo.other/y}))\n; (def x (lazy/loadable snippets.snip/add))\n\n(defn load-ext-shadow [loadable]\n  (js/Promise.\n   (fn [resolve reject]\n     (let [handle-load (fn [mod]\n                         (info \"shadow module-ns did load: \" mod)\n                         ;(let [mod-js (clj->js mod)])\n                         (resolve mod))]\n       (lazy/load loadable handle-load)))))"]}