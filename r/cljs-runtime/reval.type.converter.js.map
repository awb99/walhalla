{"version":3,"sources":["reval/type/converter.cljc"],"mappings":";AAIA,yCAAA,zCAAMA,0FAAmBC;AAAzB,AACE,IAAMC,cAAY,4CAAA,eAAID,fAAEE;AAAxB,AAAA,0FAAA,sFAAA,mFAAA,4FAAA,mFAAA,vGAEoBD,4JACV,AAACE,wGAAOH;;AAEpB,gCAAA,mFAAA,4EAAA,mFAAA,8CAAA,hUAAKI;AAYF,6CAAA,7CAAMC,kGAAoBL;AAA1B,AACE,IAAA,AACE,OAACO,8BAAUP;gBADb,QAAAM,JAEkBE;AAFlB,AAGI,OAACT,uCAAkBC","names":["reval.type.converter/unknown-type-view","v","type-as-str","cljs.core/type","cljs.core.pr_str","reval.type.converter/nil-view","reval.type.converter/value-type->hiccup","e51167","reval.type.protocol/to-hiccup","e"],"sourcesContent":["(ns reval.type.converter\n  (:require\n   [reval.type.protocol :refer [to-hiccup]]))\n\n(defn unknown-type-view [v]\n  (let [type-as-str (-> v type str)]\n    [:div.border-solid.p-2\n     [:p.text-red-300 type-as-str]\n     [:span (pr-str v)]]))\n\n(def nil-view\n  [:div.p-2.clj-nil\n   [:p \"nil\"]])\n\n#?(:clj\n   (defn value-type->hiccup [v]\n     (try\n       (with-meta (to-hiccup v) {:hiccup true})\n       (catch Exception _\n         (unknown-type-view v))))\n\n   :cljs\n   (defn value-type->hiccup [v]\n     (try\n       (to-hiccup v)\n       (catch :default e ; js/Exception _\n         (unknown-type-view v)))))\n\n"],"x_google_ignoreList":[0]}