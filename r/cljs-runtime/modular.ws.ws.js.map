{"version":3,"sources":["modular/ws/ws.cljs"],"mappings":";AAKA,uCAAA,vCAAOA,sFACJC;AADH,AAEE,AAAAC,0DAAAC,mCAAA,wDAAA,gBAAA,KAAA,EAAA,gDAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,oCAA4CH;GAA5C,OAAA,KAAA,KAAA;;AACA,GAAI,AAACI,wBAAQJ;AACX,AACE,AAAAC,0DAAAC,mCAAA,wDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,mBAA0BH;GAA1B,OAAA,KAAA,KAAA;;AACA,OAACK,uBAAYL;;AACf,OAAAC,0DAAAC,mCAAA,uDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,sDAA6DH;GAA7D,OAAA,KAAA,KAAA;;;AAEJ,AAAA,qBAAA,6BAAAM,lDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mDAAA,nDAAMD,8DACFE,KAAKC;AADT,AAEG,IAAAC,aAA2BF;IAA3BE,iBAAA,AAAAC,4BAAAD;sBAAA,AAAAE,4CAAAF,eAAA,7EAAcG;AAAd,AACE,AAAAd,0DAAAC,mCAAA,wDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,KAAA;;AACA,oBAAIY;AACF,QAACA,gDAAAA,sDAAAA,RAAWJ,kCAAAA;;AACZ,OAAAV,0DAAAC,mCAAA,uDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,wCAA+CQ;GAA/C,OAAA,KAAA,KAAA;;;;AANP,CAAA,mDAAA,nDAAMH,8DAOFE,KAAKC,KAAKK,GAAGC;AAPjB,AAQG,IAAAC,aAA2BR;IAA3BQ,iBAAA,AAAAL,4BAAAK;sBAAA,AAAAJ,4CAAAI,eAAA,7EAAcH;AAAd,AACE,AAAAd,0DAAAC,mCAAA,wDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,KAAA;;AACA,oBAAIY;AACF,QAACA,gDAAAA,iEAAAA,nBAAWJ,6CAAAA,xCAAKM,6CAAAA,rCAAQD,6CAAAA;;AACzB,OAAAf,0DAAAC,mCAAA,uDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,wCAA+CQ;GAA/C,OAAA,KAAA,KAAA;;;;AAZP,CAAA,6CAAA,7CAAMH;;AAAN","names":["modular.ws.ws/cb-dispatch-to-reframe","cb-reply","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/vector?","re-frame.core/dispatch","var_args","G__41379","modular.ws.ws/send","js/Error","conn","data","map__41383","cljs.core/--destructure-map","cljs.core.get","chsk-send!","cb","timeout","map__41385"],"sourcesContent":["(ns modular.ws.ws\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info error]]\n   [re-frame.core :as rf]))\n\n(defn- cb-dispatch-to-reframe\n  [cb-reply]\n  (debugf \"dispatching ws callback reply: %s\" cb-reply)\n  (if (vector? cb-reply)\n    (do\n      (debug \"dispatching cb: \" cb-reply)\n      (rf/dispatch cb-reply))\n    (error \"ws reply/dispatch to reframe failed. not a vector: \" cb-reply)))\n\n(defn send\n  ([conn data]\n   (let [{:keys [chsk-send!]} conn]\n     (debug \"chsk-send!\")\n     (if chsk-send!\n       (chsk-send! data)  ; sente send callbacks dont work with reframe\n       (error \"chsk-send! not defined! cannot send: \" data))))\n  ([conn data cb timeout]\n   (let [{:keys [chsk-send!]} conn]\n     (debug \"chsk-send!\")\n     (if chsk-send!\n       (chsk-send! data timeout cb)  ; sente send callbacks dont work with reframe\n       (error \"chsk-send! not defined! cannot send: \" data)))))\n"],"x_google_ignoreList":[0]}