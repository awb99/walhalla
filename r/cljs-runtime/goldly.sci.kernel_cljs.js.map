{"version":3,"sources":["goldly/sci/kernel_cljs.cljs"],"mappings":"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","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","goldly.sci.kernel-cljs/require-async","seq54644","self__5755__auto__","cljs.core/seq","libspec","cljs.core.apply","sci.async/require","goldly.sci.kernel-cljs/ctx-repl","goldly.sci.kernel-cljs/compile-code","code","e54645","sci.core/eval-string*","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","goldly.sci.kernel-cljs/resolve-symbol","sym","sci.impl.resolve.resolve_symbol","goldly.sci.kernel-cljs/!last-ns","cljs.core/deref","cljs.core.atom","sci.core/ns","cljs.core/enable-console-print!","goldly.sci.kernel-cljs/output","goldly.sci.kernel-cljs/my-print-fn","seq54646","args","js/console.log","js/console","cljs.core.into_array","cljs.core/str","cljs.core.swap_BANG_","sci.core.alter_var_root","sci.core/print-fn","cljs.core/constantly","sci.core/print-err-fn","cljs.core/*print-err-fn*","goldly.sci.kernel-cljs/compile-code-async","e54647","bm__51714__auto__","cljs.core/map?","js/Error","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","eval-p","sci.async.eval_string_PLUS_","res","map__54648","cljs.core/--destructure-map","cljs.core.get","val","ns","result","cljs.core/reset!","goldly.sci.kernel-cljs/rns","sci.core.create_ns","goldly.sci.kernel-cljs/ctx-static","goldly-bindings-generated/bindings-generated","cljs.core.merge","goldly-bindings-generated/ns-generated","ns__51701__auto__","var__51702__auto__","goldly.sci.clojure-core/time","val__51703__auto__","m__51704__auto__","cljs.core/meta","name__51705__auto__","or__5045__auto__","new-m__51706__auto__","sci.core.new_dynamic_var","sci.core.new_macro_var","sci.core.new_var","goldly.sci.clojure-core/cljns","cljs.core/system-time","cljs.core/random-uuid","cljs.reader/read-string","js/window","goldly.sci.loader.async-load/async-load-fn","sci.core/init"],"sourcesContent":["(ns goldly.sci.kernel-cljs\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info warn error]]\n   [promesa.core]\n   [cljs.reader :refer [read-string]]\n   ; sci\n   [sci.core :as sci]\n   [sci.async :as scia]\n   [sci.impl.resolve :as sci-resolve]\n   ; bindings\n   ;[goldly.sci.bindings-static :refer [ns-static]]\n   [goldly-bindings-generated :refer [bindings-generated ns-generated\n                                      sci-lazy-ns-dict lazy-modules]]\n\n   [goldly.sci.clojure-core :refer [cljns] :as clojure-core]\n   ; loading of cljs source-code\n\n   [cljs.core.async :refer [<! >! chan close!] :refer-macros [go]]\n   [goldly.sci.loader.async-load :refer [async-load-fn]]\n   [cemerick.url :as curl]))\n\n(declare ctx-repl) ; since we want to add compile-sci to the bindings, we have to declare the ctx later\n\n(defn ^:export require-async [& libspec] ; symbol\n  (apply scia/require ctx-repl libspec))\n\n; from scittle\n;(defn ^:export eval-string [s]\n;  (try (sci/eval-string* @ctx s)\n;       (catch :default e\n;         (error/error-handler e (:src @ctx))\n;         (let [sci-error? (isa? (:type (ex-data e)) :sci/error)]\n;           (throw (if sci-error?\n;                    (or (ex-cause e) e)\n;                    e))))))\n\n(defn ^:export compile-code [code]\n  (try\n    {:result (sci/eval-string* ctx-repl code)}\n    (catch :default e\n      (timbre/error \"sci compile-code --]\" code \"[-- ex: \" e)\n      {:error  {:root-ex (.-data e)\n                :err (.-message e)}})))\n\n(defn resolve-symbol [sym]\n  (sci-resolve/resolve-symbol ctx-repl sym))\n\n(def !last-ns (atom @sci/ns))\n\n;; allow printing\n\n(enable-console-print!) ; this defines *print-fn*\n\n(def output (atom \"\"))\n\n(defn my-print-fn [& args]\n  (.apply js/console.log js/console (into-array args))\n  ; https://github.com/clojure/clojurescript/commit/da2fa520ae5cd55ade7e263ec3b9a2149eb12f82\n  (let [args (apply str args)\n        args (str args \"\\n\")]\n    (swap! output str args)\n    ;(apply *print-fn* args)\n    ))\n\n;(sci/alter-var-root sci/print-fn (constantly *print-fn*))\n(sci/alter-var-root sci/print-fn (constantly my-print-fn))\n(sci/alter-var-root sci/print-err-fn (constantly *print-err-fn*))\n\n(defn ^:export compile-code-async [code]\n  (try\n    (sci/binding [;sci/out *out* ;; this enables println etc.\n                   ; *print-fn*\n                   ; sci/print-newline true\n                   ; sci/print-fn (fn [s]\n                   ;                (.log js/console \"*print-fn*\")\n                   ;                (.log js/console s)\n                   ;               )\n                  sci/ns @!last-ns]\n      (let [eval-p (scia/eval-string+ ctx-repl code)]\n        (.then eval-p (fn [res]\n                        (let [{:keys [val ns]} res\n                              result  {:id nil\n                                       :code code\n                                       :value val\n                                       :out @output\n                                       :ns (str ns)}]\n                          (reset! !last-ns ns)\n                          (reset! output \"\")\n                          (debug \"sci-cljs compile result: \" result)\n                          result)))))\n    (catch :default e\n      (timbre/error \"sci compile-code-async --]\" code \"[-- ex: \" e)\n      {:error  {:root-ex (.-data e)\n                :err (.-message e)}})))\n\n(def rns (sci/create-ns 'cljs.reader nil))\n\n(def ctx-static\n  {:bindings bindings-generated\n   :preset {:termination-safe false} ; was: true\n   :namespaces (merge\n                ns-generated   ; ns-static\n                {'clojure.core {'require scia/require\n                                'time (sci/copy-var clojure-core/time cljns)\n                                'system-time (sci/copy-var system-time cljns)\n                                'random-uuid random-uuid\n                                'read-string (sci/copy-var read-string rns)\n                                ;'println (sci/copy-var clojure.core/println cljns)\n                               ; '*print-fn* (sci/copy-var clojure.core/println cljns)\n                                }\n                 'goldly.sci {'require-async require-async\n                              'compile-sci compile-code\n                              'compile-sci-async compile-code-async\n                              'resolve-symbol-sci resolve-symbol}})\n\n   :classes  {'js js/window :allow :all}\n   ;:classes  {'js goog/global :allow :all} ; In JS hosts, to allow interop with anything, use the following config:\n   ;:classes {'js js/goog.global\n             ;:allow :all\n            ; 'js goog.global ; this returns the same as window.\n            ; 'console js/console\n            ; 'String js/String\n             ;'js2 js/window\n             ;'window js/window\n    ;         }\n   :disable-arity-checks true ; from clerk\n   :async-load-fn async-load-fn})\n\n(def ctx-repl (sci/init ctx-static))\n\n"]}