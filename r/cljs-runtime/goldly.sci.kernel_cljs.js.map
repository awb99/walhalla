{"version":3,"sources":["goldly/sci/kernel_cljs.cljs"],"mappings":"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","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","goldly.sci.kernel-cljs/require-async","seq54554","self__5755__auto__","cljs.core/seq","libspec","cljs.core.apply","sci.async/require","goldly.sci.kernel-cljs/ctx-repl","goldly.sci.kernel-cljs/compile-code","code","e54555","sci.core/eval-string*","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","goldly.sci.kernel-cljs/resolve-symbol","sym","sci.impl.resolve.resolve_symbol","goldly.sci.kernel-cljs/sci-ns-lookup","libname","temp__5802__auto__","module-name","cljs.core.get","goldly-bindings-generated/sci-lazy-ns-dict","goldly-bindings-generated/lazy-modules","goldly.sci.kernel-cljs/add-sci-ns","ctx","ns","opts","sci-ns","sci-defs","ns-vars","mlns","sci.core.create_ns","sci-ns-def","cljs.core.map","sci-def","ns-var","cljs.core._EQ_","sci.core.new_var","cljs.core.into","sci.core/add-namespace!","goldly.sci.kernel-cljs/load-module-ns","loadable","goldly.sci.load-shadow/load-ext-shadow","goldly.sci.kernel-cljs/load-module","sci-mod","promises","p__54556","vec__54557","cljs.core.nth","map__54560","cljs.core/--destructure-map","p-all","promesa.core/all","_d","goldly.sci.kernel-cljs/load-module-test","js/Promise.resolve","mod","cljs.core.js__GT_clj","sci.core/add-class!","sci.core/add-import!","goldly.sci.kernel-cljs/ns->filename","clojure.string/replace","p__54561","map__54562","goldly.sci.kernel-cljs/valid-code?","result","and__5043__auto__","clojure.string/blank?","p__54563","vec__54564","map__54567","goldly.sci.kernel-cljs/on-cljs-received","resolve","reject","event-type","data","eval-p","sci.async.eval_string_PLUS_","res","map__54568","val","temp__5804__auto__","as","cljs.core.symbol","G__54569","goldly.sci.kernel-cljs/application-url","cemerick.url.url","js/window","p__54570","map__54571","goldly.sci.kernel-cljs/load-module-sci","property-path","d","map__54572","filename","url","protocol","path","url2","url3","js/Promise","response","cljs.core/clj->js","r","status","t","err","G__54573","p__54574","map__54575","goldly.sci.kernel-cljs/async-load-fn","goldly.sci.kernel-cljs/!last-ns","cljs.core/deref","cljs.core.atom","sci.core/ns","cljs.core/enable-console-print!","goldly.sci.kernel-cljs/output","goldly.sci.kernel-cljs/my-print-fn","seq54576","args","js/console.log","js/console","cljs.core.into_array","cljs.core/str","cljs.core.swap_BANG_","sci.core.alter_var_root","sci.core/print-fn","cljs.core/constantly","sci.core/print-err-fn","cljs.core/*print-err-fn*","goldly.sci.kernel-cljs/compile-code-async","e54577","bm__51580__auto__","cljs.core/map?","js/Error","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","map__54578","cljs.core/reset!","goldly.sci.kernel-cljs/rns","goldly.sci.kernel-cljs/ctx-static","goldly-bindings-generated/bindings-generated","cljs.core.merge","goldly-bindings-generated/ns-generated","ns__51567__auto__","var__51568__auto__","goldly.sci.clojure-core/time","val__51569__auto__","m__51570__auto__","cljs.core/meta","name__51571__auto__","or__5045__auto__","new-m__51572__auto__","sci.core.new_dynamic_var","sci.core.new_macro_var","goldly.sci.clojure-core/cljns","cljs.core/system-time","cljs.core/random-uuid","cljs.reader/read-string","sci.core/init"],"sourcesContent":["(ns goldly.sci.kernel-cljs\n  (:require\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info warn error]]\n   [promesa.core]\n   [cljs.reader :refer [read-string]]\n   ; sci\n   [sci.core :as sci]\n   [sci.async :as scia]\n   [sci.impl.resolve :as sci-resolve]\n   ; bindings\n   ;[goldly.sci.bindings-static :refer [ns-static]]\n   [goldly-bindings-generated :refer [bindings-generated ns-generated\n                                      sci-lazy-ns-dict lazy-modules]]\n   [goldly.sci.load-shadow :refer [load-ext-shadow]]\n   [goldly.sci.clojure-core :refer [cljns] :as clojure-core]\n   ; loading of cljs source-code\n   ;[goldly.service.core :refer [run-cb]]\n   [clojure.string]\n   [cljs.core.async :refer [<! >! chan close!] :refer-macros [go]]\n   [cljs-http.client :as http]\n    [cemerick.url :as curl]\n   ))\n\n\n\n\n(declare ctx-repl) ; since we want to add compile-sci to the bindings, we have to declare the ctx later\n\n(defn ^:export require-async [& libspec] ; symbol\n  (apply scia/require ctx-repl libspec))\n\n; from scittle\n;(defn ^:export eval-string [s]\n;  (try (sci/eval-string* @ctx s)\n;       (catch :default e\n;         (error/error-handler e (:src @ctx))\n;         (let [sci-error? (isa? (:type (ex-data e)) :sci/error)]\n;           (throw (if sci-error?\n;                    (or (ex-cause e) e)\n;                    e))))))\n\n(defn ^:export compile-code [code]\n  (try\n    {:result (sci/eval-string* ctx-repl code)}\n    (catch :default e\n      (timbre/error \"sci compile-code --]\" code \"[-- ex: \" e)\n      {:error  {:root-ex (.-data e)\n                :err (.-message e)}})))\n\n(defn resolve-symbol [sym]\n  (sci-resolve/resolve-symbol ctx-repl sym))\n\n(defn sci-ns-lookup [libname]\n  ; (str libname)\n  ;(debug \"available lazy namespaces:\" (pr-str sci-lazy-ns-dict))\n  (debug \"looking up module for sci-ns:\" libname)\n  (if-let [module-name (get sci-lazy-ns-dict libname)]\n    (do (info \"module for \" libname \": \" module-name)\n        (get lazy-modules module-name))\n    (do (info \"no lazy-module found for: \" libname)\n        nil)))\n\n(defn add-sci-ns [ctx libname ns opts sci-ns sci-defs ns-vars]\n  (info \"creating sci ns: \" sci-ns \"ns-vars:\" ns-vars \"sci-defs\" sci-defs)\n  (let [mlns (sci/create-ns sci-ns)\n        sci-ns-def (->> (map (fn [sci-def ns-var]\n                               ;(info \"ci-def:\" sci-def \"ns-var:\" ns-var)\n                               ;(when-let [joke (:joke mod)]\n                               ;  (info \"joke: \" (joke)))\n                               (when (= sci-def :add)\n                                 (info \"TEST: adding: \" (ns-var 7 7)))\n\n                               [sci-def (sci/new-var sci-def ns-var {:ns mlns})])\n                             sci-defs ns-vars)\n                        (into {}))]\n    (info \"sci/add-namespace! sci-ns: \" libname \" sci ns :\" sci-ns \"def: \" sci-ns-def)\n    (sci/add-namespace! ctx libname sci-ns-def)))\n\n(defn load-module-ns [ctx libname ns opts sci-ns sci-def loadable]\n  (-> (load-ext-shadow loadable)\n      (.then\n       (fn [ns-vars]\n         (info \"received ns-vars for sci-ns: \" sci-ns \"libname: \" libname \"ns: \" ns)\n         (add-sci-ns ctx libname ns opts sci-ns sci-def ns-vars)))))\n\n(defn load-module [ctx libname ns opts sci-mod]\n  (info \"load-module: \" libname)\n  (let [promises (map (fn [[sci-ns {:keys [sci-def loadable]}]]\n                        (load-module-ns ctx libname ns opts sci-ns sci-def loadable))\n                      sci-mod)\n        p-all (promesa.core/all promises) ; Given an array of promises, return a promise that is fulfilled when all the items in the array are fulfilled.\n        ]\n    (.then p-all\n           (fn [_d]\n             (info \"load-module: \" libname \" - finished loading all namespaces\")\n             ;(info \"all data: \" d)\n             ;; empty map return value, SCI will still process `:as` and `:refer`\n             {}))))\n\n(defn load-module-test [ctx libname ns opts]\n  (-> (js/Promise.resolve #js {:libfn (fn [] \"result!\")})\n      (.then (fn [mod]\n               (info \"demo lib : \" libname \"did load: \" mod \"mod-clj:\" (js->clj mod))\n               (sci/add-class! ctx (:as opts) mod)\n               (sci/add-import! ctx ns (:as opts) (:as opts))\n               {:handled true}))))\n\n; discover clj/cljs files in resources (can be jar or file)\n\n(defn ns->filename [ns]\n  (-> ns\n      (clojure.string/replace #\"\\.\" \"/\")\n      (clojure.string/replace #\"\\-\" \"_\")))\n\n(defn valid-code? [{:keys [code] :as result}]\n  (and code\n       (not (clojure.string/blank? code))))\n\n(defn on-cljs-received [ctx libname ns opts resolve reject [event-type {:keys [result] :as data}]]\n  (info \"on-cljs-received: \" event-type \"data: \" data)\n  (if (valid-code? result)\n    (let [code (:code result)\n          eval-p (scia/eval-string+ ctx code)]\n      (.then eval-p (fn [res]\n                      (let [{:keys [val ns]} res]\n                        (info \"sci-cljs loader require - compile result: \" res)\n                        (when-let [as (:as opts)]\n                             ;; import class in current namespace with reference to globally\n                             ;; registed class\n                          (warn \"registering as: \" as \"in ns: \" ns \" to:\" (symbol libname))\n                          (sci/add-import! ctx ns (symbol libname) (:as opts)))\n                        (resolve {:handled false}))))\n      (.catch eval-p (fn [e]\n                       (error \"compile error for: \" libname \" error: \" e)\n                       (reject \"compile error for: \" libname))))\n    (reject \"no sci-code for: \" libname)))\n\n#_(defn load-module-sci [{:keys [ctx libname ns opts property-path] :as d}]\n  ; libname: bongo.trott ; the ns that gets compiled\n  ; ns:  demo.notebook.applied-science-jsinterop ; the namespace that is using it\n  ; opts: {:as bongo, :refer [saying]}\n  ; ctx is the sci-context\n  (info \"load-sci-src\" \"libname:\" libname \"ns: \" ns \"opts:\" opts)\n  (let [filename (-> libname str ns->filename (str \".cljs\"))]\n    (info \"loading filename: \" filename)\n    (js/Promise.\n     (fn [resolve reject]\n       (run-cb {:fun 'goldly.cljs.loader/load-file-or-res!\n                :args [filename]\n                :cb (partial on-cljs-received ctx libname ns opts resolve reject)\n                :timeout 8000})))))\n\n(defn application-url\n  \"gets the current url, as a map\"\n  []\n  (curl/url (-> js/window .-location .-href)))\n\n\n\n\n(defn load-module-sci [{:keys [ctx libname ns opts property-path] :as d}]\n  ; libname: bongo.trott ; the ns that gets compiled\n  ; ns:  demo.notebook.applied-science-jsinterop ; the namespace that is using it\n  ; opts: {:as bongo, :refer [saying]}\n  ; ctx is the sci-context\n  (info \"load-sci-src\" \"libname:\" libname \"ns: \" ns \"opts:\" opts)\n  (let [filename (-> libname str ns->filename (str \".cljs\"))\n        url (str \"/code/\" filename)\n        {:keys [protocol path]} (application-url)\n        url2 (str \"file:///home/florian/repo/pink-gorilla/goldly/goldly-test/target/static\" url)\n        url3 (if (= protocol \"file\")\n               (str path url)\n               url)\n        ]\n    (info \"loading filename: \" filename)\n    (info \"protocol: \" protocol \" path: \" path)\n    (warn \"url3: \" url3)\n    (js/Promise.\n     (fn [resolve reject]\n       (let [response (.fetch js/window url2 (clj->js {:mode \"no-cors\"}))]\n         (info \"load-module-sci-cljs url: \" url)\n         (-> response\n             (.then (fn [r]\n                      (let [status (. r -status)]\n                      (info \"http response status: \" status )\n                      (-> (. r text)\n                        (.then (fn [t]\n                                 (info \"http text: \" t)\n                                 (on-cljs-received ctx libname ns opts resolve reject [:http-load {:result {:code t}}])))\n                        (.catch (fn [e]\n                                 (error \"http text error: \" e)\n                                 (reject \"could not get text for sci-cljs-file\")))\n\n                        ))))\n               (.catch (fn [err]\n                        (warn \"http get error: \" err)\n                        (reject (str \"cannot http-get sci-cljs file: \" url))))\n           \n               )\n               )))))\n\n\n(defn async-load-fn\n  [{:keys [libname opts ctx ns] :as d}]\n  (let [sci-mod (sci-ns-lookup libname)]\n    (cond\n      (= libname \"some_js_lib\")\n      (load-module-test ctx libname ns opts)\n\n      sci-mod\n      (load-module ctx libname opts ns sci-mod)\n\n      :else\n      (load-module-sci d))))\n\n(def !last-ns (atom @sci/ns))\n\n;; allow printing\n\n(enable-console-print!) ; this defines *print-fn*\n\n(def output (atom \"\"))\n\n(defn my-print-fn [& args]\n  (.apply js/console.log js/console (into-array args))\n  ; https://github.com/clojure/clojurescript/commit/da2fa520ae5cd55ade7e263ec3b9a2149eb12f82\n  (let [args (apply str args)\n        args (str args \"\\n\")]\n    (swap! output str args)\n    ;(apply *print-fn* args)\n    ))\n\n;(sci/alter-var-root sci/print-fn (constantly *print-fn*))\n(sci/alter-var-root sci/print-fn (constantly my-print-fn))\n(sci/alter-var-root sci/print-err-fn (constantly *print-err-fn*))\n\n(defn ^:export compile-code-async [code]\n  (try\n    (sci/binding [;sci/out *out* ;; this enables println etc.\n                   ; *print-fn*\n                   ; sci/print-newline true\n                   ; sci/print-fn (fn [s]\n                   ;                (.log js/console \"*print-fn*\")\n                   ;                (.log js/console s)\n                   ;               )\n                  sci/ns @!last-ns]\n      (let [eval-p (scia/eval-string+ ctx-repl code)]\n        (.then eval-p (fn [res]\n                        (let [{:keys [val ns]} res\n                              result  {:id nil\n                                       :code code\n                                       :value val\n                                       :out @output\n                                       :ns (str ns)}]\n                          (reset! !last-ns ns)\n                          (reset! output \"\")\n                          (info \"sci-cljs response: \" result)\n                          result)))))\n    (catch :default e\n      (timbre/error \"sci compile-code-async --]\" code \"[-- ex: \" e)\n      {:error  {:root-ex (.-data e)\n                :err (.-message e)}})))\n\n(def rns (sci/create-ns 'cljs.reader nil))\n\n(def ctx-static\n  {:bindings bindings-generated\n   :preset {:termination-safe false} ; was: true\n   :namespaces (merge\n                ns-generated   ; ns-static\n                {'clojure.core {'require scia/require\n                                'time (sci/copy-var clojure-core/time cljns)\n                                'system-time (sci/copy-var system-time cljns)\n                                'random-uuid random-uuid\n                                'read-string (sci/copy-var read-string rns)\n                                ;'println (sci/copy-var clojure.core/println cljns)\n                               ; '*print-fn* (sci/copy-var clojure.core/println cljns)\n                                }\n                 'goldly.sci {'require-async require-async\n                              'compile-sci compile-code\n                              'compile-sci-async compile-code-async\n                              'resolve-symbol-sci resolve-symbol}})\n\n   :classes  {'js js/window :allow :all}\n   ;:classes  {'js goog/global :allow :all} ; In JS hosts, to allow interop with anything, use the following config:\n   ;:classes {'js js/goog.global\n             ;:allow :all\n            ; 'js goog.global ; this returns the same as window.\n            ; 'console js/console\n            ; 'String js/String\n             ;'js2 js/window\n             ;'window js/window\n    ;         }\n   :disable-arity-checks true ; from clerk\n   :async-load-fn async-load-fn})\n\n(def ctx-repl (sci/init ctx-static))\n\n"]}