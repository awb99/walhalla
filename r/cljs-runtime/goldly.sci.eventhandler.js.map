{"version":3,"sources":["goldly/sci/eventhandler.cljs"],"mappings":";AAKA,qCAAA,rCAAOA,kFAAMC;AAAb,AACE,sCAAA,+BAAA,kCAAA,qCAAA,qBAAA,oCAAA,5LAAI,OAASA,wBACT,OAASA,wBACT,AAACC,sBAAMD,YACP,AAACE,yBAASF,YACV,QAAA,PAAMA,oBACN,AAACG,wBAAQH,YACT,gBAAAI,fAASJ,sCACT,gBAAAK,fAAUL;;AAEhB,mCAAA,nCAAMM,8EAAUN;AAAhB,wOAIO,4CAAA,WAAAS,vDAACC,jJAID,AAACM,+CAAO,AAACC,6CAAKlB,mCAAKmB,tNACnB,oDAAA,7CAACC;AALD,AAAM,IAAMR,OAAK,gDACI,uBAAAF,iBAAA,xCAACG,gDAAqB,WAAKC,3GAC3BE;AADsB,AAAQ,QAAA,IAAS,AAACD,0BAAeD;;AADtE,AAAA,0FAGGF,KAAK,KAAAF,JAAMT;oDANpBA,tBACAO,3BACAC,AACA,2BAAA;;AAOP,0CAAA,1CAAMY,4FAAiBC;AAAvB,AACE;mCAAKC,EAAIC;AAAT,AACE,IAAA,AAGE,AAAiBD;;AACjB,AAAkBA;;AAClB,IAAMG,IAAE,AAAUH;IACZI,IAAE,AAASD;IACXE,SAAO,AAACrB,iCAASmB;IACjBG,IAAI,AAAAC,0DAAAC,mCAAA,qDAAA,0BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,oBAAA,mBAAA,rBAAwBL,cAAeC,iBAAiBJ;GAAxD,OAAA,KAAA,MAAA;eAHV,XAIMS,8FAAUN,EAAEC;IACZK,eAAS,EAAI,SAAA,RAAMT,eACRS,SACA,6CAAA,7CAACb,8EAAQ,AAACc,+CAAOD,SAAST;IACrCK,QAAE,AAAAC,0DAAAC,mCAAA,wDAAA,0BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,aAAoBC;GAApB,OAAA,KAAA,MAAA;AARR,AASE,OAACE,8CAAMb,IAAIW;gBAdf,UAAAR,NAekBW;AAflB,AAgBI,OAAAN,0DAAAC,mCAAA,uDAAA,0BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,8BAAqCI;GAArC,OAAA,KAAA,MAAA;;yBAjBDb;IAAIC;;;;EAAAA;;oCAAJD,EAAIC;;;IAAJD;IAAIC;0BAAJD,EAAIC","names":["goldly.sci.eventhandler/edn?","obj","cljs.core/coll?","cljs.core/boolean?","cljs.core/regexp?","cljs.core/Symbol","cljs.core/Keyword","goldly.sci.eventhandler/norm-evt","js/Object.getPrototypeOf","js/Object.getOwnPropertyNames","p1__65480#","cljs.core.map","norm","clojure.string/replace","r","clojure.string/lower-case","cljs.core.keyword","cljs.core.filter","cljs.core.comp","cljs.core/second","cljs.core.into","goldly.sci.eventhandler/eventhandler-fn","fun","e","args","e65482","t","v","e-norm","_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","fun-args","cljs.core.concat","cljs.core.apply","err"],"sourcesContent":["(ns goldly.sci.eventhandler\n  (:require\n   [clojure.string :as str]\n   [taoensso.timbre :as timbre :refer-macros [debug debugf info infof error]]))\n\n(defn- edn? [obj]\n  (or (number? obj)\n      (string? obj)\n      (coll? obj)\n      (boolean? obj)\n      (nil? obj)\n      (regexp? obj)\n      (symbol? obj)\n      (keyword? obj)))\n\n(defn norm-evt [obj]\n  (->> obj\n       js/Object.getPrototypeOf\n       js/Object.getOwnPropertyNames\n       (map #(let [norm (-> %\n                            (str/replace #\"[A-Z]\" (fn [r] (str \"-\" (str/lower-case r))))\n                            keyword)]\n               [norm (aget obj %)]))\n       (filter (comp edn? second))\n       (into {})))\n\n(defn eventhandler-fn [fun]\n  (fn [e & args]\n    (try\n      ;(info \"eventhandler-fn args: \" args) ; fun  - fun displays source\n      ;(info \"running eventhandler with state: \" @state)\n      (.preventDefault e)\n      (.stopPropagation e)\n      (let [t (.-target e)\n            v (.-value t)\n            e-norm (norm-evt t)\n            _   (info \"eventhandler v:\" v  \" e-norm: \" e-norm \" args: \" args)\n            fun-args [v e-norm] ; todo: allow additional properties , not only FUN\n            fun-args (if (nil? args)\n                       fun-args\n                       (into [] (concat fun-args args)))\n            _ (debug \"fun-args: \" fun-args)]\n        (apply fun fun-args))\n      (catch :default err\n        (error \"eventhandler-fn exception: \" err)))))"]}